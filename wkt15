Executing section Default...
Executing section yaml...

.github/workflows/directory_writer.yml
|   1| #•The•objective•of•this•GitHub•Action•is•to•update•the•DIRECTORY.md•file•(if•needed)
|    | [MAJOR] YAMLLintBear:
|    | line too long (84 > 80 characters) (line-length)

.github/workflows/directory_writer.yml
|   4| on:•[push]
|    | [NORMAL] YAMLLintBear:
|    | truthy value is not quoted (truthy)

.github/workflows/directory_writer.yml
|  17| ••••••••••git•config•--global•user.email•'${GITHUB_ACTOR}@users.noreply.github.com'
|    | [MAJOR] YAMLLintBear:
|    | line too long (83 > 80 characters) (line-length)

.github/workflows/directory_writer.yml
|  18| ••••••••••git•remote•set-url•origin•https://x-access-token:${{•secrets.GITHUB_TOKEN•}}@github.com/$GITHUB_REPOSITORY
|    | [MAJOR] YAMLLintBear:
|    | line too long (116 > 80 characters) (line-length)

.github/workflows/directory_writer.yml
|   1| #•The•objective•of•this•GitHub•Action•is•to•update•the•DIRECTORY.md•file•(if•needed)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (84 > 79)

.github/workflows/directory_writer.yml
|  17| ••••••••••git•config•--global•user.email•'${GITHUB_ACTOR}@users.noreply.github.com'
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (83 > 79)

.github/workflows/directory_writer.yml
|  18| ••••••••••git•remote•set-url•origin•https://x-access-token:${{•secrets.GITHUB_TOKEN•}}@github.com/$GITHUB_REPOSITORY
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (116 > 79)

.github/workflows/build.yml
|   3| on:
|    | [NORMAL] YAMLLintBear:
|    | truthy value is not quoted (truthy)

.github/workflows/build.yml
|   6| ••••-•cron:•"0•0•*•*•*"•#•Run•everyday
|    | [NORMAL] YAMLLintBear:
|    | too few spaces before comment (comments)

.github/workflows/build.yml
|  25| ••••••••run:•pytest•--doctest-modules•--ignore=project_euler/•--ignore=scripts/validate_solutions.py•--cov-report=term-missing:skip-covered•--cov=.•.
|    | [MAJOR] YAMLLintBear:
|    | line too long (149 > 80 characters) (line-length)

.github/workflows/build.yml
|  25| ••••••••run:•pytest•--doctest-modules•--ignore=project_euler/•--ignore=scripts/validate_solutions.py•--cov-report=term-missing:skip-covered•--cov=.•.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (149 > 79)

.github/stale.yml
|   6| #•Number•of•days•of•inactivity•before•an•Issue•or•Pull•Request•with•the•stale•label•is•closed.
|    | [MAJOR] YAMLLintBear:
|    | line too long (94 > 80 characters) (line-length)

.github/stale.yml
|   7| #•Set•to•false•to•disable.•If•disabled,•issues•still•need•to•be•closed•manually,•but•will•remain•marked•as•stale.
|    | [MAJOR] YAMLLintBear:
|    | line too long (113 > 80 characters) (line-length)

.github/stale.yml
|  10| #•Only•issues•or•pull•requests•with•all•of•these•labels•are•check•if•stale.•Defaults•to•`[]`•(disabled)
|    | [MAJOR] YAMLLintBear:
|    | line too long (103 > 80 characters) (line-length)

.github/stale.yml
|  13| #•Issues•or•Pull•Requests•with•these•labels•will•never•be•considered•stale.•Set•to•`[]`•to•disable
|    | [MAJOR] YAMLLintBear:
|    | line too long (98 > 80 characters) (line-length)

.github/stale.yml
|  36| #•Optionally,•specify•configuration•settings•that•are•specific•to•just•'issues'•or•'pulls':
|    | [MAJOR] YAMLLintBear:
|    | line too long (91 > 80 characters) (line-length)

.github/stale.yml
|  40| ••••This•pull•request•has•been•automatically•marked•as•stale•because•it•has•not•had
|    | [MAJOR] YAMLLintBear:
|    | line too long (83 > 80 characters) (line-length)

.github/stale.yml
|  48| ••••some•help,•feel•free•to•seek•help•from•our•[Gitter](https://gitter.im/TheAlgorithms)
|    | [MAJOR] YAMLLintBear:
|    | line too long (88 > 80 characters) (line-length)

.github/stale.yml
|   6| #•Number•of•days•of•inactivity•before•an•Issue•or•Pull•Request•with•the•stale•label•is•closed.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (94 > 79)

.github/stale.yml
|   7| #•Set•to•false•to•disable.•If•disabled,•issues•still•need•to•be•closed•manually,•but•will•remain•marked•as•stale.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (113 > 79)

.github/stale.yml
|  10| #•Only•issues•or•pull•requests•with•all•of•these•labels•are•check•if•stale.•Defaults•to•`[]`•(disabled)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (103 > 79)

.github/stale.yml
|  13| #•Issues•or•Pull•Requests•with•these•labels•will•never•be•considered•stale.•Set•to•`[]`•to•disable
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (98 > 79)

.github/stale.yml
|  36| #•Optionally,•specify•configuration•settings•that•are•specific•to•just•'issues'•or•'pulls':
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (91 > 79)

.github/stale.yml
|  40| ••••This•pull•request•has•been•automatically•marked•as•stale•because•it•has•not•had
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (83 > 79)

.github/stale.yml
|  48| ••••some•help,•feel•free•to•seek•help•from•our•[Gitter](https://gitter.im/TheAlgorithms)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (88 > 79)

.github/workflows/project_euler.yml
|   1| on:
|    | [NORMAL] YAMLLintBear:
|    | truthy value is not quoted (truthy)

.github/workflows/project_euler.yml
|   3| ••••#•Run•only•if•a•file•is•changed•within•the•project_euler•directory•and•related•files
|    | [MAJOR] YAMLLintBear:
|    | line too long (88 > 80 characters) (line-length)

.github/workflows/project_euler.yml
|   9| ••••-•cron:•"0•0•*•*•*"•#•Run•everyday
|    | [NORMAL] YAMLLintBear:
|    | too few spaces before comment (comments)

.github/workflows/project_euler.yml
|  25| ••••••-•run:•pytest•--doctest-modules•--cov-report=term-missing:skip-covered•--cov=project_euler/•project_euler/
|    | [MAJOR] YAMLLintBear:
|    | line too long (112 > 80 characters) (line-length)

.github/workflows/project_euler.yml
|   3| ••••#•Run•only•if•a•file•is•changed•within•the•project_euler•directory•and•related•files
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (88 > 79)

.github/workflows/project_euler.yml
|  25| ••••••-•run:•pytest•--doctest-modules•--cov-report=term-missing:skip-covered•--cov=project_euler/•project_euler/
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (112 > 79)

.github/workflows/pre-commit.yml
|   3| on:
|    | [NORMAL] YAMLLintBear:
|    | truthy value is not quoted (truthy)

.github/workflows/pre-commit.yml
|   5| ••••branches:•[•master•]
|    | [MAJOR] YAMLLintBear:
|    | too many spaces inside brackets (brackets)

.github/workflows/pre-commit.yml
|   5| ••••branches:•[•master•]
|    | [MAJOR] YAMLLintBear:
|    | too many spaces inside brackets (brackets)

.github/workflows/pre-commit.yml
|   7| ••••branches:•[•master•]
|    | [MAJOR] YAMLLintBear:
|    | too many spaces inside brackets (brackets)

.github/workflows/pre-commit.yml
|   7| ••••branches:•[•master•]
|    | [MAJOR] YAMLLintBear:
|    | too many spaces inside brackets (brackets)

.github/workflows/pre-commit.yml
|  19| ••••••••••key:•${{•runner.os•}}-pre-commit-${{•hashFiles('.pre-commit-config.yaml')•}}
|    | [MAJOR] YAMLLintBear:
|    | line too long (86 > 80 characters) (line-length)

.github/workflows/pre-commit.yml
|  19| ••••••••••key:•${{•runner.os•}}-pre-commit-${{•hashFiles('.pre-commit-config.yaml')•}}
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (86 > 79)

.pre-commit-config.yaml
|  58| ••••••••••-•--ignore-words-list=ans,crate,fo,followings,hist,iff,mater,secant,som,sur,tim
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (89 > 79)

.pre-commit-config.yaml
|  59| ••••••••••-•--skip="./.*,./strings/dictionary.txt,./strings/words.txt,./project_euler/problem_022/p022_names.txt"
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (113 > 79)
Executing section python...

graphs/check_bipartite_graph_dfs.py
|   4| #•A•Bipartite•Graph•is•a•graph•whose•vertices•can•be•divided•into•two•independent•sets,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/check_bipartite_graph_dfs.py
|   5| #•U•and•V•such•that•every•edge•(u,•v)•either•connects•a•vertex•from•U•to•V•or•a•vertex
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/check_bipartite_graph_dfs.py
|   6| #•from•V•to•U.•In•other•words,•for•every•edge•(u,•v),•either•u•belongs•to•U•and•v•to•V,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/check_bipartite_graph_dfs.py
|   7| #•or•u•belongs•to•V•and•v•to•U.•We•can•also•say•that•there•is•no•edge•that•connects
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

fractals/sierpinski_triangle.py
|   8| >>The•Sierpinski•triangle•(also•with•the•original•orthography•Sierpinski),•also•called
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

fractals/sierpinski_triangle.py
|   9| the•Sierpinski•gasket•or•the•Sierpinski•Sieve,•is•a•fractal•and•attractive•fixed•set
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

fractals/sierpinski_triangle.py
|  10| with•the•overall•shape•of•an•equilateral•triangle,•subdivided•recursively•into•smaller
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

fractals/sierpinski_triangle.py
|  11| equilateral•triangles.•Originally•constructed•as•a•curve,•this•is•one•of•the•basic
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

fractals/sierpinski_triangle.py
|  12| examples•of•self-similar•sets,•i.e.,•it•is•a•mathematically•generated•pattern•that•can
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

fractals/sierpinski_triangle.py
|  14| mathematician•Wacław•Sierpinski,•but•appeared•as•a•decorative•pattern•many•centuries
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

fractals/sierpinski_triangle.py
|  53| ••••••••••••[points[0],•getMid(points[0],•points[1]),•getMid(points[0],•points[2])],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

fractals/sierpinski_triangle.py
|  57| ••••••••••••[points[1],•getMid(points[0],•points[1]),•getMid(points[1],•points[2])],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

fractals/sierpinski_triangle.py
|  61| ••••••••••••[points[2],•getMid(points[2],•points[1]),•getMid(points[0],•points[2])],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_144/sol1.py
|   2| In•laser•physics,•a•"white•cell"•is•a•mirror•system•that•acts•as•a•delay•line•for•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_144/sol1.py
|   3| laser•beam.•The•beam•enters•the•cell,•bounces•around•on•the•mirrors,•and•eventually
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_144/sol1.py
|   9| The•section•corresponding•to•−0.01•≤•x•≤•+0.01•at•the•top•is•missing,•allowing•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_144/sol1.py
|  12| The•light•beam•in•this•problem•starts•at•the•point•(0.0,10.1)•just•outside•the•white
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_144/sol1.py
|  15| Each•time•the•laser•beam•hits•the•surface•of•the•ellipse,•it•follows•the•usual•law•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_144/sol1.py
|  16| reflection•"angle•of•incidence•equals•angle•of•reflection."•That•is,•both•the•incident
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_144/sol1.py
|  17| and•reflected•beams•make•the•same•angle•with•the•normal•line•at•the•point•of•incidence.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_144/sol1.py
|  19| In•the•figure•on•the•left,•the•red•line•shows•the•first•two•points•of•contact•between
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_144/sol1.py
|  20| the•laser•beam•and•the•wall•of•the•white•cell;•the•blue•line•shows•the•line•tangent•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_144/sol1.py
|  23| The•slope•m•of•the•tangent•line•at•any•point•(x,y)•of•the•given•ellipse•is:•m•=•−4x/y
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_144/sol1.py
|  25| The•normal•line•is•perpendicular•to•this•tangent•line•at•the•point•of•incidence.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_144/sol1.py
|  29| How•many•times•does•the•beam•hit•the•internal•surface•of•the•white•cell•before•exiting?
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_144/sol1.py
|  42| ••••where•the•next•point•of•contact•with•the•interior•is•(x,y)•with•gradient•m1.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_144/sol1.py
|  55| ••••outgoing_gradient•=•(s2•-•c2•*•incoming_gradient)•/•(c2•+•s2•*•incoming_gradient)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_144/sol1.py
|  62| ••••linear_term•=•2•*•outgoing_gradient•*•(point_y•-•outgoing_gradient•*•point_x)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_144/sol1.py
|  66| ••••••••-linear_term•-•sqrt(linear_term**2•-•4•*•quadratic_term•*•constant_term)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_144/sol1.py
|  69| ••••••••-linear_term•+•sqrt(linear_term**2•-•4•*•quadratic_term•*•constant_term)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_144/sol1.py
|  88| ••••num_reflections:•int•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_144/sol1.py
|  89| ••••point_x:•float•=•first_x_coord
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_144/sol1.py
|  90| ••••point_y:•float•=•first_y_coord
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_144/sol1.py
|  91| ••••gradient:•float•=•(10.1•-•point_y)•/•(0.0•-•point_x)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

linear_algebra/src/test_linear_algebra.py
| 204| ••••••••••••"|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

web_programming/covid_stats_via_xpath.py
|   3| *•The•main•motivation•to•use•lxml•in•place•of•bs4•is•that•it•is•faster•and•therefore
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

web_programming/covid_stats_via_xpath.py
|  15| def•covid_stats(url:•str•=•"https://www.worldometers.info/coronavirus/")•->•covid_data:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

web_programming/covid_stats_via_xpath.py
|  17| ••••return•covid_data(*html.fromstring(requests.get(url).content).xpath(xpath_str))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

data_structures/stacks/stack_with_doubly_linked_list.py
|  14| ••••••••self.next:•Node[T]•|•None•=•None••#•Initialize•next•as•null
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/stacks/stack_with_doubly_linked_list.py
|  15| ••••••••self.prev:•Node[T]•|•None•=•None••#•Initialize•prev•as•null
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/stacks/stack_with_doubly_linked_list.py
|  45| ••••••••self.head:•Node[T]•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/stacks/stack_with_doubly_linked_list.py
|  97| ••••stack:•Stack[int]•=•Stack()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

ciphers/rot13.py
|   5| ••••>>>•msg•=•"My•secret•bank•account•number•is•173-52946•so•don't•tell•anyone!!"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

bit_manipulation/binary_and_operator.py
|  45| ••••••••for•char_a,•char_b•in•zip(a_binary.zfill(max_len),•b_binary.zfill(max_len))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

sorts/odd_even_transposition_parallel.py
|  82| ••••#•the•first•and•last•process•only•have•one•neighbor•so•they•are•made•outside
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

sorts/odd_even_transposition_parallel.py
| 101| ••••••••••••••••args=(i,•arr[i],•tempLs,•tempRs,•tempLr,•tempRr,•resultPipe[i]),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/polynomial_evaluation.py
|  21| ••••In•terms•of•computational•complexity,•Horner's•method•is•an•efficient•method
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/polynomial_evaluation.py
|  23| ••••and•instead•uses•only•multiplication•and•addition•to•evaluate•the•polynomial
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

hashes/chaos_machine.py
|   9| buffer_space:•list[float]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

hashes/chaos_machine.py
|  10| params_space:•list[float]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

ciphers/rsa_factorization.py
|  21| ••••We•call•N•the•RSA•modulus,•e•the•encryption•exponent,•and•d•the•decryption•exponent.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

ciphers/rsa_factorization.py
|  22| ••••The•pair•(N,•e)•is•the•public•key.•As•its•name•suggests,•it•is•public•and•is•used•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

ciphers/rsa_factorization.py
|  24| ••••The•pair•(N,•d)•is•the•secret•key•or•private•key•and•is•known•only•to•the•recipient
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

audio_filters/iir_filter.py
|  35| ••••def•set_coefficients(self,•a_coeffs:•list[float],•b_coeffs:•list[float])•->•None:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

audio_filters/iir_filter.py
|  37| ••••••••Set•the•coefficients•for•the•IIR•filter.•These•should•both•be•of•size•order•+•1.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

audio_filters/iir_filter.py
|  54| ••••••••••••••••f"Expected•a_coeffs•to•have•{self.order•+•1}•elements•for•{self.order}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

audio_filters/iir_filter.py
|  60| ••••••••••••••••f"Expected•b_coeffs•to•have•{self.order•+•1}•elements•for•{self.order}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

neural_network/back_propagation_neural_network.py
|  53| ••••••••self.weight•=•np.asmatrix(np.random.normal(0,•0.5,•(self.units,•back_units)))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

neural_network/back_propagation_neural_network.py
|  93| ••••••••#•updates•the•weights•and•bias•according•to•learning•rate•(0.3•if•undefined)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/binary_tree/wavelet_tree.py
|   2| Wavelet•tree•is•a•data-structure•designed•to•efficiently•answer•various•range•queries
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/binary_tree/wavelet_tree.py
|   3| for•arrays.•Wavelets•trees•are•different•from•other•binary•trees•in•the•sense•that
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

data_structures/binary_tree/wavelet_tree.py
|   4| the•nodes•are•split•based•on•the•actual•values•of•the•elements•and•not•on•indices,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

data_structures/binary_tree/wavelet_tree.py
|   5| such•as•the•with•segment•trees•or•fenwick•trees.•You•can•read•more•about•them•here:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

data_structures/binary_tree/wavelet_tree.py
|  17| ••••••••self.minn:•int•=•-1
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/wavelet_tree.py
|  18| ••••••••self.maxx:•int•=•-1
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/wavelet_tree.py
|  19| ••••••••self.map_left:•list[int]•=•[-1]•*•length
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/wavelet_tree.py
|  20| ••••••••self.left:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/wavelet_tree.py
|  21| ••••••••self.right:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/wavelet_tree.py
|  55| ••••left_arr:•list[int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/wavelet_tree.py
|  56| ••••right_arr:•list[int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/wavelet_tree.py
| 101| ••••Returns•the•number•of•occurrences•of•num•in•interval•[start,•end]•in•the•list
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

web_programming/giphy.py
|  13| ••••url•=•f"http://api.giphy.com/v1/gifs/search?q={formatted_query}&api_key={api_key}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/gamma.py
|  12| ••••The•gamma•function•is•defined•for•all•complex•numbers•except•the•non-positive
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

divide_and_conquer/kth_order_statistic.py
|  19| ••••We•can•use•a•more•sophisticated•algorithm•here,•such•as•the•median-of-medians
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/linked_list/deque_doubly.py
|  24| ••••••••••••••••f"•Prev•->•{self._prev•is•not•None},•Next•->•{self._next•is•not•None}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

web_programming/get_imdbtop.py
|  16| ••••return•a•tuple•of•dicts•describing•each•movie's•name,•genre,•rating,•and•URL.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

web_programming/get_imdbtop.py
|  51| ••••••••••••json.dumps(movie,•indent=4)•for•movie•in•get_imdb_top_movies(num_movies)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

sorts/random_normal_distribution_quicksort.py
|  61| ••••"No•of•Comparisons•for•100•elements•selected•from•a•standard•normal•distribution"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/newton_raphson.py
|   4| ••••f(x)•=•0.•It•is•an•iterative•method•where•solution•is•found•by•the•expression
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/newton_raphson.py
|   6| ••••If•no•solution•exists,•then•either•the•solution•will•not•be•found•when•iteration
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/newton_raphson.py
|   7| ••••limit•is•reached•or•the•gradient•f'(x[n])•approaches•zero.•In•both•cases,•exception
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/newton_raphson.py
|  21| def•newton_raphson(f,•x0=0,•maxiter=100,•step=0.0001,•maxerror=1e-6,•logsteps=False):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/newton_raphson.py
|  26| ••••f1•=•lambda•x:•calc_derivative(f,•x,•h=step)••#•noqa:•E731••Derivative•of•f(x)
|    | [NORMAL] PycodestyleBear (E731):
|    | E731 do not assign a lambda expression, use a def'

maths/newton_raphson.py
|  36| ••••••••raise•ValueError("Iteration•limit•reached,•no•converging•solution•found")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/newton_raphson.py
|  46| ••••f•=•lambda•x:•m.tanh(x)•**•2•-•m.exp(3•*•x)••#•noqa:•E731
|    | [NORMAL] PycodestyleBear (E731):
|    | E731 do not assign a lambda expression, use a def'

maths/monte_carlo_dice.py
|  40| ••••probability•=•[round((count•*•100)•/•num_throws,•2)•for•count•in•count_of_sum]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/monte_carlo_dice.py
|  41| ••••return•probability[num_dice:]••#•remove•probability•of•sums•that•never•appear
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/hashing/hash_table_with_linked_list.py
|  11| ••••••••self.values[key]•=•deque([])•if•self.values[key]•is•None•else•self.values[key]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

data_structures/hashing/hash_table_with_linked_list.py
|  24| ••••••••••••len(self.values[key])•==•self.charge_factor•and•self.values.count(None)•==•0
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

project_euler/problem_012/sol2.py
|  53| ••••return•next(i•for•i•in•triangle_number_generator()•if•count_divisors(i)•>•500)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

matrix/inverse_of_matrix.py
|  32| ••••determinant•=•D(matrix[0][0])•*•D(matrix[1][1])•-•D(matrix[1][0])•*•D(matrix[0][1])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

matrix/inverse_of_matrix.py
|  40| ••••return•[[float(D(n)•/•determinant)•or•0.0•for•n•in•row]•for•row•in•swapped_matrix]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/frequent_pattern_graph_miner.py
|  13| ••••['ab-e1',•'ac-e3',•'ad-e5',•'bc-e4',•'bd-e2',•'be-e6',•'bh-e12',•'cd-e2',•'ce-e4',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/frequent_pattern_graph_miner.py
|  14| •••••'de-e1',•'df-e8',•'dg-e5',•'dh-e10',•'ef-e3',•'eg-e2',•'fg-e6',•'gh-e6',•'hi-e3'],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/frequent_pattern_graph_miner.py
|  15| ••••['ab-e1',•'ac-e3',•'ad-e5',•'bc-e4',•'bd-e2',•'be-e6',•'cd-e2',•'de-e1',•'df-e8',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/frequent_pattern_graph_miner.py
|  17| ••••['ab-e1',•'ac-e3',•'bc-e4',•'bd-e2',•'de-e1',•'df-e8',•'dg-e5',•'ef-e3',•'eg-e2',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/frequent_pattern_graph_miner.py
|  20| ••••['ab-e1',•'ac-e3',•'ad-e5',•'bc-e4',•'bd-e2',•'cd-e2',•'ce-e4',•'de-e1',•'df-e8',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/frequent_pattern_graph_miner.py
|  68| ••••••••for•k,•v•in•sorted(frequency_table.items(),•key=lambda•v:•v[1][0],•reverse=True)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

graphs/frequent_pattern_graph_miner.py
| 104| ••••...••••••••••••••2:•{'10010':•['dh',•'bh'],•'11000':•['be'],•'10100':•['gh'],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphs/frequent_pattern_graph_miner.py
| 211| ••••>>>•preprocess([['ab-e1',•'ac-e3',•'ad-e5',•'bc-e4',•'bd-e2',•'be-e6',•'bh-e12',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/frequent_pattern_graph_miner.py
| 212| ••••...••••••••••••••'cd-e2',•'ce-e4',•'de-e1',•'df-e8',•'dg-e5',•'dh-e10',•'ef-e3',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/frequent_pattern_graph_miner.py
| 230| ••••paths:•list•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_119/sol1.py
|   9| this•sequence•and•insist•that•a•number•must•contain•at•least•two•digits•to•have•a•sum.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

data_structures/binary_tree/treap.py
|  15| ••••••••self.left:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/treap.py
|  16| ••••••••self.right:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/treap.py
|  25| ••••••••••••••••{f"{self.value}:•{self.prior:.5}":•(self.left,•self.right)},•indent=1
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_030/sol1.py
|   3| Surprisingly•there•are•only•three•numbers•that•can•be•written•as•the•sum•of•fourth
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_030/sol1.py
|  13| Find•the•sum•of•all•the•numbers•that•can•be•written•as•the•sum•of•fifth•powers•of•their
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_030/sol1.py
|  19| and•also•59049•*•3•=•177147•(which•exceeds•the•criteria•of•number•being•3•digit)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

scripts/build_directory_md.py
|   9| ••••••••dir_names[:]•=•[d•for•d•in•dir_names•if•d•!=•"scripts"•and•d[0]•not•in•"._"]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_074/sol2.py
|   4| The•number•145•is•well•known•for•the•property•that•the•sum•of•the•factorial•of•its
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_074/sol2.py
|   9| Perhaps•less•well•known•is•169,•in•that•it•produces•the•longest•chain•of•numbers•that
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_074/sol2.py
|  16| It•is•not•difficult•to•prove•that•EVERY•starting•number•will•eventually•get•stuck•in•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_074/sol2.py
|  26| How•many•chains,•with•a•starting•number•below•one•million,•contain•exactly•sixty
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_074/sol2.py
|  30| This•solution•simply•consists•in•a•loop•that•generates•the•chains•of•non•repeating
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_074/sol2.py
|  32| The•generation•of•the•chain•stops•before•a•repeating•item•or•if•the•size•of•the•chain
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_074/sol2.py
|  38| DIGIT_FACTORIAL:•dict[str,•int]•=•{str(digit):•factorial(digit)•for•digit•in•range(10)}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_074/sol2.py
|  38| DIGIT_FACTORIAL:•dict[str,•int]•=•{str(digit):•factorial(digit)•for•digit•in•range(10)}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_074/sol2.py
|  67| ••••#•Converts•number•in•string•to•iterate•on•its•digits•and•adds•its•factorial.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_074/sol2.py
|  73| ••••Returns•the•number•of•numbers•below•number_limit•that•produce•chains•with•exactly
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_074/sol2.py
| 111| ••••chain_sets_lengths:•dict[int,•int]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_074/sol2.py
| 119| ••••••••#•Stop•computing•the•chain•when•you•find•a•cached•size,•a•repeating•item•or•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/chudnovsky_algorithm.py
|  15| ••••The•linear_term•and•the•exponential_term•can•be•defined•iteratively•as•follows:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

maths/chudnovsky_algorithm.py
|  51| ••••••••multinomial_term•=•factorial(6•*•k)•//•(factorial(3•*•k)•*•factorial(k)•**•3)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/chudnovsky_algorithm.py
|  54| ••••••••partial_sum•+=•Decimal(multinomial_term•*•linear_term)•/•exponential_term
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphs/basic_graphs.py
|  11| ••••graph:•dict[int,•list[int]]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/basic_graphs.py
|  24| ••••graph:•dict[int,•list[int]]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/basic_graphs.py
|  38| ••••graph:•dict[int,•list[tuple[int,•int]]]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/basic_graphs.py
|  43| ••••••••x,•y,•w•=•(int(i)•for•i•in•_input(f"Edge•{e•+•1}:•<node1>•<node2>•<weight>•"))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/basic_graphs.py
| 123| ••••••••Vars•:••dist•-•Dictionary•storing•shortest•distance•from•s•to•every•other•node
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/basic_graphs.py
| 201| ••••••••Vars•:••dist•-•Dictionary•storing•shortest•distance•from•s•to•every•other•node
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/basic_graphs.py
| 227| ••••••••Vars•:••dist•-•Dictionary•storing•shortest•distance•from•s•to•nearest•node
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

data_structures/stacks/stock_span_problem.py
|   3| price•quotes•for•a•stock•and•we•need•to•calculate•span•of•stock's•price•for•all•n•days.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/stacks/stock_span_problem.py
|   6| number•of•consecutive•days•just•before•the•given•day,•for•which•the•price•of•the•stock
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/find_max_recursion.py
|  50| ••••right_max•=•find_max(nums,•mid•+•1,•right)••#•find•max•in•range[mid•+•1,•right]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

data_structures/binary_tree/avl_tree.py
|  17| ••••••••self.data:•list[Any]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/avl_tree.py
|  18| ••••••••self.head:•int•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/avl_tree.py
|  19| ••••••••self.tail:•int•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/avl_tree.py
|  39| ••••••••print(self.data[self.head•:•self.tail])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

data_structures/binary_tree/avl_tree.py
|  45| ••••••••self.left:•my_node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/avl_tree.py
|  46| ••••••••self.right:•my_node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/avl_tree.py
|  47| ••••••••self.height:•int•=•1
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/avl_tree.py
| 229| ••••••••if•get_height(right_child.get_right())•>•get_height(right_child.get_left()):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/binary_tree/avl_tree.py
| 235| ••••••••if•get_height(left_child.get_left())•>•get_height(left_child.get_right()):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

data_structures/binary_tree/avl_tree.py
| 239| ••••height•=•my_max(get_height(root.get_right()),•get_height(root.get_left()))•+•1
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

data_structures/binary_tree/avl_tree.py
| 279| ••••••••self.root:•my_node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

strings/min_cost_string_conversion.py
|   2| Algorithm•for•calculating•the•most•cost-efficient•sequence•for•converting•one•string
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

strings/min_cost_string_conversion.py
|  26| ••••••••[0•for•_•in•range(len_destination_seq•+•1)]•for•_•in•range(len_source_seq•+•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

strings/min_cost_string_conversion.py
|  29| ••••••••["0"•for•_•in•range(len_destination_seq•+•1)]•for•_•in•range(len_source_seq•+•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

strings/min_cost_string_conversion.py
|  47| ••••••••••••••••ops[i][j]•=•f"R{source_seq[i•-•1]:c}"•+•str(destination_seq[j•-•1])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

strings/min_cost_string_conversion.py
|  79| ••••_,•operations•=•compute_transform_tables("Python",•"Algorithms",•-1,•1,•2,•2)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

strings/min_cost_string_conversion.py
| 102| ••••••••••••••••file.write("%-16s"•%•("Replace•%c"•%•op[1]•+•"•with•"•+•str(op[2])))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/bailey_borwein_plouffe.py
|   7| ••••@param•digit_position:•a•positive•integer•representing•the•position•of•the•digit•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/bailey_borwein_plouffe.py
|  45| ••••#•compute•an•approximation•of•(16•**•(n•-•1))•*•pi•whose•fractional•part•is•mostly
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/bailey_borwein_plouffe.py
|  74| ••••••••••••#•if•the•exponential•term•is•an•integer•and•we•mod•it•by•the•denominator
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/median_of_two_arrays.py
|  31| ••••array_1•=•[float(x)•for•x•in•input("Enter•the•elements•of•first•array:•").split()]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/median_of_two_arrays.py
|  32| ••••array_2•=•[float(x)•for•x•in•input("Enter•the•elements•of•second•array:•").split()]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/median_of_two_arrays.py
|  33| ••••print(f"The•median•of•two•arrays•is:•{median_of_two_arrays(array_1,•array_2)}")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

machine_learning/gradient_boosting_regressor.py
|  57| ••••ax.plot([y_test.min(),•y_test.max()],•[y_test.min(),•y_test.max()],•"k--",•lw=4)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

blockchain/modular_division.py
|  11| ••••Given•three•integers•a,•b,•and•n,•such•that•gcd(a,n)=1•and•n>1,•the•algorithm•should
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

blockchain/modular_division.py
|  12| ••••return•an•integer•x•such•that•0≤x≤n−1,•and••b/a=x(modn)•(that•is,•b=ax(modn)).
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

blockchain/modular_division.py
|  54| #•------------------•Finding•Modular•division•using•invert_modulo•-------------------
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

blockchain/modular_division.py
|  78| ••••Extended•Euclid's•Algorithm•:•If•d•divides•a•and•b•and•d•=•a*x•+•b*y•for•integers•x
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

blockchain/modular_division.py
| 129| ••••Note•:•In•number•theory,•two•integers•a•and•b•are•said•to•be•relatively•prime,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

blockchain/modular_division.py
| 130| ••••••••mutually•prime,•or•co-prime•if•the•only•positive•integer•(factor)•that•divides
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_107/sol1.py
|  16| However,•it•is•possible•to•optimise•the•network•by•removing•some•edges•and•still
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_107/sol1.py
|  17| ensure•that•all•points•on•the•network•remain•connected.•The•network•which•achieves
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_107/sol1.py
|  18| the•maximum•saving•is•shown•below.•It•has•a•weight•of•93,•representing•a•saving•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_107/sol1.py
|  22| containing•a•network•with•forty•vertices,•and•given•in•matrix•form,•find•the•maximum
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_107/sol1.py
|  23| saving•which•can•be•achieved•by•removing•redundant•edges•whilst•ensuring•that•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_107/sol1.py
|  44| ••••••••self.vertices:•set[int]•=•vertices
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
|  45| ••••••••self.edges:•dict[EdgeT,•int]•=•{
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
|  67| ••••••••>>>•graph•=•Graph({1,2,3,4},{(1,2):5,•(1,3):10,•(1,4):20,•(2,4):30,•(3,4):1})
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_107/sol1.py
|  74| ••••••••subgraph:•Graph•=•Graph({min(self.vertices)},•{})
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
|  75| ••••••••min_edge:•EdgeT
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
|  76| ••••••••min_weight:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
|  77| ••••••••edge:•EdgeT
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
|  78| ••••••••weight:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
|  83| ••••••••••••••••if•(edge[0]•in•subgraph.vertices)•^•(edge[1]•in•subgraph.vertices):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_107/sol1.py
| 100| ••••script_dir:•str•=•os.path.abspath(os.path.dirname(__file__))
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
| 101| ••••network_file:•str•=•os.path.join(script_dir,•filename)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
| 102| ••••adjacency_matrix:•list[list[str]]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
| 103| ••••edges:•dict[EdgeT,•int]•=•dict()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
| 104| ••••data:•list[str]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
| 105| ••••edge1:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
| 106| ••••edge2:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
| 118| ••••graph:•Graph•=•Graph(set(range(len(adjaceny_matrix))),•edges)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
| 120| ••••subgraph:•Graph•=•graph.prims_algorithm()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
| 122| ••••initial_total:•int•=•sum(graph.edges.values())
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_107/sol1.py
| 123| ••••optimal_total:•int•=•sum(subgraph.edges.values())
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

compression/huffman.py
|   8| ••••••••self.letter:•str•=•letter
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

compression/huffman.py
|   9| ••••••••self.freq:•int•=•freq
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

compression/huffman.py
|  10| ••••••••self.bitstring:•dict[str,•str]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

compression/huffman.py
|  17| ••••def•__init__(self,•freq:•int,•left:•Letter•|•TreeNode,•right:•Letter•|•TreeNode):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

compression/huffman.py
|  18| ••••••••self.freq:•int•=•freq
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

compression/huffman.py
|  19| ••••••••self.left:•Letter•|•TreeNode•=•left
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

compression/huffman.py
|  20| ••••••••self.right:•Letter•|•TreeNode•=•right
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

compression/huffman.py
|  28| ••••chars:•dict[str,•int]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

compression/huffman.py
|  35| ••••return•sorted((Letter(c,•f)•for•c,•f•in•chars.items()),•key=lambda•l:•l.freq)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

compression/huffman.py
|  43| ••••response:•list[Letter•|•TreeNode]•=•letters••#•type:•ignore
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

compression/huffman.py
|  62| ••••treenode:•TreeNode•=•root••#•type:•ignore
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

compression/huffman.py
|  78| ••••••••k:•v•for•letter•in•traverse_tree(root,•"")•for•k,•v•in•letter.bitstring.items()
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_081/sol1.py
|   3| In•the•5•by•5•matrix•below,•the•minimal•path•sum•from•the•top•left•to•the•bottom•right,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_081/sol1.py
|   4| by•only•moving•to•the•right•and•down,•is•indicated•in•bold•red•and•is•equal•to•2427.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_081/sol1.py
|  12| Find•the•minimal•path•sum•from•the•top•left•to•the•bottom•right•by•only•moving•right
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_081/sol1.py
|  13| and•down•in•matrix.txt•(https://projecteuler.net/project/resources/p081_matrix.txt),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_081/sol1.py
|  21| ••••Returns•the•minimal•path•sum•from•the•top•left•to•the•bottom•right•of•the•matrix.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_081/sol1.py
|  28| ••••grid•=•[[int(cell)•for•cell•in•row.split(",")]•for•row•in•data.strip().splitlines()]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

data_structures/binary_tree/segment_tree_other.py
| 178| ••••••••return•SegmentTreeNode(start,•end,•self.fn(left.val,•right.val),•left,•right)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

ciphers/rail_fence_cipher.py
|  23| ••••temp_grid:•list[list[str]]•=•[[]•for•_•in•range(key)]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

ciphers/rail_fence_cipher.py
|  66| ••••temp_grid:•list[list[str]]•=•[[]•for•_•in•range(key)]••#•generates•template
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

ciphers/rail_fence_cipher.py
|  74| ••••••••splice•=•input_string[counter•:•counter•+•len(row)]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

computer_vision/pooling_functions.py
|  10| ••••This•function•is•used•to•perform•maxpooling•on•the•input•array•of•2D•matrix(image)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

computer_vision/pooling_functions.py
|  47| ••••••••••••updated_arr[mat_i][mat_j]•=•np.max(arr[i•:•i•+•size,•j•:•j•+•size])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

computer_vision/pooling_functions.py
|  47| ••••••••••••updated_arr[mat_i][mat_j]•=•np.max(arr[i•:•i•+•size,•j•:•j•+•size])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

computer_vision/pooling_functions.py
|  66| ••••This•function•is•used•to•perform•avgpooling•on•the•input•array•of•2D•matrix(image)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

computer_vision/pooling_functions.py
| 103| ••••••••••••updated_arr[mat_i][mat_j]•=•int(np.average(arr[i•:•i•+•size,•j•:•j•+•size]))
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

computer_vision/pooling_functions.py
| 103| ••••••••••••updated_arr[mat_i][mat_j]•=•int(np.average(arr[i•:•i•+•size,•j•:•j•+•size]))
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

computer_vision/pooling_functions.py
| 103| ••••••••••••updated_arr[mat_i][mat_j]•=•int(np.average(arr[i•:•i•+•size,•j•:•j•+•size]))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

computer_vision/pooling_functions.py
| 132| ••••#•Converting•the•image•to•numpy•array•and•averagepooling,•displaying•the•result
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

dynamic_programming/minimum_partition.py
|   2| Partition•a•set•into•two•subsets•such•that•the•difference•of•subset•sums•is•minimum
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_063/sol1.py
|   2| The•5-digit•number,•16807=75,•is•also•a•fifth•power.•Similarly,•the•9-digit•number,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_063/sol1.py
|  29| ••••••••1•for•power•in•powers•for•base•in•bases•if•len(str(base**power))•==•power
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/decision_tree.py
|   3| Input•data•set:•The•input•data•set•must•be•1-dimensional•with•continuous•labels.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/decision_tree.py
|  23| ••••••••return•value:•mean_squared_error•calculates•the•error•if•prediction•is•used•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/decision_tree.py
|  80| ••••••••loop•over•all•possible•splits•for•the•decision•tree.•find•the•best•split.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/decision_tree.py
|  82| ••••••••then•the•data•set•is•not•split•and•the•average•for•the•entire•array•is•used•as
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/decision_tree.py
| 122| ••••••••the•prediction•function•works•by•recursively•calling•the•predict•function
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/decision_tree.py
| 146| ••••••••return•value:•helper_mean_squared_error_test•calculates•the•mean•squared•error
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/decision_tree.py
| 157| ••••In•this•demonstration•we're•generating•a•sample•data•set•from•the•sin•function•in
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/decision_tree.py
| 158| ••••numpy.••We•then•train•a•decision•tree•on•the•data•set•and•use•the•decision•tree•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/decision_tree.py
| 159| ••••predict•the•label•of•10•different•test•values.•Then•the•mean•squared•error•over
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

searches/jump_search.py
|  22| ••••>>>•jump_search([0,•1,•1,•2,•3,•5,•8,•13,•21,•34,•55,•89,•144,•233,•377,•610],•55)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_045/sol1.py
|   4| Triangle,•pentagonal,•and•hexagonal•numbers•are•generated•by•the•following•formulae:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

backtracking/all_subsequences.py
|  37| ••••seq:•list[Any]•=•[3,•1,•2,•4]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

strings/is_palindrome.py
|  17| ••••#•Since•Punctuation,•capitalization,•and•spaces•are•usually•ignored•while•checking
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

strings/is_palindrome.py
|  24| ••••s•=•input("Enter•string•to•determine•whether•its•palindrome•or•not:•").strip()
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/euler_modified.py
|  11| ••••The•Euler•Method•is•straightforward•to•implement,•but•can't•give•accurate•solutions.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/euler_modified.py
|  44| ••••••••••••(step_size•/•2)•*•(ode_func(x,•y[k])•+•ode_func(x•+•step_size,•y_get))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

computer_vision/harris_corner.py
|  38| ••••••••corner_list:•list[list[int]]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

computer_vision/harris_corner.py
|  50| ••••••••••••••••••••y•-•offset•:•y•+•offset•+•1,•x•-•offset•:•x•+•offset•+•1
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

computer_vision/harris_corner.py
|  50| ••••••••••••••••••••y•-•offset•:•y•+•offset•+•1,•x•-•offset•:•x•+•offset•+•1
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

computer_vision/harris_corner.py
|  53| ••••••••••••••••••••y•-•offset•:•y•+•offset•+•1,•x•-•offset•:•x•+•offset•+•1
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

computer_vision/harris_corner.py
|  53| ••••••••••••••••••••y•-•offset•:•y•+•offset•+•1,•x•-•offset•:•x•+•offset•+•1
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

computer_vision/harris_corner.py
|  56| ••••••••••••••••••••y•-•offset•:•y•+•offset•+•1,•x•-•offset•:•x•+•offset•+•1
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

computer_vision/harris_corner.py
|  56| ••••••••••••••••••••y•-•offset•:•y•+•offset•+•1,•x•-•offset•:•x•+•offset•+•1
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

dynamic_programming/longest_increasing_subsequence_o(nlogn).py
|   4| #•comments:•This•programme•outputs•the•Longest•Strictly•Increasing•Subsequence•in
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

dynamic_programming/longest_increasing_subsequence_o(nlogn).py
|  16| ••••••••••••l•=•m••#•noqa:•E741
|    | [NORMAL] PycodestyleBear (E741):
|    | E741 ambiguous variable name 'l''

dynamic_programming/longest_increasing_subsequence_o(nlogn).py
|  26| ••••>>>•LongestIncreasingSubsequenceLength([0,•8,•4,•12,•2,•10,•6,•14,•1,•9,•5,•13,•3,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/page_rank.py
|  30| ••••••••return•f"Node•{self.name}:•Inbound:•{self.inbound}•;•Outbound:•{self.outbound}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

other/nested_brackets.py
|   3| brackets•are•properly•nested.••A•sequence•of•brackets•s•is•considered•properly•nested
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

other/nested_brackets.py
|  12| The•function•called•is_balanced•takes•as•input•a•string•S•which•is•a•sequence•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

web_programming/crawl_google_results.py
|  13| ••••with•open("project1a.html",•"wb")•as•out_file:••#•only•for•knowing•the•class
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/gale_shapley_bigraph.py
|   8| ••••Finds•the•stable•match•in•any•bipartite•graph,•i.e•a•pairing•where•no•2•objects
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

graphs/gale_shapley_bigraph.py
|   9| ••••prefer•each•other•over•their•partner.••The•function•accepts•the•preferences•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/gale_shapley_bigraph.py
|  10| ••••oegan•donors•and•recipients•(where•both•are•assigned•numbers•from•0•to•n-1)•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

graphs/gale_shapley_bigraph.py
|  11| ••••returns•a•list•where•the•index•position•corresponds•to•the•donor•and•value•at•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/gale_shapley_bigraph.py
|  19| ••••>>>•recipient_pref•=•[[3,•1,•2,•0],•[3,•1,•0,•2],•[0,•3,•1,•2],•[1,•0,•3,•2]]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/linked_list/skip_list.py
|   2| Based•on•"Skip•Lists:•A•Probabilistic•Alternative•to•Balanced•Trees"•by•William•Pugh
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/linked_list/skip_list.py
|  18| ••••••••self.forward:•list[Node[KT,•VT]]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/linked_list/skip_list.py
|  52| ••••••••self.head:•Node[KT,•VT]•=•Node[KT,•VT]()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/linked_list/skip_list.py
|  91| ••••••••lines.append(f"[{node.key}]".ljust(label_size,•"-")•+•"*•"•*•len(forwards))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

data_structures/linked_list/skip_list.py
|  99| ••••••••••••••••+•"•".join(str(n.key)•if•n.key•==•node.key•else•"|"•for•n•in•forwards)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

data_structures/linked_list/skip_list.py
| 126| ••••def•_locate_node(self,•key)•->•tuple[Node[KT,•VT]•|•None,•list[Node[KT,•VT]]]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

data_structures/linked_list/skip_list.py
| 130| •••••••••••••••••and•list•of•nodes•that•refer•(if•key•is•present)•of•should•refer•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/linked_list/skip_list.py
| 140| ••••••••••••#•i•<•node.level•-•When•node•level•is•lesser•than•`i`•decrement•`i`.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

data_structures/linked_list/skip_list.py
| 146| ••••••••••••#•Each•leftmost•node•(relative•to•searched•node)•will•potentially•have•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/linked_list/skip_list.py
| 150| ••••••••update_vector.reverse()••#•Note•that•we•were•inserting•values•in•reverse•order.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/linked_list/skip_list.py
| 154| ••••••••#•node.forward[0].key•==•key•-•Next•node•key•should•be•equal•to•search•key
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

data_structures/linked_list/skip_list.py
| 227| ••••••••:return:•Value•associated•with•given•key•or•None•if•given•key•is•not•present.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

divide_and_conquer/max_difference_pair.py
|  19| ••••••••second•=•a[len(a)•//•2•:]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

divide_and_conquer/max_difference_pair.py
|  33| ••••••••if•big2•-•small2•>•max_second•-•min_first•and•big2•-•small2•>•big1•-•small1:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/aliquot_sum.py
|  41| ••••••••divisor•for•divisor•in•range(1,•input_num•//•2•+•1)•if•input_num•%•divisor•==•0
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

sorts/quick_sort.py
|  30| ••••greater:•list[int]•=•[]••#•All•elements•greater•than•pivot
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

sorts/quick_sort.py
|  31| ••••lesser:•list[int]•=•[]••#•All•elements•less•than•or•equal•to•pivot
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/heap/heap_generic.py
|  14| ••••••••#•Stores•function•used•to•evaluate•the•score•of•an•item•on•which•basis•ordering
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/heap/heap_generic.py
|  48| ••••••••Returns•index•of•valid•parent•as•per•desired•ordering•among•given•index•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

data_structures/heap/heap_generic.py
|  74| ••••••••••••index,•valid_parent•=•valid_parent,•self._get_valid_parent(valid_parent)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/heap/heap_generic.py
|  96| ••••••••#•Make•sure•heap•is•right•in•both•up•and•down•direction.•Ideally•only•one
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/heap/heap_generic.py
| 114| ••••••••"""Returns•top•item•tuple•(Calculated•value,•item)•from•heap•if•present"""
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

data_structures/heap/heap_generic.py
| 119| ••••••••Return•top•item•tuple•(Calculated•value,•item)•from•heap•and•removes•it•as•well
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

web_programming/world_covid19_stats.py
|  12| def•world_covid19_stats(url:•str•=•"https://www.worldometers.info/coronavirus")•->•dict:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

web_programming/world_covid19_stats.py
|  21| ••••return•{key.text.strip():•value.text.strip()•for•key,•value•in•zip(keys,•values)}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

ciphers/caesar_cipher.py
|  29| ••••secret•military•messages•to•his•troops.•This•is•a•simple•substitution•cipher
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/caesar_cipher.py
|  43| ••••since•"J"•is•two•letters•away,•and•so•on.•If•the•shift•is•ever•two•large,•or
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/caesar_cipher.py
| 106| ••••secret•military•messages•to•his•troops.•This•is•a•simple•substitution•cipher
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/caesar_cipher.py
| 149| def•brute_force(input_string:•str,•alphabet:•str•|•None•=•None)•->•dict[int,•str]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

ciphers/caesar_cipher.py
| 153| ••••Returns•all•the•possible•combinations•of•keys•and•the•decoded•strings•in•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/caesar_cipher.py
| 170| ••••complex•the•cipher,•the•larger•amount•of•time•it•will•take•to•do•brute•force
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/caesar_cipher.py
| 173| ••••Say•we•have•a•5•letter•alphabet•(abcde),•for•simplicity•and•we•intercepted•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

fractals/koch_snowflake.py
|  12| ••••••••3.•remove•the•line•segment•that•is•the•base•of•the•triangle•from•step•2.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

fractals/koch_snowflake.py
|  39| def•iterate(initial_vectors:•list[numpy.ndarray],•steps:•int)•->•list[numpy.ndarray]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

fractals/koch_snowflake.py
|  57| ••••vectors•is•divided•into•4•segments•by•adding•3•additional•vectors•in-between
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

fractals/koch_snowflake.py
|  71| ••••••••••••start_vector•+•difference_vector•/•3•+•rotate(difference_vector•/•3,•60)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

fractals/koch_snowflake.py
| 102| ••••#•matplotlib.pyplot.plot•takes•a•list•of•all•x-coordinates•and•a•list•of•all
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

dynamic_programming/all_construct.py
|   8| def•all_construct(target:•str,•word_bank:•list[str]•|•None•=•None)•->•list[list[str]]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

dynamic_programming/all_construct.py
|  21| ••••table_size:•int•=•len(target)•+•1
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

dynamic_programming/all_construct.py
|  23| ••••table:•list[list[list[str]]]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

dynamic_programming/all_construct.py
|  35| ••••••••••••••••if•target[i•:•i•+•len(word)]•==•word:
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

dynamic_programming/all_construct.py
|  36| ••••••••••••••••••••new_combinations:•list[list[str]]•=•[
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

dynamic_programming/all_construct.py
|  39| ••••••••••••••••••••#•adds•the•word•to•every•combination•the•current•position•holds
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

dynamic_programming/all_construct.py
|  52| ••••print(all_construct("rajamati",•["s",•"raj",•"amat",•"raja",•"ma",•"i",•"t"]))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

dynamic_programming/all_construct.py
|  56| ••••••••••••["h",•"ex",•"hex",•"ag",•"ago",•"ru",•"auru",•"rus",•"go",•"no",•"o",•"s"],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_587/sol1.py
|  10| It•should•be•clear•that•the•concave•triangle•occupies•exactly•half•of•the•L-section.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_587/sol1.py
|  14| a•line•is•drawn•from•the•bottom•left•to•the•top•right•as•shown•in•the•diagram•below.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_587/sol1.py
|  22| for•which•the•concave•triangle•occupies•less•than•10%•of•the•L-section•is•n•=•15.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_587/sol1.py
|  34| ••••Returns•integral•of•circle•bottom•arc•y•=•1•/•2•-•sqrt(1•/•4•-•(x•-•1•/•2)•^•2)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_587/sol1.py
|  47| ••••••••(1•-•2•*•point)•*•sqrt(point•-•point**2)•+•2•*•point•+•asin(sqrt(1•-•point))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

bit_manipulation/count_1s_brian_kernighan_method.py
|   3| ••••Count•the•number•of•set•bits•in•a•32•bit•integer•using•Brian•Kernighan's•way.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

bit_manipulation/count_1s_brian_kernighan_method.py
|   4| ••••Ref•-•http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

scheduling/round_robin.py
|  13| ••••Calculate•the•waiting•times•of•a•list•of•processes•that•have•a•specified•duration.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

scheduling/round_robin.py
|  52| ••••return•[burst•+•waiting•for•burst,•waiting•in•zip(burst_times,•waiting_times)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

sorts/pigeonhole_sort.py
|  19| ••••size•=•max_val•-•min_val•+•1••#•size•is•difference•of•max•and•min•values•plus•one
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/boruvka.py
|   3| ••••Determines•the•minimum•spanning•tree•(MST)•of•a•graph•using•the•Borůvka's•algorithm.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

graphs/boruvka.py
|   4| ••••Borůvka's•algorithm•is•a•greedy•algorithm•for•finding•a•minimum•spanning•tree•in•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/boruvka.py
|   5| ••••connected•graph,•or•a•minimum•spanning•forest•if•a•graph•that•is•not•connected.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

graphs/boruvka.py
|   7| ••••The•time•complexity•of•this•algorithm•is•O(ELogV),•where•E•represents•the•number
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/boruvka.py
|  11| ••••The•space•complexity•of•this•algorithm•is•O(V•+•E),•since•we•have•to•keep•a•couple
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/boruvka.py
|  12| ••••of•lists•whose•sizes•are•equal•to•the•number•of•nodes,•as•well•as•keep•all•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/boruvka.py
|  15| ••••Borůvka's•algorithm•gives•us•pretty•much•the•same•result•as•other•MST•Algorithms•-
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/boruvka.py
|  16| ••••they•all•find•the•minimum•spanning•tree,•and•the•time•complexity•is•approximately
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/boruvka.py
|  19| ••••One•advantage•that•Borůvka's•algorithm•has•compared•to•the•alternatives•is•that•it
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/boruvka.py
|  20| ••••doesn't•need•to•presort•the•edges•or•maintain•a•priority•queue•in•order•to•find•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/boruvka.py
|  22| ••••Even•though•that•doesn't•help•its•complexity,•since•it•still•passes•the•edges•logE
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/boruvka.py
|  40| ••••••••••••m_component•-•the•dictionary•which•stores•the•index•of•the•component•which
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/boruvka.py
|  45| ••••••••self.m_edges:•list[list[int]]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/boruvka.py
|  46| ••••••••self.m_component:•dict[int,•int]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/boruvka.py
|  67| ••••def•union(self,•component_size:•list[int],•u_node:•int,•v_node:•int)•->•None:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphs/boruvka.py
|  69| ••••••••in•terms•of•size,•and•attaches•the•smaller•one•to•the•larger•one•to•form
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/boruvka.py
|  89| ••••••••minimum_weight_edge:•list[Any]•=•[-1]•*•self.m_num_of_nodes
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/boruvka.py
| 137| ••••••••print(f"The•total•weight•of•the•minimal•spanning•tree•is:•{mst_weight}")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

conversions/temperature_conversions.py
|   6| ••••Convert•a•given•value•from•Celsius•to•Fahrenheit•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

conversions/temperature_conversions.py
|  34| ••••Convert•a•given•value•from•Celsius•to•Kelvin•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

conversions/temperature_conversions.py
|  58| ••••Convert•a•given•value•from•Celsius•to•Rankine•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

conversions/temperature_conversions.py
|  82| ••••Convert•a•given•value•from•Fahrenheit•to•Celsius•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

conversions/temperature_conversions.py
| 112| ••••Convert•a•given•value•from•Fahrenheit•to•Kelvin•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

conversions/temperature_conversions.py
| 142| ••••Convert•a•given•value•from•Fahrenheit•to•Rankine•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

conversions/temperature_conversions.py
| 172| ••••Convert•a•given•value•from•Kelvin•to•Celsius•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

conversions/temperature_conversions.py
| 196| ••••Convert•a•given•value•from•Kelvin•to•Fahrenheit•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

conversions/temperature_conversions.py
| 220| ••••Convert•a•given•value•from•Kelvin•to•Rankine•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

conversions/temperature_conversions.py
| 244| ••••Convert•a•given•value•from•Rankine•to•Celsius•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

conversions/temperature_conversions.py
| 268| ••••Convert•a•given•value•from•Rankine•to•Fahrenheit•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

conversions/temperature_conversions.py
| 288| ••••Convert•a•given•value•from•Rankine•to•Kelvin•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

conversions/temperature_conversions.py
| 308| ••••Convert•a•given•value•from•reaumur•to•Kelvin•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

conversions/temperature_conversions.py
| 327| ••••Convert•a•given•value•from•reaumur•to•fahrenheit•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

conversions/temperature_conversions.py
| 346| ••••Convert•a•given•value•from•reaumur•to•celsius•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

conversions/temperature_conversions.py
| 365| ••••Convert•a•given•value•from•reaumur•to•rankine•and•round•it•to•2•decimal•places.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_037/sol1.py
|   3| to•continuously•remove•digits•from•left•to•right,•and•remain•prime•at•each•stage:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_037/sol1.py
|   4| 3797,•797,•97,•and•7.•Similarly•we•can•work•from•right•to•left:•3797,•379,•37,•and•3.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_037/sol1.py
|   6| Find•the•sum•of•the•only•eleven•primes•that•are•both•truncatable•from•left•to•right
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_037/sol1.py
|  79| ••••list_truncated_primes:•list[int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_011/sol2.py
|  38| ••••••••l•=•[]••#•noqa:•E741
|    | [NORMAL] PycodestyleBear (E741):
|    | E741 ambiguous variable name 'l''

project_euler/problem_011/sol2.py
|  61| ••••••••••••••••temp•=•l[i][j]•*•l[i•+•1][j•+•1]•*•l[i•+•2][j•+•2]•*•l[i•+•3][j•+•3]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_011/sol2.py
|  68| ••••••••••••••••temp•=•l[i][j]•*•l[i•+•1][j•-•1]•*•l[i•+•2][j•-•2]•*•l[i•+•3][j•-•3]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/stacks/postfix_evaluation.py
|  25| ••••Div•=•lambda•x,•y:•int(x•/•y)••#•noqa:•E731•integer•division•operation
|    | [NORMAL] PycodestyleBear (E731):
|    | E731 do not assign a lambda expression, use a def'

data_structures/stacks/postfix_evaluation.py
|  42| ••••••••••••print(x.rjust(8),•("push("•+•x•+•")").ljust(12),•",".join(Stack),•sep="•|•")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

data_structures/stacks/postfix_evaluation.py
|  46| ••••••••••••print("".rjust(8),•("pop("•+•B•+•")").ljust(12),•",".join(Stack),•sep="•|•")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

data_structures/stacks/postfix_evaluation.py
|  50| ••••••••••••print("".rjust(8),•("pop("•+•A•+•")").ljust(12),•",".join(Stack),•sep="•|•")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

data_structures/stacks/postfix_evaluation.py
|  67| ••••Postfix•=•input("\n\nEnter•a•Postfix•Equation•(space•separated)•=•").split("•")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

audio_filters/butterworth_filter.py
|   8| Code•based•on•https://webaudio.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

audio_filters/butterworth_filter.py
|   9| Alternatively•you•can•use•scipy.signal.butter,•which•should•yield•the•same•results.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

audio_filters/butterworth_filter.py
|  21| ••••[1.0922959556412573,•-1.9828897227476208,•0.9077040443587427,•0.004277569313094809,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

audio_filters/butterworth_filter.py
|  49| ••••[1.0922959556412573,•-1.9828897227476208,•0.9077040443587427,•0.9957224306869052,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

audio_filters/butterworth_filter.py
|  77| ••••[1.0922959556412573,•-1.9828897227476208,•0.9077040443587427,•0.06526309611002579,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

audio_filters/butterworth_filter.py
| 106| ••••[1.0922959556412573,•-1.9828897227476208,•0.9077040443587427,•0.9077040443587427,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

audio_filters/butterworth_filter.py
| 124| ••••frequency:•int,•samplerate:•int,•gain_db:•float,•q_factor:•float•=•1•/•sqrt(2)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

audio_filters/butterworth_filter.py
| 131| ••••[1.0653405327119334,•-1.9828897227476208,•0.9346594672880666,•1.1303715025601122,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

audio_filters/butterworth_filter.py
| 153| ••••frequency:•int,•samplerate:•int,•gain_db:•float,•q_factor:•float•=•1•/•sqrt(2)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

audio_filters/butterworth_filter.py
| 160| ••••[3.0409336710888786,•-5.608870992220748,•2.602157875636628,•3.139954022810743,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

audio_filters/butterworth_filter.py
| 187| ••••frequency:•int,•samplerate:•int,•gain_db:•float,•q_factor:•float•=•1•/•sqrt(2)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

audio_filters/butterworth_filter.py
| 194| ••••[2.2229172136088806,•-3.9587208137297303,•1.7841414181566304,•4.295432981120543,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_087/sol1.py
|   4| The•smallest•number•expressible•as•the•sum•of•a•prime•square,•prime•cube,•and•prime
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_087/sol1.py
|   5| fourth•power•is•28.•In•fact,•there•are•exactly•four•numbers•below•fifty•that•can•be
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_087/sol1.py
|  13| How•many•numbers•below•fifty•million•can•be•expressed•as•the•sum•of•a•prime•square,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_087/sol1.py
|  20| ••••Return•the•number•of•integers•less•than•limit•which•can•be•expressed•as•the•sum
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

maths/extended_euclidean_algorithm.py
|  61| ••••••••old_remainder,•remainder•=•remainder,•old_remainder•-•quotient•*•remainder
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

sorts/insertion_sort.py
|  31| ••••>>>•insertion_sort(['d',•'a',•'b',•'e',•'c'])•==•sorted(['d',•'a',•'b',•'e',•'c'])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

sorts/insertion_sort.py
|  38| ••••>>>•collection•=•random.choices(string.ascii_letters•+•string.digits,•k=100)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

dynamic_programming/longest_common_subsequence.py
|   2| LCS•Problem•Statement:•Given•two•sequences,•find•the•length•of•longest•subsequence
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

dynamic_programming/longest_common_subsequence.py
|   3| present•in•both•of•them.••A•subsequence•is•a•sequence•that•appears•in•the•same•relative
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

compression/lempel_ziv.py
|   2| ••••One•of•the•several•implementations•of•Lempel–Ziv–Welch•compression•algorithm
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

compression/lempel_ziv.py
|  76| ••••Adds•given•file's•length•in•front•(using•Elias••gamma•coding)•of•the•compressed
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

compression/lempel_ziv.py
|  88| ••••Writes•given•to_write•string•(should•only•consist•of•0's•and•1's)•as•bytes•in•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

compression/lempel_ziv.py
|  95| ••••••••••••••••to_write[i•:•i•+•byte_length]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

compression/lempel_ziv.py
| 115| ••••Reads•source•file,•compresses•it•and•writes•the•compressed•result•in•destination
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_015/sol1.py
|  27| ••••n•=•2•*•n••#•middle•entry•of•odd•rows•starting•at•row•3•is•the•solution•for•n•=•1,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

strings/anagrams.py
|  32| data:•str•=•Path(__file__).parent.joinpath("words.txt").read_text(encoding="utf-8")
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

strings/anagrams.py
|  32| data:•str•=•Path(__file__).parent.joinpath("words.txt").read_text(encoding="utf-8")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

strings/anagrams.py
|  40| ••••all_anagrams•=•{word:•anagram(word)•for•word•in•word_list•if•len(anagram(word))•>•1}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

arithmetic_analysis/bisection.py
|  22| ••••start:•float•=•a
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

arithmetic_analysis/bisection.py
|  23| ••••end:•float•=•b
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

arithmetic_analysis/bisection.py
|  34| ••••••••mid:•float•=•start•+•(end•-•start)•/•2.0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/stacks/dijkstras_two_stack_algorithm.py
|   5| Explanation:••https://medium.com/@haleesammar/implemented-in-js-dijkstras-2-stack-
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

data_structures/stacks/dijkstras_two_stack_algorithm.py
|  25| ••••••••for•use•as•an•operand•of•the•next•operator•popped•off•the•operator•stack.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/stacks/dijkstras_two_stack_algorithm.py
|  34| import•operator•as•op
|    | [NORMAL] PycodestyleBear (E402):
|    | E402 module level import not at top of file'

data_structures/stacks/dijkstras_two_stack_algorithm.py
|  36| from•.stack•import•Stack
|    | [NORMAL] PycodestyleBear (E402):
|    | E402 module level import not at top of file'

data_structures/stacks/dijkstras_two_stack_algorithm.py
|  54| ••••operand_stack:•Stack[int]•=•Stack()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/stacks/dijkstras_two_stack_algorithm.py
|  55| ••••operator_stack:•Stack[str]•=•Stack()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

scripts/validate_solutions.py
|  18| ••••PROBLEM_ANSWERS:•dict[str,•str]•=•json.load(file_handle)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

scripts/validate_solutions.py
|  23| ••••spec•=•importlib.util.spec_from_file_location(file_path.name,•str(file_path))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

scripts/validate_solutions.py
|  36| ••••••••••••if•file_path.suffix•!=•".py"•or•file_path.name.startswith(("_",•"test")):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

scripts/validate_solutions.py
|  74| ••••if•os.environ.get("CI")•and•os.environ.get("GITHUB_EVENT_NAME")•==•"pull_request":
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

scripts/validate_solutions.py
|  76| ••••••••if•filepaths•:=•added_solution_file_path():
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

scripts/validate_solutions.py
|  76| ••••••••if•filepaths•:=•added_solution_file_path():
|    | [NORMAL] PycodestyleBear (E231):
|    | E231 missing whitespace after ':''

scripts/validate_solutions.py
|  76| ••••••••if•filepaths•:=•added_solution_file_path():
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

scripts/validate_solutions.py
|  76| ••••••••if•filepaths•:=•added_solution_file_path():
|    | [NORMAL] PycodestyleBear (E225):
|    | E225 missing whitespace around operator'

scripts/validate_solutions.py
|  89| ••••problem_number:•str•=•solution_path.parent.name[8:].zfill(3)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

scripts/validate_solutions.py
|  90| ••••expected:•str•=•PROBLEM_ANSWERS[problem_number]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

scripts/validate_solutions.py
|  96| ••••),•f"Expected•solution•to•{problem_number}•to•have•hash•{expected},•got•{answer}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/queue/double_ended_queue.py
|  41| ••••••••Contains•a•value•and•a•pointer•to•the•next•node•as•well•as•to•the•previous•one.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/queue/double_ended_queue.py
|  44| ••••••••val:•Any•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/queue/double_ended_queue.py
|  45| ••••••••next:•Deque._Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/queue/double_ended_queue.py
|  46| ••••••••prev:•Deque._Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/queue/double_ended_queue.py
|  89| ••••••••self._front:•Any•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/queue/double_ended_queue.py
|  90| ••••••••self._back:•Any•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/queue/double_ended_queue.py
|  91| ••••••••self._len:•int•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/queue/double_ended_queue.py
| 269| ••••••••••••None••#•drop•the•last•node•-•python•will•deallocate•memory•automatically
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/queue/double_ended_queue.py
| 368| ••••••••>>>•(our_deque_1•==•our_deque_2)•==•(deque_collections_1•==•deque_collections_2)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

data_structures/queue/double_ended_queue.py
| 370| ••••••••>>>•(our_deque_1•==•our_deque_3)•==•(deque_collections_1•==•deque_collections_3)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/prime_numbers.py
|  23| ••••numbers:•Generator•=•(i•for•i•in•range(1,•(max•+•1)))
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/prime_numbers.py
|  50| ••••numbers:•Generator•=•(i•for•i•in•range(1,•(max•+•1)))
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/prime_numbers.py
|  79| ••••numbers:•Generator•=•(i•for•i•in•range(1,•(max•+•1),•2))
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/binomial_distribution.py
|   8| ••••Return•probability•of•k•successes•out•of•n•tries,•with•p•probability•for•one
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/word_frequency_functions.py
|  60| ••••tokenize_document•=•document_without_punctuation.split("•")••#•word•tokenization
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/word_frequency_functions.py
|  61| ••••return•len([word•for•word•in•tokenize_document•if•word.lower()•==•term.lower()])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/word_frequency_functions.py
|  68| ••••@params•:•term,•the•term•to•search•each•document•for,•and•corpus,•a•collection•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/word_frequency_functions.py
|  70| ••••@returns•:•the•number•of•documents•in•the•corpus•that•contain•the•term•you•are
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/word_frequency_functions.py
|  73| ••••>>>•document_frequency("first",•"This•is•the•first•document•in•the•corpus.\\nThIs\
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_054/test_poker_hand.py
| 160| @pytest.mark.parametrize("hand,•expected,•card_values",•TEST_FIVE_HIGH_STRAIGHT)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/prim.py
|   3| ••••Determines•the•minimum•spanning•tree(MST)•of•a•graph•using•the•Prim's•Algorithm.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

hashes/sdbm.py
|   2| ••••This•algorithm•was•created•for•sdbm•(a•public-domain•reimplementation•of•ndbm)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

hashes/sdbm.py
|   4| ••••It•was•found•to•do•well•in•scrambling•bits,•causing•better•distribution•of•the•keys
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

hashes/sdbm.py
|   6| ••••It•also•happens•to•be•a•good•general•hashing•function•with•good•distribution.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

hashes/sdbm.py
|  11| ••••What•is•included•below•is•the•faster•version•used•in•gawk.•[there•is•even•a•faster,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

hashes/sdbm.py
|  13| ••••The•magic•constant•65599•was•picked•out•of•thin•air•while•experimenting•with
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

hashes/sdbm.py
|  16| ••••This•is•one•of•the•algorithms•used•in•berkeley•db•(see•sleepycat)•and•elsewhere.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

hashes/sdbm.py
|  25| ••••iterates•over•each•character•in•the•given•string•and•applies•function•to•each•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/a_star.py
|  40| ••••••••else:••#•to•choose•the•least•costliest•action•so•as•to•move•closer•to•the•goal
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/a_star.py
|  51| ••••••••••••••••for•i•in•range(len(DIRECTIONS)):••#•to•try•out•different•valid•actions
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/a_star.py
|  54| ••••••••••••••••••••if•x2•>=•0•and•x2•<•len(grid)•and•y2•>=•0•and•y2•<•len(grid[0]):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/a_star.py
|  93| ••••heuristic•=•[[0•for•row•in•range(len(grid[0]))]•for•col•in•range(len(grid))]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

data_structures/hashing/number_theory/prime_numbers.py
|  55| ••••••••value•+=•1•if•not•("desc"•in•kwargs.keys()•and•kwargs["desc"]•is•True)•else•-1
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/hardy_ramanujanalgo.py
|  39| ••••print(f"The•number•of•distinct•prime•factors•is/are•{exactPrimeFactorCount(n)}")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

strings/palindrome.py
|  40| ••••>>>•all(is_palindrome_recursive(key)•is•value•for•key,•value•in•test_data.items())
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

strings/palindrome.py
|  55| ••••>>>•all(is_palindrome_slice(key)•is•value•for•key,•value•in•test_data.items())
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/minimum_spanning_tree_kruskal.py
|   1| def•kruskal(
|    | [NORMAL] PycodestyleBear (E302):
|    | E302 expected 2 blank lines, found 0'

arithmetic_analysis/intersection.py
|   5| def•intersection(function:•Callable[[float],•float],•x0:•float,•x1:•float)•->•float:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

arithmetic_analysis/intersection.py
|  30| ••••x_n:•float•=•x0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

arithmetic_analysis/intersection.py
|  31| ••••x_n1:•float•=•x1
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

arithmetic_analysis/intersection.py
|  34| ••••••••••••raise•ZeroDivisionError("float•division•by•zero,•could•not•find•root")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

arithmetic_analysis/intersection.py
|  35| ••••••••x_n2:•float•=•x_n1•-•(
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_038/sol1.py
|  10| By•concatenating•each•product•we•get•the•1•to•9•pandigital,•192384576.•We•will•call
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_038/sol1.py
|  13| The•same•can•be•achieved•by•starting•with•9•and•multiplying•by•1,•2,•3,•4,•and•5,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_038/sol1.py
|  59| ••••Return•the•largest•1•to•9•pandigital•9-digital•number•that•can•be•formed•as•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

genetic_algorithm/basic_string.py
|   2| Simple•multithreaded•algorithm•to•show•how•the•4•phases•of•a•genetic•algorithm•works
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

genetic_algorithm/basic_string.py
|  12| #•Maximum•size•of•the•population.••bigger•could•be•faster•but•is•more•memory•expensive
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

genetic_algorithm/basic_string.py
|  14| #•Number•of•elements•selected•in•every•generation•for•evolution•the•selection•takes
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

genetic_algorithm/basic_string.py
|  15| #•place•from•the•best•to•the•worst•of•that•generation•must•be•smaller•than•N_POPULATION
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

genetic_algorithm/basic_string.py
|  17| #•Probability•that•an•element•of•a•generation•can•mutate•changing•one•of•its•genes•this
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

genetic_algorithm/basic_string.py
|  24| def•basic(target:•str,•genes:•list[str],•debug:•bool•=•True)•->•tuple[int,•int,•str]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

genetic_algorithm/basic_string.py
|  26| ••••Verify•that•the•target•contains•no•genes•besides•the•ones•inside•genes•variable.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

genetic_algorithm/basic_string.py
|  52| ••••#•Verify•that•the•target•contains•no•genes•besides•the•ones•inside•genes•variable.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

genetic_algorithm/basic_string.py
|  56| ••••••••••••f"{not_in_genes_list}•is•not•in•genes•list,•evolution•cannot•converge"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

genetic_algorithm/basic_string.py
|  62| ••••••••population.append("".join([random.choice(genes)•for•i•in•range(len(target))]))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

genetic_algorithm/basic_string.py
|  73| ••••••••def•evaluate(item:•str,•main_target:•str•=•target)•->•tuple[str,•float]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

genetic_algorithm/basic_string.py
|  81| ••••••••••••••••[g•for•position,•g•in•enumerate(item)•if•g•==•main_target[position]]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

genetic_algorithm/basic_string.py
|  90| ••••••••#•••••••••••••••••••••••••••••••••••max_workers=NUM_WORKERS)•as•executor:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

genetic_algorithm/basic_string.py
|  91| ••••••••#•••••futures•=•{executor.submit(evaluate,•item)•for•item•in•population}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

genetic_algorithm/basic_string.py
| 100| ••••••••population_score•=•sorted(population_score,•key=lambda•x:•x[1],•reverse=True)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

genetic_algorithm/basic_string.py
| 147| ••••••••••••"""Mutate•a•random•gene•of•a•child•with•another•one•from•the•list"""
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

genetic_algorithm/basic_string.py
| 150| ••••••••••••••••child_list[random.randint(0,•len(child))•-•1]•=•random.choice(genes)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

genetic_algorithm/basic_string.py
| 156| ••••••••••••#•Check•if•the•population•has•already•reached•the•maximum•value•and•if•so,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

genetic_algorithm/basic_string.py
| 157| ••••••••••••#•break•the•cycle.••if•this•check•is•disabled•the•algorithm•will•take
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

genetic_algorithm/basic_string.py
| 158| ••••••••••••#•forever•to•compute•large•strings•but•will•also•calculate•small•string•in
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

genetic_algorithm/basic_string.py
| 166| ••••••••"This•is•a•genetic•algorithm•to•evaluate,•combine,•evolve,•and•mutate•a•string!"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

graphs/bidirectional_a_star.py
|  98| ••••••••self.closed_nodes:•list[Node]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/bidirectional_a_star.py
| 122| ••••••••••••••••••••better_node•=•self.open_nodes.pop(self.open_nodes.index(child_node))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

graphs/bidirectional_a_star.py
| 139| ••••••••••••if•not•(0•<=•pos_x•<=•len(grid[0])•-•1•and•0•<=•pos_y•<=•len(grid)•-•1):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/bidirectional_a_star.py
| 172| ••••>>>•bd_astar•=•BidirectionalAStar((0,•0),•(len(grid)•-•1,•len(grid[0])•-•1))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/bidirectional_a_star.py
| 207| ••••••••••••••••self.fwd_astar:•self.fwd_astar.get_successors(current_fwd_node),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/bidirectional_a_star.py
| 208| ••••••••••••••••self.bwd_astar:•self.bwd_astar.get_successors(current_bwd_node),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

other/alternative_list_arrange.py
|   1| def•alternative_list_arrange(first_input_list:•list,•second_input_list:•list)•->•list:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

other/alternative_list_arrange.py
|   3| ••••The•method•arranges•two•lists•as•one•list•in•alternative•forms•of•the•list•elements.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

other/alternative_list_arrange.py
|  16| ••••first_input_list_length:•int•=•len(first_input_list)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/alternative_list_arrange.py
|  17| ••••second_input_list_length:•int•=•len(second_input_list)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/alternative_list_arrange.py
|  18| ••••abs_length:•int•=•(
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/alternative_list_arrange.py
|  23| ••••output_result_list:•list•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

machine_learning/similarity_search.py
|  40| ••••:param•value_array:•vector/vectors•we•want•to•know•the•nearest•vector•from•dataset.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/similarity_search.py
|  91| ••••>>>•similarity_search(dataset,•value_array)••#•doctest:•+NORMALIZE_WHITESPACE
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/similarity_search.py
| 116| ••••••••••••f"Input•data•have•different•datatype...•dataset•:•{dataset.dtype},•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

strings/wildcard_pattern_matching.py
|  21| ••••'.'•for•single•character•matches•and•'*'•for•zero•or•more•of•preceding•character
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

strings/wildcard_pattern_matching.py
|  69| ••••#•since•pattern•of•zero•length•will•never•match•with•string•of•non-zero•length
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

strings/wildcard_pattern_matching.py
| 112| ••••••••print(f"{input_string}•does•not•match•with•the•given•pattern•{pattern}")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_071/sol1.py
|  22| def•solution(numerator:•int•=•3,•denominator:•int•=•7,•limit:•int•=•1000000)•->•int:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_071/sol1.py
|  41| ••••••••if•current_numerator•*•max_denominator•>•current_denominator•*•max_numerator:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/sin.py
|   4| It's•not•a•perfect•function•so•I•am•rounding•the•result•to•10•decimal•places•by•default.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

scheduling/highest_response_ratio_next.py
|   3| It•was•developed•as•modification•of•shortest•job•next•or•shortest•job•first•(SJN•or•SJF)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

scheduling/highest_response_ratio_next.py
|  13| ••••process_name:•list,•arrival_time:•list,•burst_time:•list,•no_of_process:•int
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

scheduling/highest_response_ratio_next.py
|  29| ••••#•If•it•is•0,•the•performance•is•completed•if•it•is•1,•before•the•performance.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

scheduling/highest_response_ratio_next.py
|  43| ••••••••the•process•that•arrives•first•among•the•processes•that•have•not•been•performed,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

scheduling/highest_response_ratio_next.py
|  59| ••••••••••••••••temp•=•(burst_time[i]•+•(current_time•-•arrival_time[i]))•/•burst_time[
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

scheduling/highest_response_ratio_next.py
|  67| ••••••••turn_around_time[loc]•=•current_time•+•burst_time[loc]•-•arrival_time[loc]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

scheduling/highest_response_ratio_next.py
|  78| ••••process_name:•list,•turn_around_time:•list,•burst_time:•list,•no_of_process:•int
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

scheduling/highest_response_ratio_next.py
| 110| ••••print("Process•name•\tArrival•time•\tBurst•time•\tTurn•around•time•\tWaiting•time")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

matrix/rotate_matrix.py
|  25| ••••return•[[1•+•x•+•y•*•row_size•for•x•in•range(row_size)]•for•y•in•range(row_size)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/linear_regression.py
|   6| We•try•to•set•the•weight•of•these•features,•over•many•iterations,•so•that•they•best
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

machine_learning/linear_regression.py
|  83| ••••••••theta•=•run_steep_gradient_descent(data_x,•data_y,•len_data,•alpha,•theta)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

neural_network/convolution_neural_network.py
|  24| ••••••••self,•conv1_get,•size_p1,•bp_num1,•bp_num2,•bp_num3,•rate_w=0.2,•rate_t=0.2
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

neural_network/convolution_neural_network.py
|  47| ••••••••self.wkj•=•np.mat(-1•*•np.random.rand(self.num_bp3,•self.num_bp2)•+•0.5)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

neural_network/convolution_neural_network.py
|  48| ••••••••self.vji•=•np.mat(-1•*•np.random.rand(self.num_bp2,•self.num_bp1)•+•0.5)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

neural_network/convolution_neural_network.py
| 117| ••••••••••••••••••••i_focus•:•i_focus•+•size_conv,•j_focus•:•j_focus•+•size_conv
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

neural_network/convolution_neural_network.py
| 117| ••••••••••••••••••••i_focus•:•i_focus•+•size_conv,•j_focus•:•j_focus•+•size_conv
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

neural_network/convolution_neural_network.py
| 117| ••••••••••••••••••••i_focus•:•i_focus•+•size_conv,•j_focus•:•j_focus•+•size_conv
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

neural_network/convolution_neural_network.py
| 120| ••••••••#•calculate•the•feature•map•of•every•single•kernel,•and•saved•as•list•of•matrix
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

neural_network/convolution_neural_network.py
| 154| ••••••••••••••••••••••••i_focus•:•i_focus•+•size_pooling,
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

neural_network/convolution_neural_network.py
| 155| ••••••••••••••••••••••••j_focus•:•j_focus•+•size_pooling,
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

neural_network/convolution_neural_network.py
| 163| ••••••••••••map_pooled•=•np.asmatrix(map_pooled).reshape(size_pooled,•size_pooled)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

neural_network/convolution_neural_network.py
| 200| ••••••••••••••••••••pd_conv1[i•:•i•+•size_pooling,•j•:•j•+•size_pooling]•=•pd_pool[
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

neural_network/convolution_neural_network.py
| 200| ••••••••••••••••••••pd_conv1[i•:•i•+•size_pooling,•j•:•j•+•size_pooling]•=•pd_pool[
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

neural_network/convolution_neural_network.py
| 200| ••••••••••••••••••••pd_conv1[i•:•i•+•size_pooling,•j•:•j•+•size_pooling]•=•pd_pool[
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

neural_network/convolution_neural_network.py
| 211| ••••••••self,•patterns,•datas_train,•datas_teach,•n_repeat,•error_accuracy,•draw_e=bool
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

neural_network/convolution_neural_network.py
| 255| ••••••••••••••••••••np.dot(pd_k_all,•self.wkj),•np.multiply(bp_out2,•(1•-•bp_out2))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

neural_network/convolution_neural_network.py
| 259| ••••••••••••••••pd_conv1_pooled•=•pd_i_all•/•(self.size_pooling1•*•self.size_pooling1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

neural_network/convolution_neural_network.py
| 272| ••••••••••••••••••••delta_w•=•self.rate_weight•*•np.dot(pd_conv_list,•data_focus1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

neural_network/convolution_neural_network.py
| 274| ••••••••••••••••••••self.w_conv1[k_conv]•=•self.w_conv1[k_conv]•+•delta_w.reshape(
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

neural_network/convolution_neural_network.py
| 338| ••••••••#•return•the•data•of•image•after•convoluting•process•so•we•can•check•it•out
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

sorts/radix_sort.py
|  31| ••••••••buckets:•list[list]•=•[list()•for•_•in•range(RADIX)]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

ciphers/morse_code.py
|  11| ••••"A":•".-",•"B":•"-...",•"C":•"-.-.",•"D":•"-..",•"E":•".",•"F":•"..-.",•"G":•"--.",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/morse_code.py
|  12| ••••"H":•"....",•"I":•"..",•"J":•".---",•"K":•"-.-",•"L":•".-..",•"M":•"--",•"N":•"-.",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/morse_code.py
|  13| ••••"O":•"---",•"P":•".--.",•"Q":•"--.-",•"R":•".-.",•"S":•"...",•"T":•"-",•"U":•"..-",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/morse_code.py
|  14| ••••"V":•"...-",•"W":•".--",•"X":•"-..-",•"Y":•"-.--",•"Z":•"--..",•"1":•".----",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

ciphers/morse_code.py
|  15| ••••"2":•"..---",•"3":•"...--",•"4":•"....-",•"5":•".....",•"6":•"-....",•"7":•"--...",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

web_programming/instagram_crawler.py
|  18| ••••info•=•json.loads(data[data.find('{"config"')•:•-1])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

blockchain/chinese_remainder_theorem.py
|   5| If•GCD(a,b)•=•1,•then•for•any•remainder•ra•modulo•a•and•any•remainder•rb•modulo•b
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

blockchain/chinese_remainder_theorem.py
|   6| there•exists•integer•n,•such•that•n•=•ra•(mod•a)•and•n•=•ra(mod•b).••If•n1•and•n2•are
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

blockchain/chinese_remainder_theorem.py
|  54| #•----------SAME•SOLUTION•USING•InvertModulo•instead•ExtendedEuclid----------------
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

digital_image_processing/index_calculation.py
|  21| ••••••••A•Vegetation•Index•(VI)•is•a•spectral•transformation•of•two•or•more•bands
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

digital_image_processing/index_calculation.py
|  89| ••••••••#allIndex•=•["ARVI2",•"CCCI",•"CVI",•"GLI",•"NDVI",•"BNDVI",•"redEdgeNDVI",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

digital_image_processing/index_calculation.py
|  91| ••••••••••••••••••••"BWDRVI",•"CIgreen",•"CIrededge",•"CI",•"CTVI",•"GDVI",•"EVI",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

digital_image_processing/index_calculation.py
|  92| ••••••••••••••••••••"GEMI",•"GOSAVI",•"GSAVI",•"Hue",•"IVI",•"IPVI",•"I",•"RVI",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

digital_image_processing/index_calculation.py
|  93| ••••••••••••••••••••"MRVI",•"MSAVI",•"NormG",•"NormNIR",•"NormR",•"NGRDI",•"RI",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

digital_image_processing/index_calculation.py
|  97| ••••••••#notBlueIndex•=•["ARVI2",•"CCCI",•"CVI",•"NDVI",•"redEdgeNDVI",•"GNDVI",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

digital_image_processing/index_calculation.py
|  98| •••••••••••••••••••••••••"GRNDVI",•"ATSAVI",•"CIgreen",•"CIrededge",•"CTVI",•"GDVI",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

digital_image_processing/index_calculation.py
|  99| •••••••••••••••••••••••••"GEMI",•"GOSAVI",•"GSAVI",•"IVI",•"IPVI",•"RVI",•"MRVI",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

digital_image_processing/index_calculation.py
| 100| •••••••••••••••••••••••••"MSAVI",•"NormG",•"NormNIR",•"NormR",•"NGRDI",•"RI",•"DVI",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

digital_image_processing/index_calculation.py
| 107| ••••def•__init__(self,•red=None,•green=None,•blue=None,•redEdge=None,•nir=None):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

digital_image_processing/index_calculation.py
| 109| ••••••••self.setMatrices(red=red,•green=green,•blue=blue,•redEdge=redEdge,•nir=nir)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

digital_image_processing/index_calculation.py
| 111| ••••def•setMatrices(self,•red=None,•green=None,•blue=None,•redEdge=None,•nir=None):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

digital_image_processing/index_calculation.py
| 128| ••••••••performs•the•calculation•of•the•index•with•the•values•instantiated•in•the•class
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

digital_image_processing/index_calculation.py
| 131| ••••••••self.setMatrices(red=red,•green=green,•blue=blue,•redEdge=redEdge,•nir=nir)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

digital_image_processing/index_calculation.py
| 220| ••••••••Normalized•Difference•self.nir/self.red•Normalized•Difference•Vegetation
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

digital_image_processing/index_calculation.py
| 229| ••••••••••••Normalized•Difference•self.nir/self.blue•self.blue-normalized•difference
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

digital_image_processing/index_calculation.py
| 278| ••••••••return•(self.nir•-•(self.blue•+•self.red))•/•(self.nir•+•(self.blue•+•self.red))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

digital_image_processing/index_calculation.py
| 340| ••••••••return•((ndvi•+•0.5)•/•(abs(ndvi•+•0.5)))•*•(abs(ndvi•+•0.5)•**•(1•/•2))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

digital_image_processing/index_calculation.py
| 357| ••••••••••••(self.nir•-•self.red)•/•(self.nir•+•6•*•self.red•-•7.5•*•self.blue•+•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

digital_image_processing/index_calculation.py
| 366| ••••••••n•=•(2•*•(self.nir**2•-•self.red**2)•+•1.5•*•self.nir•+•0.5•*•self.red)•/•(
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

digital_image_processing/index_calculation.py
| 387| ••••••••return•((self.nir•-•self.green)•/•(self.nir•+•self.green•+•L))•*•(1•+•L)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

digital_image_processing/index_calculation.py
| 396| ••••••••••••((2•*•self.red•-•self.green•-•self.blue)•/•30.5)•*•(self.green•-•self.blue)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

digital_image_processing/index_calculation.py
| 417| ••••def•I(self):••#•noqa:•E741,E743
|    | [NORMAL] PycodestyleBear (E743):
|    | E743 ambiguous function definition 'I''

digital_image_processing/index_calculation.py
| 478| ••••••••••••Normalized•Difference•self.green/self.red•Normalized•self.green•self.red
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

digital_image_processing/index_calculation.py
| 510| ••••••••return•(2•*•self.red•-•self.green•-•self.blue)•/•(self.green•-•self.blue)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

digital_image_processing/index_calculation.py
| 514| ••••••••Simple•Ratio•self.nir/self.red•Difference•Vegetation•Index,•Vegetation•Index
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

digital_image_processing/index_calculation.py
| 547| #cl•=•indexCalculation(red=red,•green=green,•blue=blue,•redEdge=redEdge,•nir=nir)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

digital_image_processing/index_calculation.py
| 549| #•how•set•the•values•after•instantiate•the•class•cl,•(for•update•the•data•or•when•don't
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

digital_image_processing/index_calculation.py
| 554| ••••#•Note:•the•CCCI•index•can•be•changed•to•any•index•implemented•in•the•class.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

digital_image_processing/index_calculation.py
| 556| •••••••••••••••••••••••••••••••••••••redEdge=redEdge,•nir=nir).astype(np.float64)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

digital_image_processing/index_calculation.py
| 560| #•preferred••note:•the•*calculation*•function•performs•the•function•*setMatrices*
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

digital_image_processing/index_calculation.py
| 562| •••••••••••••••••••••••••••••••••••••redEdge=redEdge,•nir=nir).astype(np.float64)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

digital_image_processing/index_calculation.py
| 564| print("Form•1:•"+np.array2string(indexValue_form1,•precision=20,•separator=',•',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

digital_image_processing/index_calculation.py
| 566| print("Form•2:•"+np.array2string(indexValue_form2,•precision=20,•separator=',•',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

digital_image_processing/index_calculation.py
| 568| print("Form•3:•"+np.array2string(indexValue_form3,•precision=20,•separator=',•',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/binary_exponentiation_3.py
|  43| *•RULE•2•:•IF•b•is•ODD,•then•----•a•^•b•=•a•*•(a•^•(b•-•1))•::•where•(b•-•1)•is•even.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

dynamic_programming/max_sub_array.py
|  14| ••••••••cross_left,•cross_right,•cross_sum•=•find_max_cross_sum(A,•low,•mid,•high)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

dynamic_programming/max_sub_array.py
|  52| ••••If•all•elements•are•negative,•the•largest•subarray•would•be•the•empty•array,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

dynamic_programming/max_sub_array.py
|  80| ••••inputs•=•[10,•100,•1000,•10000,•50000,•100000,•200000,•300000,•400000,•500000]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

conversions/weight_conversion.py
|  33| KILOGRAM_CHART:•dict[str,•float]•=•{
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

conversions/weight_conversion.py
|  47| WEIGHT_TYPE_CHART:•dict[str,•float]•=•{
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

conversions/weight_conversion.py
| 303| ••••••••••••f"Invalid•'from_type'•or•'to_type'•value:•{from_type!r},•{to_type!r}\n"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

machine_learning/k_means_clust.py
|  11| ••-•initial_centroids•,•initial•centroid•values•generated•by•utility•function(mentioned
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/k_means_clust.py
|  14| ••-•heterogeneity•,•empty•list•that•will•be•filled•with•hetrogeneity•values•if•passed
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/k_means_clust.py
|  32| ••••••••••••verbose=True•#•whether•to•print•logs•in•console•or•not.(default=False)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/k_means_clust.py
|  64| ••••#•Keep•centroids•as•dense•format,•as•many•entries•will•be•nonzero•due•to•averaging.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/k_means_clust.py
|  92| ••••••••#•Select•all•data•points•that•belong•to•cluster•i.•Fill•in•the•blank•(RHS•only)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/k_means_clust.py
| 107| ••••••••#•Select•all•data•points•that•belong•to•cluster•i.•Fill•in•the•blank•(RHS•only)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/k_means_clust.py
| 110| ••••••••if•member_data_points.shape[0]•>•0:••#•check•if•i-th•cluster•is•non-empty
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/k_means_clust.py
| 132| ••••data,•k,•initial_centroids,•maxiter=500,•record_heterogeneity=None,•verbose=False
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/k_means_clust.py
| 136| ••••record_heterogeneity:•(optional)•a•list,•to•store•the•history•of•heterogeneity
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/k_means_clust.py
| 139| ••••verbose:•if•True,•print•how•many•data•points•changed•their•cluster•labels•in
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/k_means_clust.py
| 151| ••••••••#•2.•Compute•a•new•centroid•for•each•of•the•k•clusters,•averaging•all•data
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/k_means_clust.py
| 167| ••••••••••••••••••••f"••••{num_changed:5d}•elements•changed•their•cluster•assignment."
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/k_means_clust.py
| 173| ••••••••••••score•=•compute_heterogeneity(data,•k,•centroids,•cluster_assignment)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/k_means_clust.py
| 204| ••••Function•generates•easy-erading•clustering•report.•It•takes•2•arguments•as•an•input:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

machine_learning/k_means_clust.py
| 206| ••••••••FillMissingReport•-•dictionary•of•rules•how•we•are•going•to•fill•missing
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/k_means_clust.py
| 252| ••••••••••••••••••••••••••••••••round(len(x)•*•25•/•100)•:•round(len(x)•*•75•/•100)
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

machine_learning/k_means_clust.py
| 252| ••••••••••••••••••••••••••••••••round(len(x)•*•25•/•100)•:•round(len(x)•*•75•/•100)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

machine_learning/k_means_clust.py
| 285| ••••••••/•clustersize.iloc[:,•2:].values.sum()••#•calculating•the•proportion•of•cluster
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/k_means_clust.py
| 289| ••••]•=•"%•of•Customers"••#•rename•created•cluster•df•to•match•report•column•names
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/k_means_clust.py
| 293| ••••clusterproportion•=•clusterproportion[cols]••#•rearrange•columns•to•match•report
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/sieve_of_eratosthenes.py
|   4| The•sieve•of•Eratosthenes•is•an•algorithm•used•to•find•prime•numbers,•less•than•or
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/sieve_of_eratosthenes.py
|  11| Also•thanks•to•Dmitry•(https://github.com/LizardWizzard)•for•finding•the•problem
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/sieve_of_eratosthenes.py
|  37| ••••••••raise•ValueError(f"{num}:•Invalid•input,•please•enter•a•positive•integer.")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

conversions/hex_to_bin.py
|   6| ••••Shifts•the•bits•of•the•number•to•the•right•and•fills•0•on•voids•left•as•a•result.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

conversions/decimal_to_binary.py
|  45| ••••binary:•list[int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/password_generator.py
|  65| ••••length•=•int(input("Please•indicate•the•max•length•of•your•password:•").strip())
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

other/password_generator.py
|  71| ••••••••"Alternative•Password•generated:",•alternative_password_generator(ctbi,•length)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/binary_tree/lowest_common_ancestor.py
|  73| ••••q:•Queue[int]•=•Queue(maxsize=max_node)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/lowest_common_ancestor.py
|  91| ••••graph:•dict[int,•list[int]]•=•{
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/lowest_common_ancestor.py
| 108| ••••print("LCA•of•node•1•and•3•is:•",•lowest_common_ancestor(1,•3,•level,•parent))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

data_structures/binary_tree/lowest_common_ancestor.py
| 109| ••••print("LCA•of•node•5•and•6•is:•",•lowest_common_ancestor(5,•6,•level,•parent))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

data_structures/binary_tree/lowest_common_ancestor.py
| 110| ••••print("LCA•of•node•7•and•11•is:•",•lowest_common_ancestor(7,•11,•level,•parent))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/binary_tree/lowest_common_ancestor.py
| 111| ••••print("LCA•of•node•6•and•7•is:•",•lowest_common_ancestor(6,•7,•level,•parent))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

data_structures/binary_tree/lowest_common_ancestor.py
| 112| ••••print("LCA•of•node•4•and•12•is:•",•lowest_common_ancestor(4,•12,•level,•parent))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/binary_tree/lowest_common_ancestor.py
| 113| ••••print("LCA•of•node•8•and•8•is:•",•lowest_common_ancestor(8,•8,•level,•parent))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

matrix/count_islands_in_matrix.py
|  20| ••••def•diffs(self,•i,•j,•visited):••#•Checking•all•8•elements•surrounding•nth•element
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

conversions/octal_to_decimal.py
|  66| ••••if•not•oct_string.isdigit()•or•not•all(0•<=•int(char)•<=•7•for•char•in•oct_string):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/base64.py
|   1| B64_CHARSET•=•"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/base64.py
|   7| ••••The•data•is•first•transformed•to•binary•and•appended•with•binary•digits•so•that•its
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/base64.py
|   8| ••••length•becomes•a•multiple•of•6,•then•each•6•binary•digits•will•match•a•character•in
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/base64.py
|   9| ••••the•B64_CHARSET•string.•The•number•of•appended•binary•digits•would•later•determine
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

ciphers/base64.py
|  12| ••••We•can•add•any•binary•digits•to•make•it•a•multiple•of•6,•for•instance,•consider•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/base64.py
|  17| ••••That•being•said,•Base64•encoding•can•be•used•in•Steganography•to•hide•data•in•these
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/base64.py
|  49| ••••••••#•Append•binary_stream•with•arbitrary•binary•digits•(0's•by•default)•to•make•its
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

ciphers/base64.py
|  58| ••••••••••••B64_CHARSET[int(binary_stream[index•:•index•+•6],•2)]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

ciphers/base64.py
|  70| ••••previously•appended•binary•digits•according•to•the•padding,•at•this•point•we
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/base64.py
|  90| ••••if•not•isinstance(encoded_data,•bytes)•and•not•isinstance(encoded_data,•str):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

ciphers/base64.py
| 102| ••••••••••••raise•ValueError("base64•encoded•data•should•only•contain•ASCII•characters")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

ciphers/base64.py
| 132| ••••••••int(binary_stream[index•:•index•+•8],•2)
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

machine_learning/support_vector_machines.py
|  35| ••••••••regularization:•constraint•for•soft•margin•(data•not•linearly•separable)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/support_vector_machines.py
|  68| ••••••••••••if•not•(isinstance(self.gamma,•float)•or•isinstance(self.gamma,•int)):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/support_vector_machines.py
| 156| ••••••••••••to_minimize,•np.ones(n),•bounds=l_bounds,•constraints=[ly_contraint]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

web_programming/search_books_by_isbn.py
|   6| from•json•import•JSONDecodeError••#•Workaround•for•requests.exceptions.JSONDecodeError
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

web_programming/search_books_by_isbn.py
|  13| ••••Given•an•'isbn/0140328726',•return•book•data•from•Open•Library•as•a•Python•dict.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

web_programming/search_books_by_isbn.py
|  17| ••••#•Comment•out•doctests•if•they•take•too•long•or•have•results•that•may•change
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

web_programming/search_books_by_isbn.py
|  19| ••••{'publishers':•['Puffin'],•'number_of_pages':•96,•'isbn_10':•['0140328726'],•...
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

web_programming/search_books_by_isbn.py
|  20| ••••#•>>>•get_openlibrary_data(olid='/authors/OL7353617A')••#•doctest:•+ELLIPSIS
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

web_programming/search_books_by_isbn.py
|  24| ••••new_olid•=•olid.strip().strip("/")••#•Remove•leading/trailing•whitespace•&•slashes
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

web_programming/search_books_by_isbn.py
|  45| ••••data•=•{better_key:•ol_book_data[key]•for•key,•better_key•in•desired_keys.items()}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

web_programming/search_books_by_isbn.py
|  47| ••••••••get_openlibrary_data(author["key"])["name"]•for•author•in•data["Authors"]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

web_programming/search_books_by_isbn.py
|  62| ••••••••isbn•=•input("\nEnter•the•ISBN•code•to•search•(or•'quit'•to•stop):•").strip()
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

web_programming/search_books_by_isbn.py
|  67| ••••••••••••print(f"Sorry,•{isbn}•is•not•a•valid•ISBN.••Please,•input•a•valid•ISBN.")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

web_programming/search_books_by_isbn.py
|  74| ••••••••••••print("\n".join(f"{key}:•{value}"•for•key,•value•in•book_summary.items()))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

web_programming/search_books_by_isbn.py
|  75| ••••••••except•JSONDecodeError:••#•Workaround•for•requests.exceptions.RequestException:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

compression/burrows_wheeler.py
|  19| ••••bwt_string:•str
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

compression/burrows_wheeler.py
|  20| ••••idx_original_string:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

compression/burrows_wheeler.py
|  85| ••••response:•BWTTransformDict•=•{
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

compression/burrows_wheeler.py
| 150| ••••••••raise•ValueError("The•parameter•idx_original_string•must•not•be•lower•than•0.")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

compression/burrows_wheeler.py
| 153| ••••••••••••"The•parameter•idx_original_string•must•be•lower•than"•"•len(bwt_string)."
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

compression/burrows_wheeler.py
| 172| ••••original_string•=•reverse_bwt(result["bwt_string"],•result["idx_original_string"])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

compression/burrows_wheeler.py
| 174| ••••••••f"Reversing•Burrows•Wheeler•transform•for•entry•'{result['bwt_string']}'•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

arithmetic_analysis/jacobi_iteration_method.py
|  20| ••••An•iterative•algorithm•to•determine•the•solutions•of•strictly•diagonally•dominant
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

arithmetic_analysis/jacobi_iteration_method.py
|  55| ••••ValueError:•Coefficient•and•constant•matrices•dimensions•must•be•nxn•and•nx1•but
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

arithmetic_analysis/jacobi_iteration_method.py
|  65| ••••ValueError:•Number•of•initial•values•must•be•equal•to•number•of•rows•in•coefficient
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

arithmetic_analysis/jacobi_iteration_method.py
|  83| ••••••••••••f"Coefficient•matrix•dimensions•must•be•nxn•but•received•{rows1}x{cols1}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

arithmetic_analysis/jacobi_iteration_method.py
|  87| ••••••••raise•ValueError(f"Constant•matrix•must•be•nx1•but•received•{rows2}x{cols2}")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

arithmetic_analysis/jacobi_iteration_method.py
| 104| ••••table:•NDArray[float64]•=•np.concatenate(
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

arithmetic_analysis/jacobi_iteration_method.py
| 158| ••••••••••••raise•ValueError("Coefficient•matrix•is•not•strictly•diagonally•dominant")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

data_structures/linked_list/circular_linked_list.py
|   9| ••••••••self.data:•Any•=•data
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/linked_list/circular_linked_list.py
|  10| ••••••••self.next:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

ciphers/enigma_machine2.py
|  97| ••••••••••••"First•rotor•position•is•not•within•range•of•1..26•("•f"{rotorpos1}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/enigma_machine2.py
| 101| ••••••••••••"Second•rotor•position•is•not•within•range•of•1..26•("•f"{rotorpos2})"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

ciphers/enigma_machine2.py
| 105| ••••••••••••"Third•rotor•position•is•not•within•range•of•1..26•("•f"{rotorpos3})"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

ciphers/enigma_machine2.py
| 119| ••••{'P':•'I',•'I':•'P',•'C':•'T',•'T':•'C',•'U':•'R',•'R':•'U',•'E':•'S',•'S':•'E'}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

ciphers/enigma_machine2.py
| 134| ••••••••raise•TypeError(f"Plugboard•setting•isn't•type•string•({type(pbstring)})")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

ciphers/enigma_machine2.py
| 287| ••••message•=•"This•is•my•Python•script•that•emulates•the•Enigma•machine•from•WWII."
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_207/sol1.py
|   7| 4**t•=•2**t•+•k,•where•4**t,•2**t,•and•k•are•all•positive•integers•and•t•is•a•real
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_207/sol1.py
|  11| For•any•m•≥•1•let•P(m)•be•the•proportion•of•such•partitions•that•are•perfect•with
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_207/sol1.py
|  33| To•speed•up•significantly•the•search•for•partitions,•instead•of•incrementing•k•by•one
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_207/sol1.py
|  34| per•iteration,•the•next•valid•k•is•found•by•k•=•(i**2•-•1)•/•4•with•an•integer•i•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_207/sol1.py
|  35| k•has•to•be•a•positive•integer.•If•this•is•the•case•a•partition•is•found.•The•partition
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_207/sol1.py
|  36| is•perfect•if•t•os•an•integer.•The•integer•i•is•increased•with•increment•1•until•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_207/sol1.py
|  47| ••••Check•if•t•=•f(positive_integer)•=•log2(sqrt(4*positive_integer+1)/2•+•1/2)•is•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_207/sol1.py
|  65| ••••Find•m•for•which•the•proportion•of•perfect•partitions•to•total•partitions•is•lower
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

strings/wave.py
|  13| ••••••••txt[:a]•+•txt[a].upper()•+•txt[a•+•1•:]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

maths/factors.py
|  18| ••••print(f"{num}•has•{len(factors)}•factors:•{',•'.join(str(f)•for•f•in•factors)}")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

divide_and_conquer/peak.py
|  31| ••••three•=•lst[m•-•1•:•m•+•2]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

bit_manipulation/binary_xor_operator.py
|  45| ••••••••for•char_a,•char_b•in•zip(a_binary.zfill(max_len),•b_binary.zfill(max_len))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

sorts/odd_even_transposition_single_threaded.py
|   6| Normally•the•swaps•in•each•set•happen•simultaneously,•without•that•the•algorithm
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/graphs_floyd_warshall.py
|   3| ••••The•problem•is•to•find•the•shortest•distance•between•all•pairs•of•vertices•in•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

graphs/graphs_floyd_warshall.py
|  29| ••••3.•The•algorithm•then•performs•distance[i][j]•=•min(distance[i][j],•distance[i][k]•+
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

graphs/graphs_floyd_warshall.py
|  32| ••••5.•Whenever•distance[i][j]•is•given•a•new•minimum•value,•next•vertex[i][j]•is
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphs/graphs_floyd_warshall.py
|  68| ••••••••#•src•and•dst•are•indices•that•must•be•within•the•array•size•graph[e][v]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

divide_and_conquer/heaps_algorithm_iterative.py
|   2| Heap's•(iterative)•algorithm•returns•the•list•of•all•permutations•possible•from•a•list.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_059/sol1.py
|   2| Each•character•on•a•computer•is•assigned•a•unique•code•and•the•preferred•standard•is
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_059/sol1.py
|   6| A•modern•encryption•method•is•to•take•a•text•file,•convert•the•bytes•to•ASCII,•then
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_059/sol1.py
|   7| XOR•each•byte•with•a•given•value,•taken•from•a•secret•key.•The•advantage•with•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_059/sol1.py
|  11| For•unbreakable•encryption,•the•key•is•the•same•length•as•the•plain•text•message,•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_059/sol1.py
|  12| the•key•is•made•up•of•random•bytes.•The•user•would•keep•the•encrypted•message•and•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_059/sol1.py
|  13| encryption•key•in•different•locations,•and•without•both•"halves",•it•is•impossible•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_059/sol1.py
|  16| Unfortunately,•this•method•is•impractical•for•most•users,•so•the•modified•method•is
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_059/sol1.py
|  17| to•use•a•password•as•a•key.•If•the•password•is•shorter•than•the•message,•which•is
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_059/sol1.py
|  18| likely,•the•key•is•repeated•cyclically•throughout•the•message.•The•balance•for•this
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_059/sol1.py
|  19| method•is•using•a•sufficiently•long•password•key•for•security,•but•short•enough•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_059/sol1.py
|  22| Your•task•has•been•made•easy,•as•the•encryption•key•consists•of•three•lower•case
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_059/sol1.py
|  24| file•containing•the•encrypted•ASCII•codes,•and•the•knowledge•that•the•plain•text
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_059/sol1.py
|  25| must•contain•common•English•words,•decrypt•the•message•and•find•the•sum•of•the•ASCII
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_059/sol1.py
|  34| VALID_CHARS:•str•=•(
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_059/sol1.py
|  35| ••••string.ascii_letters•+•string.digits•+•string.punctuation•+•string.whitespace
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_059/sol1.py
|  37| LOWERCASE_INTS:•list[int]•=•[ord(letter)•for•letter•in•string.ascii_lowercase]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_059/sol1.py
|  38| VALID_INTS:•set[int]•=•{ord(char)•for•char•in•VALID_CHARS}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_059/sol1.py
|  40| COMMON_WORDS:•list[str]•=•["the",•"be",•"to",•"of",•"and",•"in",•"that",•"have"]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_059/sol1.py
|  40| COMMON_WORDS:•list[str]•=•["the",•"be",•"to",•"of",•"and",•"in",•"that",•"have"]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_059/sol1.py
|  45| ••••Given•an•encrypted•message•and•a•possible•3-character•key,•decrypt•the•message.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_059/sol1.py
|  46| ••••If•the•decrypted•message•contains•a•invalid•character,•i.e.•not•an•ASCII•letter,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_059/sol1.py
|  47| ••••a•digit,•punctuation•or•whitespace,•then•we•know•the•key•is•incorrect,•so•return
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_059/sol1.py
|  54| ••••decoded:•str•=•""
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_059/sol1.py
|  55| ••••keychar:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_059/sol1.py
|  56| ••••cipherchar:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_059/sol1.py
|  57| ••••decodedchar:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_059/sol1.py
|  70| ••••Given•an•encrypted•message,•test•all•3-character•strings•to•try•and•find•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_059/sol1.py
|  79| ••••possibles:•list[str]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_059/sol1.py
|  90| ••••for•checking•for•the•presence•of•a•specified•common•word.•Only•decoded•messages
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_059/sol1.py
|  97| ••••return•[possible•for•possible•in•possibles•if•common_word•in•possible.lower()]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_059/sol1.py
| 102| ••••Test•the•ciphertext•against•all•possible•3-character•keys,•then•narrow•down•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_059/sol1.py
| 103| ••••possibilities•by•filtering•using•common•words•until•there's•only•one•possible
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_059/sol1.py
| 108| ••••ciphertext:•list[int]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_059/sol1.py
| 109| ••••possibles:•list[str]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_059/sol1.py
| 110| ••••common_word:•str
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_059/sol1.py
| 111| ••••decoded_text:•str
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_059/sol1.py
| 112| ••••data:•str•=•Path(__file__).parent.joinpath(filename).read_text(encoding="utf-8")
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_059/sol1.py
| 112| ••••data:•str•=•Path(__file__).parent.joinpath(filename).read_text(encoding="utf-8")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_054/sol1.py
|  23| But•if•two•ranks•tie,•for•example,•both•players•have•a•pair•of•queens,•then•highest
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_054/sol1.py
|  30| You•can•assume•that•all•hands•are•valid•(no•invalid•characters•or•repeated•cards),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_054/sol1.py
|  31| each•player's•hand•is•in•no•specific•order,•and•in•each•hand•there•is•a•clear•winner.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_054/sol1.py
| 180| ••••••••••••••••return•"Win"•if•self._second_pair•>•other._second_pair•else•"Loss"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_054/sol1.py
| 227| ••••••••••••••••return•"Win"•if•card_value•>•other._card_values[index]•else•"Loss"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_054/sol1.py
| 258| ••••••••#•Why•use•sorted•here?•One•call•to•this•function•will•mutate•the•list•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_054/sol1.py
| 302| ••••••••#•For•consistency•in•hand•type•(look•at•note•in•_get_hand_type•function)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_054/sol1.py
| 318| ••••••••trans:•dict•=•{"T":•"10",•"J":•"11",•"Q":•"12",•"K":•"13",•"A":•"14"}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_054/sol1.py
| 330| ••••#•Rich•comparison•operators•(used•in•list.sort()•and•sorted()•builtin•functions)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

digital_image_processing/edge_detection/canny.py
|  12| ••••x,•y•=•np.mgrid[0•-•center•:•k_size•-•center,•0•-•center•:•k_size•-•center]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/edge_detection/canny.py
|  12| ••••x,•y•=•np.mgrid[0•-•center•:•k_size•-•center,•0•-•center•:•k_size•-•center]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/edge_detection/canny.py
|  33| ••••Non-maximum•suppression.•If•the•edge•strength•of•the•current•pixel•is•the•largest
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

digital_image_processing/edge_detection/canny.py
|  34| ••••compared•to•the•other•pixels•in•the•mask•with•the•same•direction,•the•value•will•be
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

digital_image_processing/edge_detection/canny.py
|  76| ••••••••••••High-Low•threshold•detection.•If•an•edge•pixel’s•gradient•value•is•higher
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

digital_image_processing/edge_detection/canny.py
|  77| ••••••••••••than•the•high•threshold•value,•it•is•marked•as•a•strong•edge•pixel.•If•an
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

digital_image_processing/edge_detection/canny.py
|  78| ••••••••••••edge•pixel’s•gradient•value•is•smaller•than•the•high•threshold•value•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

digital_image_processing/edge_detection/canny.py
|  79| ••••••••••••larger•than•the•low•threshold•value,•it•is•marked•as•a•weak•edge•pixel.•If
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

digital_image_processing/edge_detection/canny.py
|  80| ••••••••••••an•edge•pixel's•value•is•smaller•than•the•low•threshold•value,•it•will•be
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

digital_image_processing/edge_detection/canny.py
|  91| ••••Edge•tracking.•Usually•a•weak•edge•pixel•caused•from•true•edges•will•be•connected
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

digital_image_processing/edge_detection/canny.py
|  92| ••••to•a•strong•edge•pixel•while•noise•responses•are•unconnected.•As•long•as•there•is
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

digital_image_processing/edge_detection/canny.py
|  93| ••••one•strong•edge•pixel•that•is•involved•in•its•8-connected•neighborhood,•that•weak
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/linked_list/has_loop.py
|  12| ••••••••self.data:•Any•=•data
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/linked_list/has_loop.py
|  13| ••••••••self.next_node:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/linked_list/has_loop.py
|  28| ••••••••A•loop•is•when•the•exact•same•Node•appears•more•than•once•in•a•linked•list.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

strings/levenshtein_distance.py
|  72| ••••print(f"Levenshtein•distance•between•{first_word}•and•{second_word}•is•{result}")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

other/lru_cache.py
|  21| ••••••••self.next:•DoubleLinkedListNode[T,•U]•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lru_cache.py
|  22| ••••••••self.prev:•DoubleLinkedListNode[T,•U]•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lru_cache.py
|  99| ••••••••self.head:•DoubleLinkedListNode[T,•U]•=•DoubleLinkedListNode(None,•None)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lru_cache.py
|  99| ••••••••self.head:•DoubleLinkedListNode[T,•U]•=•DoubleLinkedListNode(None,•None)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

other/lru_cache.py
| 100| ••••••••self.rear:•DoubleLinkedListNode[T,•U]•=•DoubleLinkedListNode(None,•None)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lru_cache.py
| 100| ••••••••self.rear:•DoubleLinkedListNode[T,•U]•=•DoubleLinkedListNode(None,•None)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

other/lru_cache.py
| 119| ••••••••#•All•nodes•other•than•self.head•are•guaranteed•to•have•non-None•previous
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

other/lru_cache.py
| 148| ••••LRU•Cache•to•store•a•given•capacity•of•data.•Can•be•used•as•a•stand-alone•object
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

other/lru_cache.py
| 212| ••••#•class•variable•to•map•the•decorator•functions•to•their•respective•instance
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

other/lru_cache.py
| 213| ••••decorator_function_to_instance_map:•dict[Callable[[T],•U],•LRUCache[T,•U]]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lru_cache.py
| 213| ••••decorator_function_to_instance_map:•dict[Callable[[T],•U],•LRUCache[T,•U]]•=•{}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

other/lru_cache.py
| 216| ••••••••self.list:•DoubleLinkedList[T,•U]•=•DoubleLinkedList()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lru_cache.py
| 221| ••••••••self.cache:•dict[T,•DoubleLinkedListNode[T,•U]]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lru_cache.py
| 258| ••••••••••••value_node:•DoubleLinkedListNode[T,•U]•=•self.cache[key]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lru_cache.py
| 313| ••••••••••••••••••••cls.decorator_function_to_instance_map[func]•=•LRUCache(size)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

other/lru_cache.py
| 315| ••••••••••••••••result•=•cls.decorator_function_to_instance_map[func].get(args[0])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

other/lru_cache.py
| 318| ••••••••••••••••••••cls.decorator_function_to_instance_map[func].set(args[0],•result)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/heap/heap.py
|  30| ••••••••self.h:•list[float]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/heap/heap.py
|  31| ••••••••self.heap_size:•int•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/heap/heap.py
|  67| ••••••••••••violation:•int•=•index
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/heap/heap.py
|  71| ••••••••••••if•left_child•is•not•None•and•self.h[left_child]•>•self.h[violation]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/heap/heap.py
|  73| ••••••••••••if•right_child•is•not•None•and•self.h[right_child]•>•self.h[violation]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

data_structures/heap/heap.py
|  78| ••••••••••••••••self.h[violation],•self.h[index]•=•self.h[index],•self.h[violation]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

sorts/unknown_sort.py
|   4| Worst•Case•Scenario•:•O(n^2)•because•native•Python•functions:min,•max•and•remove•are
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

physics/lorenz_transformation_four_vector.py
|  65| ••••••••raise•ValueError("Speed•must•not•exceed•Light•Speed•299,792,458•[m/s]!")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

geodesy/haversine_distance.py
|   4| def•haversine_distance(lat1:•float,•lon1:•float,•lat2:•float,•lon2:•float)•->•float:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

geodesy/haversine_distance.py
|   7| ••••given•longitudes•and•latitudes•https://en.wikipedia.org/wiki/Haversine_formula
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

geodesy/haversine_distance.py
|  12| ••••small•distances•but•adds•up•as•distance•increases.•The•Haversine•method•treats
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

geodesy/haversine_distance.py
|  14| ••••onto•the•surface•of•that•sphere•and•approximate•the•spherical•distance•between
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

geodesy/haversine_distance.py
|  15| ••••them.•Since•the•Earth•is•not•a•perfect•sphere,•other•methods•which•model•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/radix2_fft.py
|  20| ••••••••1)•__DFT:•We•compute•the•discrete•fourier•transform•(DFT)•of•A•and•B•using•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/radix2_fft.py
|  25| ••••The•class•FFT•takes•two•polynomials•A•and•B•with•complex•coefficients•as•arguments;
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/radix2_fft.py
|  26| ••••The•two•polynomials•should•be•represented•as•a•sequence•of•coefficients•starting
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/radix2_fft.py
|  28| ••••[0,1,0,2]•or•(0,1,0,2).•The•constructor•adds•some•zeros•at•the•end•so•that•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/radix2_fft.py
|  29| ••••polynomials•have•the•same•length•which•is•a•power•of•2•at•least•the•length•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/radix2_fft.py
|  49| ••••A*B•=•0*x^(-0+0j)•+•1*x^(2+0j)•+•2*x^(3+0j)•+•3*x^(8+0j)•+•4*x^(6+0j)•+•5*x^(8+0j)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/radix2_fft.py
| 100| ••••••••••••••••••••new_dft[i].append(dft[i][j]•+•current_root•*•dft[i•+•next_ncol][j])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/radix2_fft.py
| 106| ••••••••••••••••••••new_dft[i].append(dft[i][j]•-•current_root•*•dft[i•+•next_ncol][j])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/radix2_fft.py
| 154| ••••••••inverseC•=•[round(x[0].real,•8)•+•round(x[0].imag,•8)•*•1j•for•x•in•inverseC]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

linear_algebra/src/transformations_2d.py
|   4| I•have•added•the•codes•for•reflection,•projection,•scaling•and•rotation•2D•matrices.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/queue/linked_queue.py
|  10| ••••••••self.data:•Any•=•data
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/queue/linked_queue.py
|  11| ••••••••self.next:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/queue/linked_queue.py
|  45| ••••••••self.front:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/queue/linked_queue.py
|  46| ••••••••self.rear:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_004/sol1.py
|  46| ••••••••••••••••if•(number•%•divisor•==•0)•and•(len(str(number•//•divisor))•==•3.0):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

dynamic_programming/minimum_cost_path.py
|   8| ••••Find•the•minimum•cost•traced•by•all•possible•paths•from•top•left•to•bottom•right•in
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

computer_vision/cnn_classification.py
|  67| ••••••••rescale=1.0•/•255,•shear_range=0.2,•zoom_range=0.2,•horizontal_flip=True
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

computer_vision/cnn_classification.py
|  70| ••••test_datagen•=•tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.0•/•255)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

computer_vision/cnn_classification.py
|  73| ••••••••"dataset/training_set",•target_size=(64,•64),•batch_size=32,•class_mode="binary"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

computer_vision/cnn_classification.py
|  77| ••••••••"dataset/test_set",•target_size=(64,•64),•batch_size=32,•class_mode="binary"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/dijkstra_algorithm.py
|   1| #•Title:•Dijkstra's•Algorithm•for•finding•single•source•shortest•path•from•scratch
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/dijkstra_algorithm.py
| 106| ••••••••••••print(u,•"->",•"•->•".join(str(f"{v}({w})")•for•v,•w•in•self.adjList[u]))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

digital_image_processing/dithering/burkes.py
|  10| ••••Burke's•algorithm•is•using•for•converting•grayscale•image•to•black•and•white•version
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

digital_image_processing/dithering/burkes.py
|  15| ••••••••*•This•implementation•get•RGB•image•and•converts•it•to•greyscale•in•runtime.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

digital_image_processing/dithering/burkes.py
|  24| ••••••••••••raise•ValueError(f"Factor•value•should•be•from•0•to•{self.max_threshold}")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

digital_image_processing/dithering/burkes.py
|  28| ••••••••self.width,•self.height•=•self.input_img.shape[1],•self.input_img.shape[0]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

digital_image_processing/dithering/burkes.py
|  30| ••••••••#•error•table•size•(+4•columns•and•+1•row)•greater•than•input•image•because•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

web_programming/get_user_tweets.py
|  22| ••••#•make•initial•request•for•most•recent•tweets•(200•is•the•maximum•allowed•count)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

web_programming/get_user_tweets.py
|  49| ••••outtweets•=•[[tweet.id_str,•tweet.created_at,•tweet.text]•for•tweet•in•alltweets]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/prime_check.py
|  69| ••••••••••••"Zero•doesn't•have•any•positive•factors,•primes•must•have•exactly•two.",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

quantum/deutsch_jozsa.py
|  73| def•dj_algorithm(oracle:•q.QuantumCircuit,•num_qubits:•int)•->•q.QuantumCircuit:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_123/sol1.py
|  20| •••••••••••••••••••••••••••••••••••••••••••(p-b)^2•=•(p^2•+•b^2•-•2pb)•and•b•=•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_123/sol1.py
|  64| ••••factor_map:•dict[int,•int]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

ciphers/rsa_key_generator.py
|  37| ••••if•os.path.exists(f"{name}_pubkey.txt")•or•os.path.exists(f"{name}_privkey.txt"):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

ciphers/rsa_key_generator.py
|  41| ••••••••••••"Use•a•different•name•or•delete•these•files•and•re-run•this•program."
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/heap/randomized_heap.py
|  19| ••••••••self._value:•T•=•value
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/heap/randomized_heap.py
|  20| ••••••••self.left:•RandomizedHeapNode[T]•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/heap/randomized_heap.py
|  21| ••••••••self.right:•RandomizedHeapNode[T]•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/heap/randomized_heap.py
|  30| ••••••••root1:•RandomizedHeapNode[T]•|•None,•root2:•RandomizedHeapNode[T]•|•None
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

data_structures/heap/randomized_heap.py
|  79| ••••••••self._root:•RandomizedHeapNode[T]•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/heap/randomized_heap.py
|  97| ••••••••self._root•=•RandomizedHeapNode.merge(self._root,•RandomizedHeapNode(value))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/heap/randomized_heap.py
| 123| ••••••••self._root•=•RandomizedHeapNode.merge(self._root.left,•self._root.right)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

backtracking/n_queens.py
|   6| •This•means•that•one•queen•cannot•have•any•other•queen•on•its•horizontal,•vertical•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

backtracking/n_queens.py
|  17| ••••This•function•returns•a•boolean•value•True•if•it•is•safe•to•place•a•queen•there
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

backtracking/n_queens.py
|  45| ••••It•creates•a•state•space•tree•and•calls•the•safe•function•until•it•receives•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

backtracking/n_queens.py
|  52| ••••••••and•that•combination•is•appended•to•the•solution•list•and•the•board•is•printed.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

backtracking/n_queens.py
|  61| ••••••••For•every•row•it•iterates•through•each•column•to•check•if•it•is•feasible•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

backtracking/n_queens.py
|  63| ••••••••If•all•the•combinations•for•that•particular•branch•are•successful•the•board•is
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/two_sum.py
|   2| Given•an•array•of•integers,•return•indices•of•the•two•numbers•such•that•they•add•up•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/two_sum.py
|   5| You•may•assume•that•each•input•would•have•exactly•one•solution,•and•you•may•not•use•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/two_sum.py
|  34| ••••chk_map:•dict[int,•int]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
|   2| If•we•are•presented•with•the•first•k•terms•of•a•sequence•it•is•impossible•to•say•with
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_101/sol1.py
|   3| certainty•the•value•of•the•next•term,•as•there•are•infinitely•many•polynomial•functions
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_101/sol1.py
|  11| principle•that•"simple•is•best"•we•should•assume•a•linear•relationship•and•predict•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_101/sol1.py
|  12| next•term•to•be•15•(common•difference•7).•Even•if•we•were•presented•with•the•first•three
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

project_euler/problem_101/sol1.py
|  17| generating•function•for•the•first•k•terms•of•a•sequence.•It•should•be•clear•that
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_101/sol1.py
|  18| OP(k,•n)•will•accurately•generate•the•terms•of•the•sequence•for•n•≤•k,•and•potentially
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_101/sol1.py
|  19| the•first•incorrect•term•(FIT)•will•be•OP(k,•k+1);•in•which•case•we•shall•call•it•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_101/sol1.py
|  35| By•considering•the•sum•of•FITs•generated•by•the•BOPs•(indicated•in•red•above),•we
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_101/sol1.py
|  62| ••••size:•int•=•len(matrix)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
|  63| ••••augmented:•Matrix•=•[[0•for•_•in•range(size•+•1)]•for•_•in•range(size)]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
|  64| ••••row:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
|  65| ••••row2:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
|  66| ••••col:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
|  67| ••••col2:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
|  68| ••••pivot_row:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
|  69| ••••ratio:•float
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
|  81| ••••••••pivot_row•=•max((abs(augmented[row2][col]),•row2)•for•row2•in•range(col,•size))[
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

project_euler/problem_101/sol1.py
|  88| ••••••••••••augmented[row],•augmented[pivot_row]•=•augmented[pivot_row],•augmented[row]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_101/sol1.py
| 108| ••••••••[round(augmented[row][size]•/•augmented[row][row],•10)]•for•row•in•range(size)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_101/sol1.py
| 129| ••••size:•int•=•len(y_list)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
| 130| ••••matrix:•Matrix•=•[[0•for•_•in•range(size)]•for•_•in•range(size)]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
| 131| ••••vector:•Matrix•=•[[0]•for•_•in•range(size)]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
| 132| ••••coeffs:•Matrix
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
| 133| ••••x_val:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
| 134| ••••y_val:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
| 135| ••••col:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
| 190| def•solution(func:•Callable[[int],•int]•=•question_function,•order:•int•=•10)•->•int:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_101/sol1.py
| 192| ••••Find•the•sum•of•the•FITs•of•the•BOPS.•For•each•interpolating•polynomial•of•order
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_101/sol1.py
| 193| ••••1,•2,•...•,•10,•find•the•first•x•such•that•the•value•of•the•polynomial•at•x•does
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_101/sol1.py
| 198| ••••data_points:•list[int]•=•[func(x_val)•for•x_val•in•range(1,•order•+•1)]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
| 200| ••••polynomials:•list[Callable[[int],•int]]•=•[
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
| 201| ••••••••interpolate(data_points[:max_coeff])•for•max_coeff•in•range(1,•order•+•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_101/sol1.py
| 204| ••••ret:•int•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
| 205| ••••poly:•Callable[[int],•int]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_101/sol1.py
| 206| ••••x_val:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphics/vector3_for_2d_rendering.py
|  32| ••••••••••••"Input•values•must•either•be•float•or•int:•"•f"{list(locals().values())}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphics/vector3_for_2d_rendering.py
|  56| ••••TypeError:•Input•values•except•axis•must•either•be•float•or•int:•['1',•2,•3,•90.0]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphics/vector3_for_2d_rendering.py
|  73| ••••if•not•all(isinstance(val,•(float,•int))•for•val•in•input_variables.values()):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/graph_list.py
|  16| ••••Adjacency•List•type•Graph•Data•Structure•that•accounts•for•directed•and•undirected
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/graph_list.py
|  17| ••••Graphs.••Initialize•graph•object•indicating•whether•it's•directed•or•undirected.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/graph_list.py
|  41| ••••{0:•[1,•2],•1:•[0,•2,•4,•5],•2:•[1,•0,•6,•7],•4:•[1],•5:•[1],•6:•[2],•7:•[2]}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphs/graph_list.py
|  70| •••••{'a':•['b'],•'b':•['a',•'c',•'e',•'f'],•'c':•['b'],•'e':•['b'],•'f':•['b']}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/graph_list.py
|  72| •••••{'a':•['b'],•'b':•['a',•'c',•'e',•'f'],•'c':•['b'],•'e':•['b'],•'f':•['b']}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/graph_list.py
|  78| ••••••••directed:•(bool)•Indicates•if•graph•is•directed•or•undirected.•Default•is•True.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/graph_list.py
|  81| ••••••••self.adj_list:•dict[T,•list[T]]•=•{}••#•dictionary•of•lists
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/graph_list.py
|  88| ••••••••Connects•vertices•together.•Creates•and•Edge•from•source•vertex•to•destination
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/graph_list.py
|  94| ••••••••••••#•if•both•source•vertex•and•destination•vertex•are•both•present•in•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/graph_list.py
|  95| ••••••••••••#•adjacency•list,•add•destination•vertex•to•source•vertex•list•of•adjacent
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/graph_list.py
|  96| ••••••••••••#•vertices•and•add•source•vertex•to•destination•vertex•list•of•adjacent
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

graphs/graph_list.py
|  98| ••••••••••••if•source_vertex•in•self.adj_list•and•destination_vertex•in•self.adj_list:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/graph_list.py
| 101| ••••••••••••#•if•only•source•vertex•is•present•in•adjacency•list,•add•destination•vertex
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

graphs/graph_list.py
| 102| ••••••••••••#•to•source•vertex•list•of•adjacent•vertices,•then•create•a•new•vertex•with
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/graph_list.py
| 103| ••••••••••••#•destination•vertex•as•key•and•assign•a•list•containing•the•source•vertex
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/graph_list.py
| 108| ••••••••••••#•if•only•destination•vertex•is•present•in•adjacency•list,•add•source•vertex
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

graphs/graph_list.py
| 109| ••••••••••••#•to•destination•vertex•list•of•adjacent•vertices,•then•create•a•new•vertex
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/graph_list.py
| 110| ••••••••••••#•with•source•vertex•as•key•and•assign•a•list•containing•the•source•vertex
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/graph_list.py
| 115| ••••••••••••#•if•both•source•vertex•and•destination•vertex•are•not•present•in•adjacency
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/graph_list.py
| 116| ••••••••••••#•list,•create•a•new•vertex•with•source•vertex•as•key•and•assign•a•list
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

graphs/graph_list.py
| 117| ••••••••••••#•containing•the•destination•vertex•as•it's•first•adjacent•vertex•also
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/graph_list.py
| 118| ••••••••••••#•create•a•new•vertex•with•destination•vertex•as•key•and•assign•a•list
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/graph_list.py
| 124| ••••••••••••#•if•both•source•vertex•and•destination•vertex•are•present•in•adjacency
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

graphs/graph_list.py
| 125| ••••••••••••#•list,•add•destination•vertex•to•source•vertex•list•of•adjacent•vertices.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/graph_list.py
| 126| ••••••••••••if•source_vertex•in•self.adj_list•and•destination_vertex•in•self.adj_list:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/graph_list.py
| 128| ••••••••••••#•if•only•source•vertex•is•present•in•adjacency•list,•add•destination
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphs/graph_list.py
| 129| ••••••••••••#•vertex•to•source•vertex•list•of•adjacent•vertices•and•create•a•new•vertex
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/graph_list.py
| 134| ••••••••••••#•if•only•destination•vertex•is•present•in•adjacency•list,•create•a•new
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

graphs/graph_list.py
| 135| ••••••••••••#•vertex•with•source•vertex•as•key•and•assign•a•list•containing•destination
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/graph_list.py
| 139| ••••••••••••#•if•both•source•vertex•and•destination•vertex•are•not•present•in•adjacency
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/graph_list.py
| 140| ••••••••••••#•list,•create•a•new•vertex•with•source•vertex•as•key•and•a•list•containing
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/graph_list.py
| 141| ••••••••••••#•destination•vertex•as•it's•first•adjacent•vertex.•Then•create•a•new•vertex
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

data_structures/stacks/next_greater_element.py
|  10| ••••Maximum•element•present•after•the•current•one•which•is•also•greater•than•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

data_structures/stacks/next_greater_element.py
|  20| ••••••••next:•float•=•-1
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/stacks/next_greater_element.py
|  39| ••••••••next:•float•=•-1
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/stacks/next_greater_element.py
|  40| ••••••••for•inner•in•arr[i•+•1•:]:
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

data_structures/stacks/next_greater_element.py
|  51| ••••Maximum•element•present•after•the•current•one•which•is•also•greater•than•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

data_structures/stacks/next_greater_element.py
|  54| ••••A•naive•way•to•solve•this•is•to•take•two•loops•and•check•for•the•next•bigger
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

data_structures/stacks/next_greater_element.py
|  55| ••••number•but•that•will•make•the•time•complexity•as•O(n^2).•The•better•way•to•solve
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/stacks/next_greater_element.py
|  56| ••••this•would•be•to•use•a•stack•to•keep•track•of•maximum•number•giving•a•linear•time
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/stacks/next_greater_element.py
|  62| ••••stack:•list[float]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/stacks/next_greater_element.py
|  63| ••••result:•list[float]•=•[-1]•*•arr_size
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/fibonacci.py
| 115| ••••cache:•dict[int,•int]•=•{0:•0,•1:•1,•2:•1}••#•Prefilled•cache
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/fibonacci.py
| 130| ••••Calculates•the•first•n•(0-indexed)•Fibonacci•numbers•using•a•simplified•form
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

arithmetic_analysis/newton_raphson.py
|  40| ••••print(f"The•root•of•x**2•-•5*x•+•2•=•0•is•{newton_raphson('x**2•-•5*x•+•2',•0.4)}")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/kahns_algorithm_topo.py
|   3| ••••Kahn's•Algorithm•is•used•to•find•Topological•ordering•of•Directed•Acyclic•Graph
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_686/sol1.py
|  29| ••••But•we•require•only•the•decimal•part•to•determine•whether•the•power•starts•with•123.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

project_euler/problem_686/sol1.py
|  58| ••••So•if•number•=•10,•then•solution•returns•2515•as•we•observe•from•above•series.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_686/sol1.py
|  65| ••••We•use•1.23•and•not•12.3•or•123,•because•log(1.23)•yields•only•decimal•value
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_686/sol1.py
|  87| ••••Hence•to•optimize•the•algorithm•we•will•increment•by•196•or•93•depending•upon•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_686/sol1.py
| 104| ••••Which•is•greater•than•upperbound•hence•we•increment•by•93.•Now•iterator•is•1349.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_686/sol1.py
| 112| ••••which•implies•that•the•power•is•a•number•which•will•lead•to•123•as•starting•digits.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_686/sol1.py
| 113| ••••2)•If•we•find•a•power,•whose•log_difference()•is•greater•than•or•equal•upperbound,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

conversions/hexadecimal_to_decimal.py
|   1| hex_table•=•{hex(i)[2:]:•i•for•i•in•range(16)}••#•Use•[:2]•to•strip•off•the•leading•'0x'
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

project_euler/problem_125/sol1.py
|  12| Find•the•sum•of•all•the•numbers•less•than•10^8•that•are•both•palindromic•and•can
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

compression/lempel_ziv_decompress.py
|   2| ••••One•of•the•several•implementations•of•Lempel–Ziv–Welch•decompression•algorithm
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

compression/lempel_ziv_decompress.py
|  59| ••••Writes•given•to_write•string•(should•only•consist•of•0's•and•1's)•as•bytes•in•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

compression/lempel_ziv_decompress.py
|  66| ••••••••••••••••to_write[i•:•i•+•byte_length]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

compression/lempel_ziv_decompress.py
|  96| ••••data_bits•=•data_bits[counter•+•1•:]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

compression/lempel_ziv_decompress.py
| 102| ••••Reads•source•file,•decompresses•it•and•writes•the•result•in•destination•file
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/eulerian_path_and_circuit_for_undirected_graph.py
|  36| ••••visited_edge•=•[[False•for•_•in•range(max_node•+•1)]•for•_•in•range(max_node•+•1)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_027/sol1.py
|  12| The•incredible•formula••n2•−•79n•+•1601•was•discovered,•which•produces•80•primes
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_027/sol1.py
|  13| for•the•consecutive•values•n•=•0•to•79.•The•product•of•the•coefficients,•−79•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_027/sol1.py
|  18| Find•the•product•of•the•coefficients,•a•and•b,•for•the•quadratic•expression•that
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_027/sol1.py
|  19| produces•the•maximum•number•of•primes•for•consecutive•values•of•n,•starting•with
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/points_are_collinear_3d.py
|   5| and•the•area•of•that•triangle•can•determine•if•the•three•points•are•collinear•or•not.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/points_are_collinear_3d.py
|  11| The•length•of•the•cross•vector•is•numerically•equal•to•the•area•of•a•parallelogram.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

maths/points_are_collinear_3d.py
|  13| Finally,•the•area•of•the•triangle•is•equal•to•half•of•the•area•of•the•parallelogram.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/points_are_collinear_3d.py
|  24| but•we•will•decide•directly•from•the•vector•whether•it•is•equal•to•(0,•0,•0)•or•not.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/points_are_collinear_3d.py
|  56| ••••I•used•determinant•of•2x2•to•get•the•determinant•of•the•3x3•matrix•in•the•process.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/points_are_collinear_3d.py
|  84| ••••In•other•applications,•we•can•return•a•float•that•represents•the•collinearity•ratio.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/points_are_collinear_3d.py
|  96| def•are_collinear(a:•Point3d,•b:•Point3d,•c:•Point3d,•accuracy:•int•=•10)•->•bool:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/points_are_collinear_3d.py
| 108| ••••...•••••••••••••••(-2.186788107953106,•-9.24561398001649,•7.141509524846482),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/points_are_collinear_3d.py
| 109| ••••...•••••••••••••••(1.530169574640268,•-2.447927606600034,•3.343487096469054))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/points_are_collinear_3d.py
| 112| ••••...•••••••••••••••(6.200213806439997,•-4.930157614926678,•-4.482371908289856),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/points_are_collinear_3d.py
| 113| ••••...•••••••••••••••(-4.085171149525941,•-2.459889509029438,•4.354787180795383))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/points_are_collinear_3d.py
| 115| ••••>>>•are_collinear((2.399001826862445,•-2.452009976680793,•4.464656666157666),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/points_are_collinear_3d.py
| 116| ••••...•••••••••••••••(-3.682816335934376,•5.753788986533145,•9.490993909044244),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/points_are_collinear_3d.py
| 119| ••••>>>•are_collinear((1.875375340689544,•-7.268426006071538,•7.358196269835993),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/points_are_collinear_3d.py
| 120| ••••...•••••••••••••••(-3.546599383667157,•-4.630005261513976,•3.208784032924246),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

digital_image_processing/filters/median_filter.py
|  21| ••••••••••••kernel•=•ravel(gray_img[i•-•bd•:•i•+•bd•+•1,•j•-•bd•:•j•+•bd•+•1])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/filters/median_filter.py
|  21| ••••••••••••kernel•=•ravel(gray_img[i•-•bd•:•i•+•bd•+•1,•j•-•bd•:•j•+•bd•+•1])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

project_euler/problem_039/sol1.py
|  28| ••••triplets:•typing.Counter[int]•=•Counter()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

computer_vision/flip_augmentation.py
|  29| ••••new_images,•new_annos,•paths•=•update_image_and_anno(img_paths,•annos,•FLIP_TYPE)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

computer_vision/flip_augmentation.py
| 106| ••••••••••••••••new_annos.append([bbox[0],•x_center_new,•bbox[2],•bbox[3],•bbox[4]])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

computer_vision/flip_augmentation.py
| 111| ••••••••••••••••new_annos.append([bbox[0],•bbox[1],•y_center_new,•bbox[3],•bbox[4]])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_089/sol1.py
|   4| For•a•number•written•in•Roman•numerals•to•be•considered•valid•there•are•basic•rules
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_089/sol1.py
|   5| which•must•be•followed.•Even•though•the•rules•allow•some•numbers•to•be•expressed•in
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_089/sol1.py
|   8| For•example,•it•would•appear•that•there•are•at•least•six•ways•of•writing•the•number
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_089/sol1.py
|  18| However,•according•to•the•rules•only•XIIIIII•and•XVI•are•valid,•and•the•last•example
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_089/sol1.py
|  19| is•considered•to•be•the•most•efficient,•as•it•uses•the•least•number•of•numerals.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_089/sol1.py
|  21| The•11K•text•file,•roman.txt•(right•click•and•'Save•Link/Target•As...'),•contains•one
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_089/sol1.py
|  22| thousand•numbers•written•in•valid,•but•not•necessarily•minimal,•Roman•numerals;•see
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_089/sol1.py
|  25| Find•the•number•of•characters•saved•by•writing•each•of•these•in•their•minimal•form.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_089/sol1.py
|  27| Note:•You•can•assume•that•all•the•Roman•numerals•in•the•file•contain•no•more•than•four
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/number_of_digits.py
|  95| ••••••••timeit("z.num_digits_faster(z.small_num)",•setup="import•__main__•as•z"),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/number_of_digits.py
| 113| ••••••••timeit("z.num_digits_fast(z.medium_num)",•setup="import•__main__•as•z"),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/number_of_digits.py
| 121| ••••••••timeit("z.num_digits_faster(z.medium_num)",•setup="import•__main__•as•z"),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/number_of_digits.py
| 147| ••••••••timeit("z.num_digits_faster(z.large_num)",•setup="import•__main__•as•z"),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

matrix/tests/test_matrix_operation.py
|   4| If•running•from•PyCharm•you•can•place•the•following•line•in•"Additional•Arguments"•for
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

matrix/tests/test_matrix_operation.py
|  36| ••••("mat1",•"mat2"),•[(mat_a,•mat_b),•(mat_c,•mat_d),•(mat_d,•mat_e),•(mat_f,•mat_h)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

matrix/tests/test_matrix_operation.py
|  50| ••••••••••••logger.info(f"\n\t{test_addition.__name__}•with•different•matrix•dims")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

matrix/tests/test_matrix_operation.py
|  56| ••••("mat1",•"mat2"),•[(mat_a,•mat_b),•(mat_c,•mat_d),•(mat_d,•mat_e),•(mat_f,•mat_h)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

matrix/tests/test_matrix_operation.py
|  70| ••••••••••••logger.info(f"\n\t{test_subtraction.__name__}•with•different•matrix•dims")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

matrix/tests/test_matrix_operation.py
|  76| ••••("mat1",•"mat2"),•[(mat_a,•mat_b),•(mat_c,•mat_d),•(mat_d,•mat_e),•(mat_f,•mat_h)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

matrix/tests/test_matrix_operation.py
|  84| ••••••••logger.info(f"\n\t{test_multiplication.__name__}•meets•dim•requirements")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

matrix/tests/test_matrix_operation.py
|  91| ••••••••••••••••f"\n\t{test_multiplication.__name__}•does•not•meet•dim•requirements"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/check_cycle.py
|  15| ••••visited:•set[int]•=•set()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/check_cycle.py
|  16| ••••#•To•detect•a•back•edge,•keep•track•of•vertices•currently•in•the•recursion•stack
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/check_cycle.py
|  17| ••••rec_stk:•set[int]•=•set()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/check_cycle.py
|  25| def•depth_first_search(graph:•dict,•vertex:•int,•visited:•set,•rec_stk:•set)•->•bool:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

web_programming/fetch_anime_and_play.py
|  91| ••••response•=•requests.get(url=request_url,•headers={"UserAgent":•UserAgent().chrome})
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

web_programming/fetch_anime_and_play.py
| 106| ••••••••••••••••••••••••"title":•episode.find("div",•{"class":•"name"}).text.replace(
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

web_programming/fetch_anime_and_play.py
| 170| ••••••••anime_choice•=•int(input("\nPlease•choose•from•the•following•list:•").strip())
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

web_programming/fetch_anime_and_play.py
| 182| ••••••••••••episode_choice•=•int(input("\nChoose•an•episode•by•serial•no:•").strip())
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

web_programming/fetch_anime_and_play.py
| 186| ••••••••••••episode_url,•download_url•=•get_anime_episode(chosen_episode["url"])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_109/sol1.py
|   6| lands•in.•A•dart•landing•outside•the•red/green•outer•ring•scores•zero.•The•black
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_109/sol1.py
|   7| and•cream•regions•inside•this•ring•represent•single•scores.•However,•the•red/green
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_109/sol1.py
|  10| At•the•centre•of•the•board•are•two•concentric•circles•called•the•bull•region,•or
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_109/sol1.py
|  14| There•are•many•variations•of•rules•but•in•the•most•popular•game•the•players•will
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_109/sol1.py
|  15| begin•with•a•score•301•or•501•and•the•first•player•to•reduce•their•running•total
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_109/sol1.py
|  16| to•zero•is•a•winner.•However,•it•is•normal•to•play•a•"doubles•out"•system,•which
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_109/sol1.py
|  18| centre•of•the•board)•on•their•final•dart•to•win;•any•other•dart•that•would•reduce
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_109/sol1.py
|  22| When•a•player•is•able•to•finish•on•their•current•score•it•is•called•a•"checkout"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_109/sol1.py
|  42| In•addition•we•shall•not•include•misses•in•considering•combinations;•for•example,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_109/sol1.py
|  51| ••••We•then•iterate•through•the•doubles,•followed•by•the•possible•2•following•throws.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_109/sol1.py
|  52| ••••If•the•total•of•these•three•darts•is•less•than•the•given•limit,•we•increment
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_109/sol1.py
|  68| ••••singles:•list[int]•=•[x•for•x•in•range(1,•21)]•+•[25]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_109/sol1.py
|  69| ••••doubles:•list[int]•=•[2•*•x•for•x•in•range(1,•21)]•+•[50]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_109/sol1.py
|  70| ••••triples:•list[int]•=•[3•*•x•for•x•in•range(1,•21)]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_109/sol1.py
|  71| ••••all_values:•list[int]•=•singles•+•doubles•+•triples•+•[0]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_109/sol1.py
|  73| ••••num_checkouts:•int•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_109/sol1.py
|  74| ••••double:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_109/sol1.py
|  75| ••••throw1:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_109/sol1.py
|  76| ••••throw2:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_109/sol1.py
|  77| ••••checkout_total:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/gamma_recursive.py
|   5| Python's•Standard•Library•math.gamma()•function•overflows•around•gamma(171.624).
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/gamma_recursive.py
|  13| ••••where•num•is•either•an•integer•(1,•2,•3..)•or•a•half-integer•(0.5,•1.5,•2.5•...).
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/gamma_recursive.py
|  25| ••••>>>•all(isclose(gamma(num),•math_gamma(num))•for•num•in•(0.5,•2,•3.5,•171.5))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/k_nearest_neighbours.py
|  30| ••••k•closest•points•are•found•(ranked•in•ascending•order•of•euclidean•distance)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

web_programming/get_top_hn_posts.py
|   7| ••••url•=•f"https://hacker-news.firebaseio.com/v0/item/{story_id}.json?print=pretty"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

web_programming/get_top_hn_posts.py
|  13| ••••Get•the•top•max_stories•posts•from•HackerNews•-•https://news.ycombinator.com/
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/pythagoras.py
|   1| """Uses•Pythagoras•theorem•to•calculate•the•distance•between•two•points•in•space."""
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/pythagoras.py
|  17| ••••return•math.sqrt(abs((b.x•-•a.x)•**•2•+•(b.y•-•a.y)•**•2•+•(b.z•-•a.z)•**•2))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/pythagoras.py
|  24| ••••>>>•print(f"Distance•from•{point1}•to•{point2}•is•{distance(point1,•point2)}")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_104/sol.py
|   7| It•turns•out•that•F541,•which•contains•113•digits,•is•the•first•Fibonacci•number
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_104/sol.py
|   8| for•which•the•last•nine•digits•are•1-9•pandigital•(contain•all•the•digits•1•to•9,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_104/sol.py
|   9| but•not•necessarily•in•order).•And•F2749,•which•contains•575•digits,•is•the•first
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_104/sol.py
| 100| ••••Outputs•the•answer•is•the•least•Fibonacci•number•pandigital•from•both•sides.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

other/scoring_algorithm.py
|  36| ••••>>>•procentual_proximity([[20,•60,•2012],[23,•90,•2015],[22,•50,•2011]],•[0,•0,•1])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

other/scoring_algorithm.py
|  37| ••••[[20,•60,•2012,•2.0],•[23,•90,•2015,•1.0],•[22,•50,•2011,•1.3333333333333335]]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

other/scoring_algorithm.py
|  41| ••••data_lists:•list[list[float]]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/scoring_algorithm.py
|  48| ••••score_lists:•list[list[float]]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/scoring_algorithm.py
|  54| ••••••••score:•list[float]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/scoring_algorithm.py
|  77| ••••final_scores:•list[float]•=•[0•for•i•in•range(len(score_lists[0]))]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

web_programming/recaptcha_verification.py
|   2| Recaptcha•is•a•free•captcha•service•offered•by•Google•in•order•to•secure•websites•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

web_programming/recaptcha_verification.py
|   3| forms.••At•https://www.google.com/recaptcha/admin/create•you•can•create•new•recaptcha
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

web_programming/recaptcha_verification.py
|   6| When•you•create•a•recaptcha•key,•your•will•get•two•separate•keys:•ClientKey•&•SecretKey.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

web_programming/recaptcha_verification.py
|  31| Below•a•Django•function•for•the•views.py•file•contains•a•login•form•for•demonstrating
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

web_programming/recaptcha_verification.py
|  58| ••••response•=•requests.post(url,•data={"secret":•secret_key,•"response":•client_key})
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

web_programming/recaptcha_verification.py
|  62| ••••••••user_in_database•=•authenticate(request,•username=username,•password=password)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

arithmetic_analysis/newton_method.py
|  37| ••••••••••••next_guess•=•prev_guess•-•function(prev_guess)•/•derivative(prev_guess)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

graphs/minimum_spanning_tree_prims.py
|  74| ••••Nbr_TV•=•[-1•for•i•in•range(len(l))]••#•Neighboring•Tree•Vertex•of•selected•vertex
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/minimum_spanning_tree_prims.py
|  75| ••••#•Minimum•Distance•of•explored•vertex•with•neighboring•vertex•of•partial•tree
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphs/minimum_spanning_tree_prims.py
|  77| ••••Distance_TV•=•[]••#•Heap•of•Distance•of•vertices•from•their•neighboring•vertex
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/minimum_spanning_tree_prims.py
| 100| ••••••••••••••••if•visited[v[0]]•==•0•and•v[1]•<•Distance_TV[get_position(v[0])]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphs/minimum_spanning_tree_prims.py
| 102| ••••••••••••••••••••bottom_to_top(v[1],•get_position(v[0]),•Distance_TV,•Positions)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

graphs/minimum_spanning_tree_prims.py
| 113| ••••••••l•=•[int(x)•for•x•in•input().strip().split()]••#•noqa:•E741
|    | [NORMAL] PycodestyleBear (E741):
|    | E741 ambiguous variable name 'l''

project_euler/problem_092/sol1.py
|   9| Therefore•any•chain•that•arrives•at•1•or•89•will•become•stuck•in•an•endless•loop.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_092/sol1.py
|  10| What•is•most•amazing•is•that•EVERY•starting•number•will•eventually•arrive•at•1•or•89.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_092/sol1.py
|  44| ••••The•function•generates•the•chain•of•numbers•until•the•next•number•is•1•or•89.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_092/sol1.py
|  68| ••••The•function•returns•the•number•of•integers•that•end•up•being•89•in•each•chain.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

other/sdes.py
|  47| ••••l•=•apply_sbox(s0,•temp[:4])••#•noqa:•E741
|    | [NORMAL] PycodestyleBear (E741):
|    | E741 ambiguous variable name 'l''

other/sdes.py
|  49| ••••l•=•"0"•*•(2•-•len(l))•+•l••#•noqa:•E741
|    | [NORMAL] PycodestyleBear (E741):
|    | E741 ambiguous variable name 'l''

graphs/matching_min_vertex_cover.py
|   4| •••••••••••••••Matching•Approach.•Uses•graphs•represented•with•an•adjacency•list
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_112/sol1.py
|   4| Working•from•left-to-right•if•no•digit•is•exceeded•by•the•digit•to•its•left•it•is
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_112/sol1.py
|   6| Similarly•if•no•digit•is•exceeded•by•the•digit•to•its•right•it•is•called•a•decreasing
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_112/sol1.py
|   8| We•shall•call•a•positive•integer•that•is•neither•increasing•nor•decreasing•a•"bouncy"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_112/sol1.py
|  10| Clearly•there•cannot•be•any•bouncy•numbers•below•one-hundred,•but•just•over•half•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_112/sol1.py
|  11| the•numbers•below•one-thousand•(525)•are•bouncy.•In•fact,•the•least•number•for•which
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_112/sol1.py
|  13| Surprisingly,•bouncy•numbers•become•more•and•more•common•and•by•the•time•we•reach
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_112/sol1.py
|  16| Find•the•least•number•for•which•the•proportion•of•bouncy•numbers•is•exactly•99%.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/double_factorial_recursive.py
|  10| ••••>>>•all(double_factorial(i)•==•math.prod(range(i,•0,•-2))•for•i•in•range(20))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

arithmetic_analysis/in_static_equilibrium.py
|  53| ••••moments:•NDArray[float64]•=•cross(location,•forces)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

arithmetic_analysis/in_static_equilibrium.py
|  54| ••••sum_moments:•float•=•sum(moments)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

arithmetic_analysis/in_static_equilibrium.py
|  68| ••••location:•NDArray[float64]•=•array([[0,•0],•[0,•0],•[0,•0]])
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

web_programming/instagram_pic.py
|  10| ••••#•The•image•URL•is•in•the•content•field•of•the•first•meta•tag•with•property•og:image
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

project_euler/problem_099/sol1.py
|   4| Comparing•two•numbers•written•in•index•form•like•2'11•and•3'7•is•not•difficult,•as•any
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_099/sol1.py
|   7| However,•confirming•that•632382^518061•>•519432^525806•would•be•much•more•difficult,•as
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_099/sol1.py
|  10| Using•base_exp.txt,•a•22K•text•file•containing•one•thousand•lines•with•a•base/exponent
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_099/sol1.py
|  11| pair•on•each•line,•determine•which•line•number•has•the•greatest•numerical•value.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_099/sol1.py
|  13| NOTE:•The•first•two•lines•in•the•file•represent•the•numbers•in•the•example•given•above.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_099/sol1.py
|  25| ••••largest:•float•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_099/sol1.py
|  27| ••••for•i,•line•in•enumerate(open(os.path.join(os.path.dirname(__file__),•data_file))):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_055/sol1.py
|  15| reverse•and•add•process•is•called•a•Lychrel•number.•Due•to•the•theoretical•nature
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_055/sol1.py
|  16| of•these•numbers,•and•for•the•purpose•of•this•problem,•we•shall•assume•that•a•number
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_055/sol1.py
|  17| is•Lychrel•until•proven•otherwise.•In•addition•you•are•given•that•for•every•number
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_055/sol1.py
|  19| iterations,•or,•(ii)•no•one,•with•all•the•computing•power•that•exists,•has•managed
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_055/sol1.py
|  20| so•far•to•map•it•to•a•palindrome.•In•fact,•10677•is•the•first•number•to•be•shown
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_055/sol1.py
|  24| Surprisingly,•there•are•palindromic•numbers•that•are•themselves•Lychrel•numbers;
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

sorts/patience_sort.py
|  48| ••••stacks:•list[Stack]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

machine_learning/logistic_regression.py
|  43| #•here•alpha•is•the•learning•rate,•X•is•the•feature•matrix,y•is•the•target•matrix
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/logistic_regression.py
|  56| ••••••••••••print(f"loss:•{J}•\t")••#•printing•the•loss•after•every•100•iterations
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/logistic_regression.py
|  74| ••••••••)••#•predicting•the•value•of•probability•from•the•logistic•regression•algorithm
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/logistic_regression.py
|  81| ••••(xx1,•xx2)•=•np.meshgrid(np.linspace(x1_min,•x1_max),•np.linspace(x2_min,•x2_max))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

ciphers/atbash.py
|  34| ••••letters_reversed•=•string.ascii_lowercase[::-1]•+•string.ascii_uppercase[::-1]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

ciphers/atbash.py
|  36| ••••••••letters_reversed[letters.index(c)]•if•c•in•letters•else•c•for•c•in•sequence
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

ciphers/atbash.py
|  49| ••••••••••••setup="from•string•import•printable•;•from•__main__•import•atbash_slow",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

computer_vision/horn_schunck.py
|   2| ••••The•Horn-Schunck•method•estimates•the•optical•flow•for•every•single•pixel•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

computer_vision/horn_schunck.py
|  22| ••••Warps•the•pixels•of•an•image•into•a•new•image•using•the•horizontal•and•vertical
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

computer_vision/horn_schunck.py
|  45| ••••••••np.meshgrid(np.arange(0,•image.shape[1]),•np.arange(0,•image.shape[0])),•2
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

computer_vision/horn_schunck.py
|  96| ••••#•Prepare•kernels•for•the•calculation•of•the•derivatives•and•the•average•velocity
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

computer_vision/horn_schunck.py
| 107| ••••••••derivative_x•=•convolve(warped_image,•kernel_x)•+•convolve(image1,•kernel_x)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

computer_vision/horn_schunck.py
| 108| ••••••••derivative_y•=•convolve(warped_image,•kernel_y)•+•convolve(image1,•kernel_y)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

computer_vision/horn_schunck.py
| 109| ••••••••derivative_t•=•convolve(warped_image,•kernel_t)•+•convolve(image1,•-kernel_t)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

conversions/length_conversion.py
|   3| Available•Units:-•Metre,Kilometre,Feet,Inch,Centimeter,Yard,Foot,Mile,Millimeter
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

conversions/length_conversion.py
| 116| ••••return•value•*•METRIC_CONVERSION[new_from].from_•*•METRIC_CONVERSION[new_to].to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_072/sol2.py
|   4| Consider•the•fraction,•n/d,•where•n•and•d•are•positive•integers.•If•n<d•and•HCF(n,d)=1,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_072/sol2.py
|   7| If•we•list•the•set•of•reduced•proper•fractions•for•d•≤•8•in•ascending•order•of•size,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_072/sol2.py
|  22| ••••Return•the•number•of•reduced•proper•fractions•with•denominator•less•than•limit.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

data_structures/binary_tree/number_of_possible_binary_trees.py
|   2| Hey,•we•are•going•to•find•an•exciting•number•called•Catalan•number•which•is•use•to•find
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/binary_tree/number_of_possible_binary_trees.py
|   3| the•number•of•possible•binary•search•trees•from•tree•of•a•given•number•of•nodes.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

data_structures/binary_tree/number_of_possible_binary_trees.py
|  44| ••••We•can•find•Catalan•number•many•ways•but•here•we•use•Binomial•Coefficient•because•it
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

dynamic_programming/floyd_warshall.py
|  21| ••••••••••••••••••••self.dp[i][j]•=•min(self.dp[i][j],•self.dp[i][k]•+•self.dp[k][j])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/breadth_first_search.py
|  11| ••••••••self.vertices:•dict[int,•list[int]]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/breadth_first_search.py
|  56| ••••••••queue:•Queue•=•Queue()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/breadth_first_search.py
|  65| ••••••••••••#•loop•through•all•adjacent•vertex•and•enqueue•it•if•not•yet•visited
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/greedy_coin_change.py
|  47| ••••>>>•find_minimum_change([1,•5,•10,•20,•50,•100,•200,•500,•1000,2000],•18745)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/greedy_coin_change.py
|  81| ••••••••input("Do•you•want•to•enter•your•denominations•?•(yY/n):•").strip().lower()
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

maths/greedy_coin_change.py
|  84| ••••••••n•=•int(input("Enter•the•number•of•denominations•you•want•to•add:•").strip())
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/greedy_coin_change.py
|  88| ••••••••value•=•input("Enter•the•change•you•want•to•make•in•Indian•Currency:•").strip()
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

searches/binary_tree_traversal.py
|  23| ••••q:•queue.Queue•=•queue.Queue()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

searches/binary_tree_traversal.py
| 127| ••••q:•queue.Queue•=•queue.Queue()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

searches/binary_tree_traversal.py
| 157| ••••q:•queue.Queue•=•queue.Queue()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

searches/binary_tree_traversal.py
| 191| ••••stack:•list[TreeNode]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

searches/binary_tree_traversal.py
| 221| ••••stack:•list[TreeNode]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

searches/binary_tree_traversal.py
| 252| ••••while•stack1:••#•to•find•the•reversed•order•of•post•order,•store•it•in•stack2
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/radians.py
|  19| ••••>>>•all(abs(radians(i)-math_radians(i))•<=•0.00000001••for•i•in•range(-2,•361))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

maths/check_polygon.py
|  33| ••••••••raise•ValueError("Monogons•and•Digons•are•not•polygons•in•the•Euclidean•space")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_113/sol1.py
|   4| Working•from•left-to-right•if•no•digit•is•exceeded•by•the•digit•to•its•left•it•is
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_113/sol1.py
|   7| Similarly•if•no•digit•is•exceeded•by•the•digit•to•its•right•it•is•called•a•decreasing
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_113/sol1.py
|  13| As•n•increases,•the•proportion•of•bouncy•numbers•below•n•increases•such•that•there
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

strings/check_anagrams.py
|  33| ••••count:•DefaultDict[str,•int]•=•defaultdict(int)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/simpson_rule.py
|   2| Numerical•integration•or•quadrature•for•a•smooth•function•f•with•known•values•at•x_i
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

scheduling/multi_level_feedback_queue.py
|   5| ••••def•__init__(self,•process_name:•str,•arrival_time:•int,•burst_time:•int)•->•None:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

scheduling/multi_level_feedback_queue.py
|  21| ••••The•first•Queue(0)•to•last•second•Queue(N-2)•of•MLFQ•have•Round•Robin•Algorithm
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

scheduling/multi_level_feedback_queue.py
|  41| ••••••••self.finish_queue:•deque[Process]•=•deque()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

scheduling/multi_level_feedback_queue.py
| 121| ••••••••>>>•finish_queue,•ready_queue•=•mlfq.round_robin(deque([P1,•P2,•P3,•P4]),•17)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

scheduling/multi_level_feedback_queue.py
| 150| ••••def•first_come_first_served(self,•ready_queue:•deque[Process])•->•deque[Process]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

scheduling/multi_level_feedback_queue.py
| 164| ••••••••finished:•deque[Process]•=•deque()••#•sequence•deque•of•finished•process
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

scheduling/multi_level_feedback_queue.py
| 164| ••••••••finished:•deque[Process]•=•deque()••#•sequence•deque•of•finished•process
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

scheduling/multi_level_feedback_queue.py
| 168| ••••••••••••#•if•process's•arrival•time•is•later•than•current•time,•update•current•time
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

scheduling/multi_level_feedback_queue.py
| 185| ••••••••self.finish_queue.extend(finished)••#•add•finished•process•to•finish•queue
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

scheduling/multi_level_feedback_queue.py
| 196| ••••••••If•the•process•consume•CPU•up•to•time_slice,•it•will•go•back•to•ready•queue
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

scheduling/multi_level_feedback_queue.py
| 206| ••••••••finished:•deque[Process]•=•deque()••#•sequence•deque•of•terminated•process
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

scheduling/multi_level_feedback_queue.py
| 206| ••••••••finished:•deque[Process]•=•deque()••#•sequence•deque•of•terminated•process
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

scheduling/multi_level_feedback_queue.py
| 211| ••••••••••••#•if•process's•arrival•time•is•later•than•current•time,•update•current•time
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

scheduling/multi_level_feedback_queue.py
| 225| ••••••••••••••••#•locate•the•process•behind•the•queue•because•it•is•not•finished
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

scheduling/multi_level_feedback_queue.py
| 239| ••••••••self.finish_queue.extend(finished)••#•add•finished•process•to•finish•queue
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

backtracking/knight_tour.py
|   8| ••••Find•all•the•valid•positions•a•knight•can•move•to•from•the•current•position.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

backtracking/knight_tour.py
|  37| ••••Check•if•the•board•(matrix)•has•been•completely•filled•with•non-zero•values.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

backtracking/knight_tour.py
|  94| ••••raise•ValueError(f"Open•Kight•Tour•cannot•be•performed•on•a•board•of•size•{n}")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

conversions/binary_to_octal.py
|  30| ••••••••bin_string[index•:•index•+•3]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

data_structures/binary_tree/lazy_segment_tree.py
|  49| ••••••••••••••••self.segment_tree[self.left(idx)],•self.segment_tree[self.right(idx)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/binary_tree/lazy_segment_tree.py
|  53| ••••••••self,•idx:•int,•left_element:•int,•right_element:•int,•a:•int,•b:•int,•val:•int
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/binary_tree/lazy_segment_tree.py
|  56| ••••••••update•with•O(lg•n)•(Normal•segment•tree•without•lazy•update•will•take•O(nlg•n)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/binary_tree/lazy_segment_tree.py
|  84| ••••••••••••self.segment_tree[self.left(idx)],•self.segment_tree[self.right(idx)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/binary_tree/lazy_segment_tree.py
| 122| ••••••••return•str([self.query(1,•1,•self.size,•i,•i)•for•i•in•range(1,•self.size•+•1)])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

project_euler/problem_068/sol1.py
|  21| For•example,•the•above•solution•can•be•described•by•the•set:•4,3,2;•6,2,1;•5,1,3.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_068/sol1.py
|  23| It•is•possible•to•complete•the•ring•with•four•different•totals:•9,•10,•11,•and•12.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_068/sol1.py
| 107| ••••Take•a•list,•and•check•if•the•sum•of•each•3•numbers•chunk•is•equal•to•the•same•total
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

project_euler/problem_068/sol1.py
| 122| ••••••••raise•ValueError("a•gon•ring•should•have•a•length•that•is•a•multiple•of•3")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_068/sol1.py
| 129| ••••return•all(sum(numbers[i•:•i•+•3])•==•total•for•i•in•range(3,•len(numbers),•3))
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

project_euler/problem_068/sol1.py
| 129| ••••return•all(sum(numbers[i•:•i•+•3])•==•total•for•i•in•range(3,•len(numbers),•3))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

sorts/gnome_sort.py
|   5| If•order•is•not•respected,•it•swaps•element•backward•until•order•is•respected•with
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

sorts/gnome_sort.py
|  20| ••••Take•some•mutable•ordered•collection•with•heterogeneous•comparable•items•inside•as
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

strings/detecting_english_programmatically.py
|   9| ••••english_words:•dict[str,•None]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/binary_search_tree_recursive.py
|  20| ••••••••self.left:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/binary_search_tree_recursive.py
|  21| ••••••••self.right:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/binary_search_tree_recursive.py
|  26| ••••••••self.root:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/binary_search_tree_recursive.py
|  71| ••••def•_put(self,•node:•Node•|•None,•label:•int,•parent:•Node•|•None•=•None)•->•Node:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

dynamic_programming/matrix_chain_order.py
|  23| ••••••••••••••••••••Matrix[a][c]•+•Matrix[c•+•1][b]•+•array[a•-•1]•*•array[c]•*•array[b]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

hashes/djb2.py
|   2| This•algorithm•(k=33)•was•first•reported•by•Dan•Bernstein•many•years•ago•in•comp.lang.c
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/hashing/hash_table.py
|  64| ••••••••self.values•=•[None]•*•self.size_table••#•hell's•pointers•D:•don't•DRY•;/
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/series/p_series.py
|  16| def•p_series(nth_term:•int•|•float•|•str,•power:•int•|•float•|•str)•->•list[str]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/series/p_series.py
|  38| ••••series:•list[str]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/combinations.py
|  37| ••••••••raise•ValueError("Please•enter•positive•integers•for•n•and•k•where•n•>=•k")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

graphs/dinic.py
|  75| Now•we•add•the•vertices•next•to•the•font•in•the•font•with•1•capacity•in•this•edge
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphs/dinic.py
|  81| We•will•do•the•same•thing•for•the•vertices•near•the•sink,•but•from•vertex•to•sink
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/ugly_numbers.py
|   3| 1,•2,•3,•4,•5,•6,•8,•9,•10,•12,•15,•…•shows•the•first•11•ugly•numbers.•By•convention,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/linear_search.py
|  15| ••••:param•sequence:•a•collection•with•comparable•items•(as•sorted•items•not•required
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/linear_search.py
|  40| ••••:param•sequence:•a•collection•with•comparable•items•(as•sorted•items•not•required
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/linear_search.py
|  72| ••••target•=•int(input("Enter•a•single•number•to•be•found•in•the•list:\n").strip())
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

digital_image_processing/sepia.py
|  22| ••••••••"""Helper•function•to•normalize•R/G/B•value•->•return•255•if•value•>•255"""
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

digital_image_processing/sepia.py
|  40| ••••••••percentage:•imread("image_data/lena.jpg",•1)•for•percentage•in•(10,•20,•30,•40)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

hashes/hamming_code.py
|  27| ••••••••as•an•error.•This•serves•to•check•whether•the•code•is•working•correctly.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

hashes/hamming_code.py
|  67| ••••return•n.to_bytes((n.bit_length()•+•7)•//•8,•"big").decode(encoding,•errors)•or•"\0"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

hashes/hamming_code.py
|  79| ••••['1',•'1',•'1',•'1',•'0',•'1',•'0',•'0',•'1',•'0',•'1',•'1',•'1',•'1',•'1',•'1']
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/krishnamurthy_number.py
|  48| ••••••••f"{number}•is•{''•if•krishnamurthy(number)•else•'not•'}a•Krishnamurthy•Number."
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/deterministic_miller_rabin.py
|  21| ••••••••Whether•or•not•to•test•n•above•the•upper•bound•of•the•deterministic•test.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

web_programming/slack_message.py
|   8| ••••response•=•requests.post(slack_url,•json={"text":•message_body},•headers=headers)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

web_programming/slack_message.py
|  17| ••••#•Set•the•slack•url•to•the•one•provided•by•Slack•when•you•create•the•webhook•at
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

sorts/slowsort.py
|  14| def•slowsort(sequence:•list,•start:•int•|•None•=•None,•end:•int•|•None•=•None)•->•None:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/breadth_first_search_2.py
|  35| ••••queue:•Queue•=•Queue()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

ciphers/base85.py
|  26| ••••#•a85decode•the•input•into•bytes•and•decode•that•into•a•human•readable•string
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/average_mode.py
|  26| ••••return•sorted({input_list[i]•for•i,•value•in•enumerate(result)•if•value•==•y})
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/kahns_algorithm_long.py
|  30| graph•=•{0:•[2,•3,•4],•1:•[2,•7],•2:•[5],•3:•[5,•7],•4:•[7],•5:•[6],•6:•[7],•7:•[]}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

maths/3n_plus_1.py
|  31| ••••assert•n31(11)•==•([11,•34,•17,•52,•26,•13,•40,•20,•10,•5,•16,•8,•4,•2,•1],•15)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

dynamic_programming/rod_cutting.py
|   7| obtainable•from•a•rod•of•length•``n``•given•a•list•of•prices•for•each•integral•piece
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

dynamic_programming/rod_cutting.py
|   8| of•the•rod.•The•maximum•revenue•can•thus•be•obtained•by•cutting•the•rod•and•selling•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

dynamic_programming/rod_cutting.py
|   9| pieces•separately•or•not•cutting•it•at•all•if•the•price•of•it•is•the•maximum•obtainable.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

dynamic_programming/rod_cutting.py
|  16| ••••Solves•the•rod-cutting•problem•via•naively•without•using•the•benefit•of•dynamic
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

dynamic_programming/rod_cutting.py
|  30| ••••The•maximum•revenue•obtainable•for•a•rod•of•length•n•given•the•list•of•prices
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

dynamic_programming/rod_cutting.py
|  69| ••••For•convenience•and•because•Python's•lists•using•0-indexing,•length(max_rev)•=
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

dynamic_programming/rod_cutting.py
|  74| ••••The•maximum•revenue•obtainable•for•a•rod•of•length•n•given•the•list•of•prices
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

dynamic_programming/rod_cutting.py
|  91| ••••Constructs•a•top-down•dynamic•programming•solution•for•the•rod-cutting•problem
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

dynamic_programming/rod_cutting.py
| 106| ••••The•maximum•revenue•obtainable•for•a•rod•of•length•n•given•the•list•of•prices
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

dynamic_programming/rod_cutting.py
| 118| ••••••••••••••••prices[i•-•1]•+•_top_down_cut_rod_recursive(n•-•i,•prices,•max_rev),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

dynamic_programming/rod_cutting.py
| 128| ••••Constructs•a•bottom-up•dynamic•programming•solution•for•the•rod-cutting•problem
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

dynamic_programming/rod_cutting.py
| 152| ••••#•length(max_rev)•=•n•+•1,•to•accommodate•for•the•revenue•obtainable•from•a•rod•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

dynamic_programming/rod_cutting.py
| 176| ••••if•n•is•negative•or•there•are•fewer•items•in•the•price•list•than•the•length•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/matrix_exponentiation.py
|   6| Matrix•Exponentiation•is•a•technique•to•solve•linear•recurrences•in•logarithmic•time.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/matrix_exponentiation.py
|  15| ••••••••if•isinstance(arg,•list):••#•Initializes•a•matrix•identical•to•the•one•provided.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/matrix_exponentiation.py
|  18| ••••••••else:••#•Initializes•a•square•matrix•of•the•given•size•and•set•values•to•zero.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/matrix_exponentiation.py
|  77| ••••print("With•matrix•exponentiation•the•average•execution•time•is•",•exec_time•/•100)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/matrix_exponentiation.py
|  89| ••••••••"Without•matrix•exponentiation•the•average•execution•time•is•",•exec_time•/•100
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

web_programming/fetch_bbc_news.py
|   5| _NEWS_API•=•"https://newsapi.org/v1/articles?source=bbc-news&sortBy=top&apiKey="
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

conversions/molecular_chemistry.py
|  15| ••••••Wikipedia•reference:•https://en.wikipedia.org/wiki/Equivalent_concentration
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

conversions/molecular_chemistry.py
|  26| def•moles_to_pressure(volume:•float,•moles:•float,•temperature:•float)•->•float:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

conversions/molecular_chemistry.py
|  46| def•moles_to_volume(pressure:•float,•moles:•float,•temperature:•float)•->•float:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

data_structures/binary_tree/binary_tree_traversals.py
|  12| ••••data:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/binary_tree_traversals.py
|  13| ••••left:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/binary_tree_traversals.py
|  14| ••••right:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/binary_tree_traversals.py
|  27| ••••return•[root.data]•+•preorder(root.left)•+•preorder(root.right)•if•root•else•[]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

data_structures/binary_tree/binary_tree_traversals.py
|  36| ••••return•postorder(root.left)•+•postorder(root.right)•+•[root.data]•if•root•else•[]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/binary_tree/binary_tree_traversals.py
|  45| ••••return•inorder(root.left)•+•[root.data]•+•inorder(root.right)•if•root•else•[]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/binary_tree/binary_tree_traversals.py
|  61| ••••Returns•a•list•of•nodes•value•from•a•whole•binary•tree•in•Level•Order•Traverse.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

data_structures/binary_tree/binary_tree_traversals.py
|  64| ••••output:•list[Any]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/binary_tree_traversals.py
|  89| ••••output:•list[Any]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/binary_tree_traversals.py
| 112| ••••output:•list[Any]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/binary_tree_traversals.py
| 130| ••••Returns•a•list•of•nodes•value•from•left•to•right•and•right•to•left,•alternatively.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

data_structures/binary_tree/binary_tree_traversals.py
| 135| ••••output:•list[Sequence[Node•|•None]]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/binary_tree_traversals.py
| 172| ••••••••print(f"Level•{level}:",•get_nodes_from_left_to_right(root,•level=level))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

web_programming/random_anime_character.py
|  22| ••••Returns•the•Title,•Description,•and•Image•Title•of•a•random•anime•character•.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

web_programming/random_anime_character.py
|  24| ••••soup•=•BeautifulSoup(requests.get(URL,•headers=headers).text,•"html.parser")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

web_programming/random_anime_character.py
|  26| ••••image_url•=•soup.find("meta",•attrs={"property":•"og:image"}).attrs["content"]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_102/sol1.py
|  37| def•contains_origin(x1:•int,•y1:•int,•x2:•int,•y2:•int,•x3:•int,•y3:•int)•->•bool:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_102/sol1.py
|  46| ••••point_a:•tuple[int,•int]•=•(x1,•y1)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_102/sol1.py
|  47| ••••point_a_to_b:•tuple[int,•int]•=•(x2•-•x1,•y2•-•y1)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_102/sol1.py
|  48| ••••point_a_to_c:•tuple[int,•int]•=•(x3•-•x1,•y3•-•y1)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_102/sol1.py
|  49| ••••a:•float•=•-vector_product(point_a,•point_a_to_b)•/•vector_product(
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_102/sol1.py
|  52| ••••b:•float•=•+vector_product(point_a,•point_a_to_c)•/•vector_product(
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_102/sol1.py
|  65| ••••data:•str•=•Path(__file__).parent.joinpath(filename).read_text(encoding="utf-8")
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_102/sol1.py
|  65| ••••data:•str•=•Path(__file__).parent.joinpath(filename).read_text(encoding="utf-8")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_102/sol1.py
|  67| ••••triangles:•list[list[int]]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_102/sol1.py
|  71| ••••ret:•int•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_102/sol1.py
|  72| ••••triangle:•list[int]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

divide_and_conquer/closest_pair_of_points.py
|  70| ••••min_dis•(float):••distance•btw•closest•pair•of•points•in•the•strip•(<•min_dis)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

divide_and_conquer/closest_pair_of_points.py
|  84| def•closest_pair_of_points_sqr(points_sorted_on_x,•points_sorted_on_y,•points_counts):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

sorts/natural_sort.py
|  13| ••••>>>•example1•=•['2•ft•7•in',•'1•ft•5•in',•'10•ft•2•in',•'2•ft•11•in',•'7•ft•6•in']
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

sorts/natural_sort.py
|  16| ••••>>>•#•The•natural•sort•algorithm•sort•based•on•meaning•and•not•computer•code•point.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

sorts/natural_sort.py
|  20| ••••>>>•example2•=•['Elm11',•'Elm12',•'Elm2',•'elm0',•'elm1',•'elm10',•'elm13',•'elm9']
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

sorts/natural_sort.py
|  28| ••••••••return•[int(s)•if•s.isdigit()•else•s.lower()•for•s•in•re.split("([0-9]+)",•key)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/test_prime_check.py
|   2| Minimalist•file•that•allows•pytest•to•find•and•run•the•Test•unittest.••For•details,•see:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/sigmoid.py
|   4| The•function•takes•a•vector•of•K•real•numbers•as•input•and•then•1•/•(1•+•exp(-x)).
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/sigmoid.py
|   5| After•through•Sigmoid,•the•element•of•the•vector•mostly•0•between•1.•or•1•between•-1.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

dynamic_programming/integer_partition.py
|   2| The•number•of•partitions•of•a•number•n•into•at•least•k•parts•equals•the•number•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

dynamic_programming/integer_partition.py
|   3| partitions•into•exactly•k•parts•plus•the•number•of•partitions•into•at•least•k-1•parts.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

dynamic_programming/integer_partition.py
|   4| Subtracting•1•from•each•part•of•a•partition•of•n•into•k•parts•gives•a•partition•of•n-k
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

dynamic_programming/integer_partition.py
|  10| ••••memo:•list[list[int]]•=•[[0•for•_•in•range(m)]•for•_•in•range(m•+•1)]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/euclidean_distance.py
|  30| ••••Calculate•the•distance•between•the•two•endpoints•of•two•vectors•without•numpy.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

dynamic_programming/longest_sub_array.py
|   8| Given•an•array,•to•find•the•longest•and•continuous•sub•array•and•get•the•max•sum•of•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/tarjans_scc.py
|   8| ••••Uses•two•main•attributes•of•each•node•to•track•reachability,•the•index•of•that•node
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/tarjans_scc.py
|   9| ••••within•a•component(index),•and•the•lowest•index•reachable•from•that•node(lowlink).
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/tarjans_scc.py
|  11| ••••We•then•perform•a•dfs•of•the•each•component•making•sure•to•update•these•parameters
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/tarjans_scc.py
|  14| ••••If•ever•we•find•that•the•lowest•reachable•node•from•a•current•node•is•equal•to•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/tarjans_scc.py
|  41| ••••••••••••••••••••lowlink_of[w]•if•lowlink_of[w]•<•lowlink_of[v]•else•lowlink_of[v]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/tarjans_scc.py
|  45| ••••••••••••••••••••lowlink_of[w]•if•lowlink_of[w]•<•lowlink_of[v]•else•lowlink_of[v]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

strings/alternative_string_arrange.py
|  16| ••••first_str_length:•int•=•len(first_str)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

strings/alternative_string_arrange.py
|  17| ••••second_str_length:•int•=•len(second_str)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

strings/alternative_string_arrange.py
|  18| ••••abs_length:•int•=•(
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

strings/alternative_string_arrange.py
|  19| ••••••••first_str_length•if•first_str_length•>•second_str_length•else•second_str_length
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

strings/alternative_string_arrange.py
|  21| ••••output_list:•list•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

strings/is_contains_unique_chars.py
|  10| ••••Space•compexity:•O(1)•19320•bytes•as•we•are•having•144697•characters•in•unicode
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

maths/series/geometric_series.py
|  27| ••••:return:•The•Geometric•Series•starting•from•first•term•a•and•multiple•of•common
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

maths/series/geometric_series.py
|  51| ••••series:•list[float•|•int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/series/geometric_series.py
|  69| ••••nth_term•=•float(input("Enter•the•last•number•(n•term)•of•the•Geometric•Series"))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/series/geometric_series.py
|  70| ••••start_term_a•=•float(input("Enter•the•starting•term•(a)•of•the•Geometric•Series"))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/series/geometric_series.py
|  72| ••••••••input("Enter•the•common•ratio•between•two•terms•(r)•of•the•Geometric•Series")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
|  13| ••••••••[a[0][0]•*•b[0][0]•+•a[0][1]•*•b[1][0],•a[0][0]•*•b[0][1]•+•a[0][1]•*•b[1][1]],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
|  14| ••••••••[a[1][0]•*•b[0][0]•+•a[1][1]•*•b[1][0],•a[1][0]•*•b[0][1]•+•a[1][1]•*•b[1][1]],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
|  21| ••••••••[matrix_a[row][col]•+•matrix_b[row][col]•for•col•in•range(len(matrix_a[row]))]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
|  28| ••••••••[matrix_a[row][col]•-•matrix_b[row][col]•for•col•in•range(len(matrix_a[row]))]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
|  35| ••••Given•an•even•length•matrix,•returns•the•top_left,•top_right,•bot_left,•bot_right
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
|  41| ••••...•••••[4,3,2,4,4,3,2,4],[2,3,1,1,2,3,1,1],[6,5,4,3,6,5,4,3],[8,4,1,6,8,4,1,6],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
|  42| ••••...•••••[4,3,2,4,4,3,2,4],[2,3,1,1,2,3,1,1],[6,5,4,3,6,5,4,3],[8,4,1,6,8,4,1,6]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
|  55| ••••top_right•=•[[a[i][j]•for•j•in•range(mid,•matrix_length)]•for•i•in•range(mid)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
|  57| ••••••••[a[i][j]•for•j•in•range(mid,•matrix_length)]•for•i•in•range(mid,•matrix_length)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
|  61| ••••bot_left•=•[[a[i][j]•for•j•in•range(mid)]•for•i•in•range(mid,•matrix_length)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
|  77| ••••Recursive•function•to•calculate•the•product•of•two•matrices,•using•the•Strassen
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
|  94| ••••top_left•=•matrix_addition(matrix_subtraction(matrix_addition(t5,•t4),•t2),•t6)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
|  97| ••••bot_right•=•matrix_subtraction(matrix_subtraction(matrix_addition(t1,•t5),•t3),•t7)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
| 110| ••••>>>•strassen([[2,1,3],[3,4,6],[1,4,2],[7,6,7]],•[[4,2,3,4],[2,1,1,1],[8,6,4,2]])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
| 112| ••••>>>•strassen([[3,7,5,6,9],[1,5,3,7,8],[1,4,4,5,7]],•[[2,4],[5,2],[1,7],[5,5],[7,8]])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
| 117| ••••••••••••"Unable•to•multiply•these•matrices,•please•check•the•dimensions.•\n"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

divide_and_conquer/strassen_matrix_multiplication.py
| 131| ••••#•Adding•zeros•to•the•matrices•so•that•the•arrays•dimensions•are•the•same•and•also
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_121/sol1.py
|   2| A•bag•contains•one•red•disc•and•one•blue•disc.•In•a•game•of•chance•a•player•takes•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_121/sol1.py
|   3| disc•at•random•and•its•colour•is•noted.•After•each•turn•the•disc•is•returned•to•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_121/sol1.py
|   9| If•the•game•is•played•for•four•turns,•the•probability•of•a•player•winning•is•exactly
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_121/sol1.py
|  10| 11/120,•and•so•the•maximum•prize•fund•the•banker•should•allocate•for•winning•in•this
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_121/sol1.py
|  11| game•would•be•£10•before•they•would•expect•to•incur•a•loss.•Note•that•any•payout•will
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_121/sol1.py
|  12| be•a•whole•number•of•pounds•and•also•includes•the•original•£1•paid•to•play•the•game,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_121/sol1.py
|  20| ••••For•each•15-disc•sequence•of•red•and•blue•for•which•there•are•more•red•than•blue,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_121/sol1.py
|  21| ••••we•calculate•the•probability•of•that•sequence•and•add•it•to•the•total•probability
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_121/sol1.py
|  22| ••••of•the•player•winning.•The•inverse•of•this•probability•gives•an•upper•bound•for
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_121/sol1.py
|  31| ••••Find•the•maximum•prize•fund•that•should•be•allocated•to•a•single•game•in•which
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_121/sol1.py
|  38| ••••total_prob:•float•=•0.0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_121/sol1.py
|  39| ••••prob:•float
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_121/sol1.py
|  40| ••••num_blue:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_121/sol1.py
|  41| ••••num_red:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_121/sol1.py
|  42| ••••ind:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_121/sol1.py
|  43| ••••col:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_121/sol1.py
|  44| ••••series:•tuple[int,•...]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/sum_of_digits.py
|  77| ••••••••timeit("z.sum_of_digits_recursion(z.small_num)",•setup="import•__main__•as•z"),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/sum_of_digits.py
|  85| ••••••••timeit("z.sum_of_digits_compact(z.small_num)",•setup="import•__main__•as•z"),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/sum_of_digits.py
| 103| ••••••••timeit("z.sum_of_digits_recursion(z.medium_num)",•setup="import•__main__•as•z"),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/sum_of_digits.py
| 111| ••••••••timeit("z.sum_of_digits_compact(z.medium_num)",•setup="import•__main__•as•z"),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/sum_of_digits.py
| 129| ••••••••timeit("z.sum_of_digits_recursion(z.large_num)",•setup="import•__main__•as•z"),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/sum_of_digits.py
| 137| ••••••••timeit("z.sum_of_digits_compact(z.large_num)",•setup="import•__main__•as•z"),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

bit_manipulation/single_bit_manipulation_operations.py
|  82| ••••Where•X•is•a•number•with•all•the•bits•–•zeroes•and•bit•on•given•position•–•one.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

bit_manipulation/single_bit_manipulation_operations.py
|  83| ••••If•the•result•is•not•equal•to•0,•then•the•bit•on•the•given•position•is•1,•else•0.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

knapsack/knapsack.py
|   7| def•knapsack(capacity:•int,•weights:•list[int],•values:•list[int],•counter:•int)•->•int:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

dynamic_programming/fractional_knapsack_2.py
|  35| ••••max_value:•float•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

dynamic_programming/fractional_knapsack_2.py
|  36| ••••fractions:•list[float]•=•[0]•*•len(value)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

ciphers/decrypt_caesar_with_chi_squared.py
|  21| ••••••the•letters•and•values•are•a•percentage•representation•of•the•frequency•as
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/decrypt_caesar_with_chi_squared.py
|  57| ••••(each•letter•in•hello•has•been•shifted•one•to•the•right•in•the•eng.•alphabet)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

ciphers/decrypt_caesar_with_chi_squared.py
|  60| ••••decrypting•ciphertext•by•brute-force•is•extremely•easy•even•by•hand.•However
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/decrypt_caesar_with_chi_squared.py
|  75| •••••••multiplying•the•total•number•of•characters•by•the•frequency•of•the•letter
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/decrypt_caesar_with_chi_squared.py
| 103| ••••*•http://practicalcryptography.com/cryptanalysis/text-characterisation/chi-squared-
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/decrypt_caesar_with_chi_squared.py
| 131| ••••••••#•Frequencies•of•letters•in•the•english•language•(how•much•they•show•up)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/decrypt_caesar_with_chi_squared.py
| 168| ••••chi_squared_statistic_values:•dict[int,•tuple[float,•str]]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

ciphers/decrypt_caesar_with_chi_squared.py
| 178| ••••••••••••••••new_key•=•(alphabet_letters.index(letter.lower())•-•shift)•%•len(
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

ciphers/decrypt_caesar_with_chi_squared.py
| 200| ••••••••••••••••••••#•Get•the•excepcted•amount•of•times•the•letter•should•appear•based
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

ciphers/decrypt_caesar_with_chi_squared.py
| 205| ••••••••••••••••••••chi_letter_value•=•((occurrences•-•expected)•**•2)•/•expected
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

ciphers/decrypt_caesar_with_chi_squared.py
| 207| ••••••••••••••••••••#•Add•the•margin•of•error•to•the•total•chi•squared•statistic
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/decrypt_caesar_with_chi_squared.py
| 214| ••••••••••••••••••••#•Get•the•excepcted•amount•of•times•the•letter•should•appear•based
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

ciphers/decrypt_caesar_with_chi_squared.py
| 219| ••••••••••••••••••••chi_letter_value•=•((occurrences•-•expected)•**•2)•/•expected
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

ciphers/decrypt_caesar_with_chi_squared.py
| 221| ••••••••••••••••••••#•Add•the•margin•of•error•to•the•total•chi•squared•statistic
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/decrypt_caesar_with_chi_squared.py
| 230| ••••#•Get•the•most•likely•cipher•by•finding•the•cipher•with•the•smallest•chi•squared
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

ciphers/decrypt_caesar_with_chi_squared.py
| 232| ••••def•chi_squared_statistic_values_sorting_key(key:•int)•->•tuple[float,•str]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/decrypt_caesar_with_chi_squared.py
| 235| ••••most_likely_cipher:•int•=•min(
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_026/sol1.py
|  42| ••••••••has_been_divided:•list[int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

physics/newtons_second_law_of_motion.py
|   5| The•second•law•states•that•the•acceleration•of•an•object•is•dependent•upon•two•variables
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

physics/newtons_second_law_of_motion.py
|  12| As•the•mass•of•an•object•is•increased,•the•acceleration•of•the•object•is•decreased.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

physics/newtons_second_law_of_motion.py
|  13| Source:•https://www.physicsclassroom.com/class/newtlaws/Lesson-3/Newton-s-Second-Law
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

sorts/odd_even_sort.py
|  26| ••••••••for•i•in•range(0,•len(input_list)•-•1,•2):••#•iterating•over•all•even•indices
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

sorts/odd_even_sort.py
|  29| ••••••••••••••••input_list[i],•input_list[i•+•1]•=•input_list[i•+•1],•input_list[i]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

sorts/odd_even_sort.py
|  33| ••••••••for•i•in•range(1,•len(input_list)•-•1,•2):••#•iterating•over•all•odd•indices
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

sorts/odd_even_sort.py
|  35| ••••••••••••••••input_list[i],•input_list[i•+•1]•=•input_list[i•+•1],•input_list[i]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

other/greedy.py
|   8| ••••••••return•f"{self.__class__.__name__}({self.name},•{self.value},•{self.weight})"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

ciphers/baconian_cipher.py
|  58| ••••••••••••raise•Exception("encode()•accepts•only•letters•of•the•alphabet•and•spaces")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/allocation_number.py
|  40| ••••••••••••number_of_bytes•if•i•==•partitions•-•1•else•(i•+•1)•*•bytes_per_partition
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

strings/ngram.py
|  11| ••••['I•',•'•a',•'am',•'m•',•'•a',•'a•',•'•s',•'se',•'en',•'nt',•'te',•'en',•'nc',•'ce']
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

strings/ngram.py
|  17| ••••return•[sentence[i•:•i•+•ngram_size]•for•i•in•range(len(sentence)•-•ngram_size•+•1)]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

strings/ngram.py
|  17| ••••return•[sentence[i•:•i•+•ngram_size]•for•i•in•range(len(sentence)•-•ngram_size•+•1)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/armstrong_numbers.py
|  11| PASSING•=•(1,•153,•370,•371,•1634,•24678051,•115132219018763992565095597973971522401)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/armstrong_numbers.py
|  12| FAILING:•tuple•=•(-153,•-1,•0,•1.2,•200,•"A",•[],•{},•None)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/armstrong_numbers.py
|  90| ••••num•=•int(input("Enter•an•integer•to•see•if•it•is•an•Armstrong•number:•").strip())
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/armstrong_numbers.py
|  91| ••••print(f"{num}•is•{''•if•armstrong_number(num)•else•'not•'}an•Armstrong•number.")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/armstrong_numbers.py
|  92| ••••print(f"{num}•is•{''•if•narcissistic_number(num)•else•'not•'}an•Armstrong•number.")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/armstrong_numbers.py
|  93| ••••print(f"{num}•is•{''•if•pluperfect_number(num)•else•'not•'}an•Armstrong•number.")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

arithmetic_analysis/lu_decomposition.py
|  44| ••••••••••••f"'table'•has•to•be•of•square•shaped•array•but•got•a•{rows}x{columns}•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

searches/interpolation_search.py
|  10| ••••:param•sorted_collection:•some•ascending•sorted•collection•with•comparable•items
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/interpolation_search.py
|  56| ••••First•recursion•should•be•started•with•left=0•and•right=(len(sorted_collection)-1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/interpolation_search.py
|  57| ••••:param•sorted_collection:•some•ascending•sorted•collection•with•comparable•items
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/interpolation_search.py
|  80| ••••••••return•interpolation_search_by_recursion(sorted_collection,•item,•point,•left)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/interpolation_search.py
|  82| ••••••••return•interpolation_search_by_recursion(sorted_collection,•item,•right,•left)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/interpolation_search.py
|  95| ••••"""Check•if•collection•is•ascending•sorted,•if•not•-•raises•:py:class:`ValueError`
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

searches/interpolation_search.py
| 121| ••••••••sys.exit('Sequence•must•be•ascending•sorted•to•apply•interpolation•search')
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

searches/interpolation_search.py
| 133| ••••••••••••sys.exit("Sequence•must•be•ascending•sorted•to•apply•interpolation•search")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_069/sol1.py
|   6| is•used•to•determine•the•number•of•numbers•less•than•n•which•are•relatively•prime•to•n.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_069/sol1.py
|  31| ••••1.•Precompute•φ(k)•for•all•natural•k,•k•<=•n•using•product•formula•(wikilink•below)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

geodesy/lamberts_ellipsoidal_distance.py
|  15| ••••NOTE:•This•algorithm•uses•geodesy/haversine_distance.py•to•compute•central•angle,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

geodesy/lamberts_ellipsoidal_distance.py
|  18| ••••Representing•the•earth•as•an•ellipsoid•allows•us•to•approximate•distances•between
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

geodesy/lamberts_ellipsoidal_distance.py
|  19| ••••points•on•the•surface•much•better•than•a•sphere.•Ellipsoidal•formulas•treat•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

geodesy/lamberts_ellipsoidal_distance.py
|  20| ••••Earth•as•an•oblate•ellipsoid•which•means•accounting•for•the•flattening•that•happens
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

geodesy/lamberts_ellipsoidal_distance.py
|  21| ••••at•the•North•and•South•poles.•Lambert's•formulae•provide•accuracy•on•the•order•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

geodesy/lamberts_ellipsoidal_distance.py
|  23| ••••millimeter-level•accuracy•but•this•is•a•simpler•method•to•calculate•long•range
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

geodesy/lamberts_ellipsoidal_distance.py
|  38| ••••>>>•f"{lamberts_ellipsoidal_distance(*SAN_FRANCISCO,•*YOSEMITE):0,.0f}•meters"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

geodesy/lamberts_ellipsoidal_distance.py
|  40| ••••>>>•f"{lamberts_ellipsoidal_distance(*SAN_FRANCISCO,•*NEW_YORK):0,.0f}•meters"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

geodesy/lamberts_ellipsoidal_distance.py
|  42| ••••>>>•f"{lamberts_ellipsoidal_distance(*SAN_FRANCISCO,•*VENICE):0,.0f}•meters"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

geodesy/lamberts_ellipsoidal_distance.py
|  80| ••••return•EQUATORIAL_RADIUS•*•(sigma•-•((flattening•/•2)•*•(X_value•+•Y_value)))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

linear_algebra/src/conjugate_gradient.py
|  55| ••••spd_matrix•is•an•diminesion•x•dimensions•symmetric•positive•definite•(SPD)•matrix.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/monte_carlo.py
|  17| ••••4.•After•all•the•dots•are•placed,•divide•the•dots•in•the•circle•by•the•total.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/monte_carlo.py
|  65| ••••••••function_to_integrate(uniform(min_value,•max_value))•for•_•in•range(iterations)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/monte_carlo.py
|  94| ••••print(f"Estimating•area•under•y=x•where•x•varies•from•{min_value}•to•{max_value}")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/double_factorial_iterative.py
|   9| ••••>>>•all(double_factorial(i)•==•math.prod(range(i,•0,•-2))•for•i•in•range(20))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

hashes/adler32.py
|   3| ••••Compared•to•a•cyclic•redundancy•check•of•the•same•length,•it•trades•reliability•for
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/connected_components.py
|   8| test_graph_1•=•{0:•[1,•2],•1:•[0,•3],•2:•[0],•3:•[1],•4:•[5,•6],•5:•[4,•6],•6:•[4,•5]}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/lucas_series.py
|  23| ••••••••raise•TypeError("recursive_lucas_number•accepts•only•integer•arguments.")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

strings/reverse_letters.py
|   3| ••••Reverses•letters•in•a•given•string•without•adjusting•the•position•of•the•words
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/strongly_connected_components.py
|  59| def•strongly_connected_components(graph:•dict[int,•list[int]])•->•list[list[int]]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/strongly_connected_components.py
|  70| ••••reversed_graph:•dict[int,•list[int]]•=•{vert:•[]•for•vert•in•range(len(graph))}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/strongly_connected_components.py
|  70| ••••reversed_graph:•dict[int,•list[int]]•=•{vert:•[]•for•vert•in•range(len(graph))}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

quantum/not_gate.py
|  12| def•single_qubit_measure(qubits:•int,•classical_bits:•int)•->•q.result.counts.Counts:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

hashes/sha256.py
| 129| ••••••••••••self.preprocessed_data[x•:•x•+•64]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

strings/reverse_long_words.py
|  13| ••••••••"".join(word[::-1])•if•len(word)•>•4•else•word•for•word•in•sentence.split()
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

sorts/bead_sort.py
|  34| ••••••••for•i,•(rod_upper,•rod_lower)•in•enumerate(zip(sequence,•sequence[1:])):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

conversions/rgb_hsv_conversion.py
|   2| The•RGB•color•model•is•an•additive•color•model•in•which•red,•green,•and•blue•light
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

conversions/rgb_hsv_conversion.py
|   3| are•added•together•in•various•ways•to•reproduce•a•broad•array•of•colors.•The•name
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

conversions/rgb_hsv_conversion.py
|   5| green,•and•blue.•Meanwhile,•the•HSV•representation•models•how•colors•appear•under
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

conversions/rgb_hsv_conversion.py
|   6| light.•In•it,•colors•are•represented•using•three•components:•hue,•saturation•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

conversions/rgb_hsv_conversion.py
|  88| ••••Function•"approximately_equal_hsv"•is•needed•because•of•small•deviations•due•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

strings/jaro_winkler.py
|   6| ••••Jaro–Winkler•distance•is•a•string•metric•measuring•an•edit•distance•between•two
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

strings/jaro_winkler.py
|  36| ••••••••••••••••_str2•=•f"{_str2[0:_str2.index(l)]}•{_str2[_str2.index(l)•+•1:]}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

strings/jaro_winkler.py
|  47| ••••••••len([(c1,•c2)•for•c1,•c2•in•zip(matching_1,•matching_2)•if•c1•!=•c2])•//•2
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

data_structures/binary_tree/red_black_tree.py
| 567| ••••right_rot.right.right.right•=•RedBlackTree(20,•parent=right_rot.right.right)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

data_structures/binary_tree/red_black_tree.py
| 697| ••••tree•=•tree.insert(-16).insert(16).insert(8).insert(24).insert(20).insert(22)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

sorts/dutch_national_flag_sort.py
|   3| Dutch•National•Flag•algorithm•is•an•algorithm•originally•designed•by•Edsger•Dijkstra.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

sorts/dutch_national_flag_sort.py
|   4| It•is•the•most•optimal•sort•for•3•unique•values•(eg.•0,•1,•2)•in•a•sequence.••DNF•can
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

sorts/dutch_national_flag_sort.py
|   5| sort•a•sequence•of•n•size•with•[0•<=•a[i]•<=•2]•at•guaranteed•O(n)•complexity•in•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

sorts/dutch_national_flag_sort.py
|   9| The•task•is•to•randomly•arrange•balls•of•white,•red,•and•blue•in•such•a•way•that•balls
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

sorts/dutch_national_flag_sort.py
|  10| of•the•same•color•are•placed•together.••DNF•sorts•a•sequence•of•0,•1,•and•2's•in•linear
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

sorts/dutch_national_flag_sort.py
|  11| time•that•does•not•consume•any•extra•space.••This•algorithm•can•be•implemented•only•on
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

sorts/dutch_national_flag_sort.py
|  27| #•Python•program•to•sort•a•sequence•containing•only•0,•1•and•2•in•a•single•pass.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

sorts/dutch_national_flag_sort.py
|  51| ••••ValueError:•The•elements•inside•the•sequence•must•contains•only•(0,•1,•2)•values
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

sorts/dutch_national_flag_sort.py
|  55| ••••ValueError:•The•elements•inside•the•sequence•must•contains•only•(0,•1,•2)•values
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

sorts/dutch_national_flag_sort.py
|  59| ••••ValueError:•The•elements•inside•the•sequence•must•contains•only•(0,•1,•2)•values
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

sorts/dutch_national_flag_sort.py
|  63| ••••ValueError:•The•elements•inside•the•sequence•must•contains•only•(0,•1,•2)•values
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

sorts/dutch_national_flag_sort.py
|  67| ••••ValueError:•The•elements•inside•the•sequence•must•contains•only•(0,•1,•2)•values
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

sorts/dutch_national_flag_sort.py
|  88| ••••••••••••••••f"The•elements•inside•the•sequence•must•contains•only•{colors}•values"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/karger.py
|  64| ••••••••contracted_nodes[uv]•=•set(contracted_nodes[u].union(contracted_nodes[v]))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

strings/boyer_moore_search.py
|  46| ••••••••find•the•index•of•mis-matched•character•in•text•when•compared•with•pattern
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

ciphers/affine_cipher.py
|  56| ••••>>>•decrypt_message(4545,•'VL}p•MM{I}p~{HL}Gp{vp•pFsH}pxMpyxIx•JHL•O}F{~pvuOvF{FuF'
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/affine_cipher.py
|  67| ••••••••••••plainText•+=•SYMBOLS[(symIndex•-•keyB)•*•modInverseOfkeyA•%•len(SYMBOLS)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

ciphers/affine_cipher.py
|  77| ••••••••if•cryptomath.gcd(keyA,•len(SYMBOLS))•==•1•and•keyB•%•len(SYMBOLS)•!=•0:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/minimum_path_sum.py
|  33| ••••••••raise•TypeError("The•grid•does•not•contain•the•appropriate•information")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

compression/peak_signal_to_noise_ratio.py
|  27| ••••original•=•cv2.imread(os.path.join(dir_path,•"image_data/original_image.png"))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

compression/peak_signal_to_noise_ratio.py
|  28| ••••contrast•=•cv2.imread(os.path.join(dir_path,•"image_data/compressed_image.png"),•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

compression/peak_signal_to_noise_ratio.py
|  30| ••••original2•=•cv2.imread(os.path.join(dir_path,•"image_data/PSNR-example-base.png"))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

conversions/decimal_to_hexadecimal.py
|  26| ••••take•integer•decimal•value,•return•hexadecimal•representation•as•str•beginning
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

sorts/comb_sort.py
|   3| Comb•sort•is•a•relatively•simple•sorting•algorithm•originally•designed•by•Wlodzimierz
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

sorts/comb_sort.py
|   4| Dobosiewicz•in•1980.••It•was•rediscovered•by•Stephen•Lacey•and•Richard•Box•in•1991.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

sorts/comb_sort.py
|   7| Comb•sort•improvement•is•that•gap•can•be•much•more•than•1,•in•order•to•prevent•slowing
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/collatz_sequence.py
|  11| ••••The•conjecture•states•the•sequence•will•always•reach•1•for•any•starting•value•n.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

dynamic_programming/fibonacci.py
|   2| This•is•a•pure•Python•implementation•of•Dynamic•Programming•solution•to•the•fibonacci
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

dynamic_programming/fibonacci.py
|  38| ••••••••prompt:•str•=•input(">>•")
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

dynamic_programming/fibonacci.py
|  43| ••••••••••••index:•int•=•int(prompt)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/queue/circular_queue_linked_list.py
|  23| ••••••••self.front:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/queue/circular_queue_linked_list.py
|  24| ••••••••self.rear:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/queue/circular_queue_linked_list.py
| 153| ••••••••self.data:•Any•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/queue/circular_queue_linked_list.py
| 154| ••••••••self.next:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/queue/circular_queue_linked_list.py
| 155| ••••••••self.prev:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/binary_exponentiation_2.py
|   4| *•This•is•one•of•the•most•commonly•used•methods•of•finding•result•of•multiplication.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/binary_exponentiation_2.py
|  43| *•RULE•2•:•IF•b•is•ODD,•then•----•a•*•b•=•a•+•(a•*•(b•-•1))•::•where•(b•-•1)•is•even.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

web_programming/reddit.py
|   7| author_flair_css_class•author_flair_richtext•author_flair_template_id•author_fullname
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

web_programming/reddit.py
|   8| author_premium•can_mod_post•category•clicked•content_categories•created_utc•downs
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

web_programming/reddit.py
|  11| link_flair_richtext•link_flair_text•link_flair_text_color•media_embed•mod_reason_title
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

web_programming/reddit.py
|  12| name•permalink•pwls•quarantine•saved•score•secure_media•secure_media_embed•selftext
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

web_programming/reddit.py
|  13| subreddit•subreddit_name_prefixed•subreddit_type•thumbnail•title•top_awarded_type
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

web_programming/reddit.py
|  19| ••••subreddit:•str,•limit:•int•=•1,•age:•str•=•"new",•wanted_data:•list•|•None•=•None
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

web_programming/reddit.py
|  30| ••••if•invalid_search_terms•:=•",•".join(sorted(set(wanted_data)•-•valid_terms)):
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

web_programming/reddit.py
|  30| ••••if•invalid_search_terms•:=•",•".join(sorted(set(wanted_data)•-•valid_terms)):
|    | [NORMAL] PycodestyleBear (E231):
|    | E231 missing whitespace after ':''

web_programming/reddit.py
|  30| ••••if•invalid_search_terms•:=•",•".join(sorted(set(wanted_data)•-•valid_terms)):
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

web_programming/reddit.py
|  30| ••••if•invalid_search_terms•:=•",•".join(sorted(set(wanted_data)•-•valid_terms)):
|    | [NORMAL] PycodestyleBear (E225):
|    | E225 missing whitespace around operator'

web_programming/reddit.py
|  30| ••••if•invalid_search_terms•:=•",•".join(sorted(set(wanted_data)•-•valid_terms)):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

web_programming/reddit.py
|  46| ••••••••••••item:•data["data"]["children"][id_]["data"][item]•for•item•in•wanted_data
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

web_programming/reddit.py
|  53| ••••print(get_subreddit_data("learnpython",•wanted_data=["title",•"url",•"selftext"]))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

web_programming/fetch_github_info.py
|   7| To•generate•your•personal•access•token•visit•https://github.com/settings/tokens.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

web_programming/fetch_github_info.py
|  10| Never•hardcode•any•credential•information•in•the•code.•Always•use•an•environment
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

web_programming/fetch_github_info.py
|  11| file•to•store•the•private•information•and•use•the•`os`•module•to•get•the•information
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

web_programming/fetch_github_info.py
|  14| Create•a•".env"•file•in•the•root•directory•and•write•these•two•lines•in•that•file
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/hamming_numbers.py
|   3| non-negative•integers•i,•j,•and•k.•They•are•often•referred•to•as•regular•numbers.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/hamming_numbers.py
|  10| ••••This•function•creates•an•ordered•list•of•n•length•as•requested,•and•afterwards
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/hamming_numbers.py
|  46| ••••n•=•input("Enter•the•last•number•(nth•term)•of•the•Hamming•Number•Series:•")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/persistence.py
|  20| ••••••••raise•ValueError("multiplicative_persistence()•only•accepts•integral•values")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/persistence.py
|  22| ••••••••raise•ValueError("multiplicative_persistence()•does•not•accept•negative•values")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/persistence.py
|  61| ••••••••raise•ValueError("additive_persistence()•does•not•accept•negative•values")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

backtracking/sum_of_subsets.py
|   2| ••••••••The•sum-of-subsetsproblem•states•that•a•set•of•non-negative•integers,•and•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

backtracking/sum_of_subsets.py
|   3| ••••••••value•M,•determine•all•possible•subsets•of•the•given•set•whose•summation•sum
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

backtracking/sum_of_subsets.py
|   6| ••••••••Summation•of•the•chosen•numbers•must•be•equal•to•given•number•M•and•one•number
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

backtracking/sum_of_subsets.py
|  12| def•generate_sum_of_subsets_soln(nums:•list[int],•max_sum:•int)•->•list[list[int]]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

backtracking/sum_of_subsets.py
|  13| ••••result:•list[list[int]]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

backtracking/sum_of_subsets.py
|  14| ••••path:•list[int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

backtracking/sum_of_subsets.py
|  17| ••••create_state_space_tree(nums,•max_sum,•num_index,•path,•result,•remaining_nums_sum)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

backtracking/sum_of_subsets.py
|  33| ••••This•algorithm•follows•depth-fist-search•and•backtracks•when•the•node•is•not
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_180/sol1.py
|  14| We•call•(x,y,z)•a•golden•triple•of•order•k•if•x,•y,•and•z•are•all•rational•numbers
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_180/sol1.py
|  38| So•all•we•have•to•do•is•iterate•through•the•possible•numerators•and•denominators
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_180/sol1.py
|  39| of•x•and•y,•calculate•the•corresponding•z,•and•check•if•the•corresponding•numerator•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_180/sol1.py
|  40| denominator•are•integer•and•satisfy•0•<•z_num•<•z_den•<=•0.•We•use•a•set•"uniquq_s"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_180/sol1.py
|  41| to•make•sure•there•are•no•duplicates,•and•the•fractions.Fraction•class•to•make•sure
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_180/sol1.py
|  64| ••••sq:•int•=•int(number**0.5)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_180/sol1.py
|  79| ••••top:•int•=•x_num•*•y_den•*•z_den•+•y_num•*•x_den•*•z_den•+•z_num•*•x_den•*•y_den
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_180/sol1.py
|  79| ••••top:•int•=•x_num•*•y_den•*•z_den•+•y_num•*•x_den•*•z_den•+•z_num•*•x_den•*•y_den
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_180/sol1.py
|  80| ••••bottom:•int•=•x_den•*•y_den•*•z_den
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_180/sol1.py
|  81| ••••hcf:•int•=•gcd(top,•bottom)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_180/sol1.py
|  89| ••••Find•the•sum•of•the•numerator•and•denominator•of•the•sum•of•all•s(x,y,z)•for
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_180/sol1.py
|  99| ••••unique_s:•set•=•set()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_180/sol1.py
| 100| ••••hcf:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_180/sol1.py
| 101| ••••total:•Fraction•=•Fraction(0)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_180/sol1.py
| 102| ••••fraction_sum:•tuple[int,•int]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_180/sol1.py
| 122| ••••••••••••••••••••••••x_num•*•x_num•*•y_den•*•y_den•+•x_den•*•x_den•*•y_num•*•y_num
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_180/sol1.py
| 152| ••••••••••••••••••••••••x_den•*•x_den•*•y_num•*•y_num•+•x_num•*•x_num•*•y_den•*•y_den
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/perfect_number.py
|   3| In•number•theory,•a•perfect•number•is•a•positive•integer•that•is•equal•to•the•sum•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/perfect_number.py
|  25| ••••A•number•at•most•can•be•divisible•by•the•half•of•the•number•except•the•number
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/perfect_number.py
|  26| ••••itself.••For•example,•6•is•at•most•can•be•divisible•by•3•except•by•6•itself.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/perfect_number.py
|  28| ••••return•sum(i•for•i•in•range(1,•number•//•2•+•1)•if•number•%•i•==•0)•==•number
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

dynamic_programming/max_non_adjacent_sum.py
|   1| #•Video•Explanation:•https://www.youtube.com/watch?v=6w60Zi1NtL8&feature=emb_logo
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

sorts/double_sort.py
|  24| ••••••••••••):••#•applying•bubble•sort•algorithm•from•left•to•right•(or•forwards)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

sorts/double_sort.py
|  30| ••••••••••••):••#•applying•bubble•sort•algorithm•from•right•to•left•(or•backwards)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

sorts/double_sort.py
|  39| ••••lst•=•[int(x)•for•x•in•input().split()]••#•inputing•elements•of•the•list•in•one•line
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

project_euler/problem_035/sol1.py
|   9| There•are•thirteen•such•primes•below•100:•2,•3,•5,•7,•11,•13,•17,•31,•37,•71,•73,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_035/sol1.py
|  14| below•1•million•using•the•Seive•of•Eratosthenes.••Then,•out•of•all•these•primes,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_035/sol1.py
|  67| ••••••••••••list_nums•=•[int(str_num[j:]•+•str_num[:j])•for•j•in•range(len(str_num))]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
|   4| ••••-•https://en.wikipedia.org/wiki/Sigmoid_function•(Sigmoid•activation•function)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
|  12| ••••def•__init__(self,•input_array:•numpy.ndarray,•output_array:•numpy.ndarray)•->•None:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
|  14| ••••••••This•function•initializes•the•TwoHiddenLayerNeuralNetwork•class•with•random
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
|  17| ••••••••input_array•:•input•values•for•training•the•neural•network•(i.e•training•data)•.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
|  29| ••••••••#•self.input_array.shape[1]•is•used•to•represent•number•of•nodes•in•input•layer.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
|  38| ••••••••self.first_hidden_layer_and_second_hidden_layer_weights•=•numpy.random.rand(
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
|  45| ••••••••self.second_hidden_layer_and_output_layer_weights•=•numpy.random.rand(3,•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
|  56| ••••••••The•information•moves•in•only•one•direction•i.e.•forward•from•the•input•nodes,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
|  63| ••••••••>>>•input_val•=•numpy.array(([0,•0,•0],•[0,•0,•0],•[0,•0,•0]),•dtype=float)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
|  71| ••••••••#•Layer_between_input_and_first_hidden_layer•is•the•layer•connecting•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
|  74| ••••••••••••numpy.dot(self.input_array,•self.input_layer_and_first_hidden_layer_weights)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
|  78| ••••••••#•connecting•the•first•hidden•set•of•nodes•with•the•second•hidden•set•of•nodes.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
|  79| ••••••••self.layer_between_first_hidden_layer_and_second_hidden_layer•=•sigmoid(
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
| 103| ••••••••>>>•input_val•=•numpy.array(([0,•0,•0],•[0,•0,•0],•[0,•0,•0]),•dtype=float)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
| 141| ••••••••••••••••••••self.layer_between_first_hidden_layer_and_second_hidden_layer
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
| 145| ••••••••••••*•sigmoid_derivative(self.layer_between_input_and_first_hidden_layer),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
| 158| ••••def•train(self,•output:•numpy.ndarray,•iterations:•int,•give_loss:•bool)•->•None:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
| 169| ••••••••>>>•input_val•=•numpy.array(([0,•0,•0],•[0,•1,•0],•[0,•0,•1]),•dtype=float)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
| 195| ••••••••>>>•input_val•=•numpy.array(([0,•0,•0],•[0,•1,•0],•[0,•0,•1]),•dtype=float)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
| 207| ••••••••••••numpy.dot(self.array,•self.input_layer_and_first_hidden_layer_weights)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
| 210| ••••••••self.layer_between_first_hidden_layer_and_second_hidden_layer•=•sigmoid(
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
| 246| ••••>>>•sigmoid_derivative(numpy.array(([1,•0,•2],•[1,•0,•0]),•dtype=numpy.float64))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
| 259| ••••Model•is•trained•for•a•fixed•amount•of•iterations•then•the•predict•method•is•called.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
| 260| ••••In•this•example•the•output•is•divided•into•2•classes•i.e.•binary•classification,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
| 282| ••••output•=•numpy.array(([0],•[1],•[1],•[0],•[1],•[0],•[0],•[1]),•dtype=numpy.float64)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
| 285| ••••neural_network•=•TwoHiddenLayerNeuralNetwork(input_array=input,•output_array=output)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

neural_network/2_hidden_layers_neural_network.py
| 291| ••••return•neural_network.predict(numpy.array(([1,•1,•1]),•dtype=numpy.float64))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_205/sol1.py
|   4| Peter•has•nine•four-sided•(pyramidal)•dice,•each•with•faces•numbered•1,•2,•3,•4.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_205/sol1.py
|   5| Colin•has•six•six-sided•(cubic)•dice,•each•with•faces•numbered•1,•2,•3,•4,•5,•6.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_205/sol1.py
|  17| def•total_frequency_distribution(sides_number:•int,•dice_number:•int)•->•list[int]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

matrix/matrix_operation.py
|  76| ••••••••[sum(m•*•n•for•m,•n•in•zip(i,•j))•for•j•in•zip(*matrix_b)]•for•i•in•matrix_a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

matrix/matrix_operation.py
|  92| def•transpose(matrix:•list[list],•return_map:•bool•=•True)•->•list[list]•|•map[list]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

matrix/matrix_operation.py
| 116| ••••minor•=•matrix[:row]•+•matrix[row•+•1•:]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

matrix/matrix_operation.py
| 117| ••••return•[row[:column]•+•row[column•+•1•:]•for•row•in•minor]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

matrix/matrix_operation.py
| 183| ••••matrix_c•=•[[11,•12,•13,•14],•[21,•22,•23,•24],•[31,•32,•33,•34],•[41,•42,•43,•44]]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

searches/simulated_annealing.py
|  22| ••••Implementation•of•the•simulated•annealing•algorithm.•We•start•with•a•given•state,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/simulated_annealing.py
|  23| ••••find•all•its•neighbors.•Pick•a•random•neighbor,•if•that•neighbor•improves•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

searches/simulated_annealing.py
|  24| ••••solution,•we•move•in•that•direction,•if•that•neighbor•does•not•improve•the•solution,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

searches/simulated_annealing.py
|  25| ••••we•generate•a•random•real•number•between•0•and•1,•if•the•number•is•within•a•certain
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

searches/simulated_annealing.py
|  26| ••••range•(calculated•using•temperature)•we•move•in•that•direction,•else•we•pick
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

searches/simulated_annealing.py
|  31| ••••••••find_max:•If•True,•the•algorithm•should•find•the•minimum•else•the•minimum.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

searches/simulated_annealing.py
|  34| ••••••••start_temperate:•the•initial•temperate•of•the•system•when•the•program•starts.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/simulated_annealing.py
|  35| ••••••••rate_of_decrease:•the•rate•at•which•the•temperate•decreases•in•each•iteration.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/simulated_annealing.py
|  57| ••••••••••••index•=•random.randint(0,•len(neighbors)•-•1)••#•picking•a•random•neighbor
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/simulated_annealing.py
|  77| ••••••••••••••••if•random.random()•<•probability:••#•random•number•within•probability
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/simulated_annealing.py
|  82| ••••••••••••#•temperature•below•threshold,•or•could•not•find•a•suitable•neighbor
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

searches/simulated_annealing.py
| 105| ••••••••prob,•find_max=False,•max_x=100,•min_x=5,•max_y=50,•min_y=-5,•visualization=True
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

searches/simulated_annealing.py
| 108| ••••••••"The•minimum•score•for•f(x,•y)•=•x^2•+•y^2•with•the•domain•100•>•x•>•5•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

searches/simulated_annealing.py
| 115| ••••••••prob,•find_max=True,•max_x=100,•min_x=5,•max_y=50,•min_y=-5,•visualization=True
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

searches/simulated_annealing.py
| 118| ••••••••"The•maximum•score•for•f(x,•y)•=•x^2•+•y^2•with•the•domain•100•>•x•>•5•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

data_structures/stacks/stack.py
|  26| ••••••••self.stack:•list[T]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/stacks/stack.py
|  87| ••••stack:•Stack[int]•=•Stack(10)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

searches/hill_climbing.py
|   8| ••••The•interface•will•be•illustrated•using•the•example•of•mathematical•function.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

searches/hill_climbing.py
|  18| ••••••••function_to_optimize:•a•function•to•optimize•having•the•signature•f(x,•y).
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

searches/hill_climbing.py
|  27| ••••••••Returns•the•output•of•the•function•called•with•current•x•and•y•coordinates.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

searches/hill_climbing.py
|  39| ••••••••Returns•a•list•of•coordinates•of•neighbors•adjacent•to•the•current•coordinates.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

searches/hill_climbing.py
| 104| ••••••••••••find_max:•If•True,•the•algorithm•should•find•the•maximum•else•the•minimum.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/hill_climbing.py
| 105| ••••••••••••max_x,•min_x,•max_y,•min_y:•the•maximum•and•minimum•bounds•of•x•and•y.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

searches/hill_climbing.py
| 149| ••••••••••••#•since•we•have•no•neighbor•that•improves•the•solution•we•stop•the•search
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/hill_climbing.py
| 182| ••••••••prob,•find_max=False,•max_x=100,•min_x=5,•max_y=50,•min_y=-5,•visualization=True
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

searches/hill_climbing.py
| 185| ••••••••"The•minimum•score•for•f(x,•y)•=•x^2•+•y^2•with•the•domain•100•>•x•>•5•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/shuffled_shift_cipher.py
|  18| ••••that•can•be•allowed•in•the•plaintext,•is•pivoted•and•shuffled.•Refer•to•docstring
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

ciphers/shuffled_shift_cipher.py
|  21| ••••Then,•using•the•passcode,•a•number•is•calculated•which•is•used•to•encrypt•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

ciphers/shuffled_shift_cipher.py
|  22| ••••plaintext•message•with•the•normal•shift•cipher•method,•only•in•this•case,•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

ciphers/shuffled_shift_cipher.py
|  25| ••••Each•cipher•object•can•possess•an•optional•argument•as•passcode,•without•which•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

ciphers/shuffled_shift_cipher.py
|  70| ••••••••password•=•[random.choice(choices)•for•_•in•range(random.randint(10,•20))]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

ciphers/shuffled_shift_cipher.py
|  81| ••••••••••••then,•breakpoints•=•[A,C,E,M,R]•#•sorted•set•of•characters•from•passcode
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

ciphers/shuffled_shift_cipher.py
|  86| ••••••••combinations•for•the•shuffled•list.•In•the•program•we•consider,•a•set•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/shuffled_shift_cipher.py
|  88| ••••••••thereby•creating•a•possibility•of•97!•combinations•(which•is•a•152•digit•number
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/shuffled_shift_cipher.py
|  90| ••••••••Moreover,•shift•keys•even•introduce•a•multiple•of•26•for•a•brute•force•approach
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/shuffled_shift_cipher.py
|  93| ••••••••#•key_list_options•contain•nearly•all•printable•except•few•elements•from
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/shuffled_shift_cipher.py
| 101| ••••••••#•creates•points•known•as•breakpoints•to•break•the•key_list_options•at•those
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

ciphers/shuffled_shift_cipher.py
| 104| ••••••••temp_list:•list[str]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

ciphers/shuffled_shift_cipher.py
| 106| ••••••••#•algorithm•for•creating•a•new•shuffled•list,•keys_l,•out•of•key_list_options
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

ciphers/shuffled_shift_cipher.py
| 110| ••••••••••••#•checking•breakpoints•at•which•to•pivot•temporary•sublist•and•add•it•into
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

ciphers/shuffled_shift_cipher.py
| 116| ••••••••#•returning•a•shuffled•keys_l•to•prevent•brute•force•guessing•of•shift•key
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

ciphers/shuffled_shift_cipher.py
| 139| ••••••••#•decoding•shift•like•Caesar•cipher•algorithm•implementing•negative•shift•or
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

ciphers/shuffled_shift_cipher.py
| 161| ••••••••#•encoding•shift•like•Caesar•cipher•algorithm•implementing•positive•shift•or
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

ciphers/shuffled_shift_cipher.py
| 172| def•test_end_to_end(msg:•str•=•"Hello,•this•is•a•modified•Caesar•cipher")•->•str:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/linked_list/__init__.py
|  21| ••••••••self.head:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/linked_list/__init__.py
|  57| ••••••••••••item_list:•list[str]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

bit_manipulation/binary_twos_complement.py
|   1| #•Information•on•2's•complement:•https://en.wikipedia.org/wiki/Two%27s_complement
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphs/random_graph_generator.py
|  29| ••••graph:•dict•=•{i:•[]•for•i•in•range(vertices_number)}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/random_graph_generator.py
|  34| ••••#•if•probability•is•lower•or•equal•than•0,•then•return•a•graph•without•edges
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/random_graph_generator.py
|  45| ••••••••••••••••••••#•if•the•graph•is•undirected,•add•an•edge•in•from•j•to•i,•either
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/random_graph_generator.py
|  60| ••••••••i:•[j•for•j•in•range(vertices_number)•if•i•!=•j]•for•i•in•range(vertices_number)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

knapsack/greedy_knapsack.py
|   5| A•shopkeeper•has•bags•of•wheat•that•each•have•different•weights•and•different•profits.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

knapsack/greedy_knapsack.py
|  15| Calculate•the•maximum•profit•that•the•shopkeeper•can•make•given•maxmum•weight•that•can
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

knapsack/greedy_knapsack.py
|  55| ••••#•loop•till•the•total•weight•do•not•reach•max•limit•e.g.•15•kg•and•till•i<length
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

knapsack/greedy_knapsack.py
|  57| ••••••••#•flag•value•for•encountered•greatest•element•in•sorted_profit_by_weight
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

knapsack/greedy_knapsack.py
|  60| ••••••••Calculate•the•index•of•the•biggest_profit_by_weight•in•profit_by_weight•list.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

knapsack/greedy_knapsack.py
|  61| ••••••••This•will•give•the•index•of•the•first•encountered•element•which•is•same•as•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

knapsack/greedy_knapsack.py
|  62| ••••••••biggest_profit_by_weight.••There•may•be•one•or•more•values•same•as•that•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

knapsack/greedy_knapsack.py
|  63| ••••••••biggest_profit_by_weight•but•index•always•encounter•the•very•first•element
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

knapsack/greedy_knapsack.py
|  64| ••••••••only.••To•curb•this•alter•the•values•in•profit_by_weight•once•they•are•used
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

knapsack/greedy_knapsack.py
|  65| ••••••••here•it•is•done•to•-1•because•neither•profit•nor•weight•can•be•in•negative.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

knapsack/greedy_knapsack.py
|  78| ••••••••••••#•Since•the•weight•encountered•is•greater•than•limit,•therefore•take•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

knapsack/greedy_knapsack.py
|  89| ••••••••"Input•profits,•weights,•and•then•max_weight•(all•positive•ints)•separated•by•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

knapsack/greedy_knapsack.py
|  93| ••••profit•=•[int(x)•for•x•in•input("Input•profits•separated•by•spaces:•").split()]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

knapsack/greedy_knapsack.py
|  94| ••••weight•=•[int(x)•for•x•in•input("Input•weights•separated•by•spaces:•").split()]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

digital_image_processing/test_digital_image_processing.py
|  32| ••••with•Image.open("digital_image_processing/image_data/lena_small.jpg")•as•img:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

digital_image_processing/test_digital_image_processing.py
|  82| def•test_burkes(file_path:•str•=•"digital_image_processing/image_data/lena_small.jpg"):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

backtracking/coloring.py
|  37| ••••graph:•list[list[int]],•max_colors:•int,•colored_vertices:•list[int],•index:•int
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

backtracking/coloring.py
|  44| ••••••••1.1•If•complete•return•True•(meaning•that•we•successfully•colored•the•graph)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/series/harmonic_series.py
|  37| ••••series:•list•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/basic_binary_tree.py
|  11| ••••••••self.left:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/basic_binary_tree.py
|  12| ••••••••self.right:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/basic_binary_tree.py
|  52| ••••return•1•+•max(depth_of_tree(tree.left),•depth_of_tree(tree.right))•if•tree•else•0
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

data_structures/binary_tree/basic_binary_tree.py
|  78| ••••••••return•is_full_binary_tree(tree.left)•and•is_full_binary_tree(tree.right)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

blockchain/diophantine_equation.py
|   6| ••••Diophantine•Equation•:•Given•integers•a,b,c•(•at•least•one•of•a•and•b•!=•0),•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

blockchain/diophantine_equation.py
|   7| ••••diophantine•equation•a*x•+•b*y•=•c•has•a•solution•(where•x•and•y•are•integers)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

blockchain/diophantine_equation.py
|  26| ••••(d,•x,•y)•=•extended_gcd(a,•b)••#•extended_gcd(a,b)•function•implemented•below
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

blockchain/diophantine_equation.py
|  81| ••••Note•:•In•number•theory,•two•integers•a•and•b•are•said•to•be•relatively•prime,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

blockchain/diophantine_equation.py
|  82| •••••••••••mutually•prime,•or•co-prime•if•the•only•positive•integer•(factor)•that
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

blockchain/diophantine_equation.py
| 100| ••••Extended•Euclid's•Algorithm•:•If•d•divides•a•and•b•and•d•=•a*x•+•b*y•for•integers
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

backtracking/hamiltonian_cycle.py
|  15| ••••Checks•whether•it•is•possible•to•add•next•into•path•by•validating•2•statements
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

backtracking/hamiltonian_cycle.py
|  18| ••••If•both•validations•succeed•we•return•True,•saying•that•it•is•possible•to•connect
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

backtracking/hamiltonian_cycle.py
|  49| def•util_hamilton_cycle(graph:•list[list[int]],•path:•list[int],•curr_ind:•int)•->•bool:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

backtracking/hamiltonian_cycle.py
|  54| ••••••••1.1•If•last•visited•vertex•has•path•to•starting•vertex•return•True•either
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

backtracking/hamiltonian_cycle.py
|  60| ••••••••••••2.2•Do•recursive•call•and•check•if•going•to•this•vertex•solves•problem
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

backtracking/hamiltonian_cycle.py
|  77| ••••Case•2:•Use•exact•graph•as•in•previous•case,•but•in•the•properties•taken•from
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_007/sol2.py
|  73| ••••••••raise•TypeError("Parameter•nth•must•be•int•or•castable•to•int.")•from•None
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_007/sol2.py
|  76| ••••primes:•list[int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

hashes/sha1.py
|   2| Demonstrates•implementation•of•SHA1•Hash•function•in•a•Python•class•and•gives•utilities
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

hashes/sha1.py
|   6| •••••••When•run•without•any•arguments,•it•prints•the•hash•of•the•string•"Hello•World!!
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

hashes/sha1.py
|  11| SHA1•hash•or•SHA1•sum•of•a•string•is•a•cryptographic•function•which•means•it•is•easy
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

hashes/sha1.py
|  12| to•calculate•forwards•but•extremely•difficult•to•calculate•backwards.•What•this•means
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

hashes/sha1.py
|  13| is,•you•can•easily•calculate•the•hash•of••a•string,•but•it•is•extremely•difficult•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

hashes/sha1.py
|  14| know•the•original•string•if•you•have•its•hash.•This•property•is•useful•to•communicate
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

hashes/sha1.py
|  15| securely,•send•encrypted•messages•and•is•very•useful•in•payment•systems,•blockchain
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

hashes/sha1.py
|  18| First•we•start•with•a•message.•The•message•is•padded•and•the•length•of•the•message
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

hashes/sha1.py
|  19| is•added•to•the•end.•It•is•then•split•into•blocks•of•512•bits•or•64•bytes.•The•blocks
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

hashes/sha1.py
|  21| The•value•after•each•compression•is•added•to•a•160bit•buffer•called•the•current•hash
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

hashes/sha1.py
|  41| ••••••••Inititates•the•variables•data•and•h.•h•is•a•list•of•5•8-digit•Hexadecimal
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

hashes/sha1.py
|  44| ••••••••respectively.•We•will•start•with•this•as•a•message•digest.•0x•is•how•you•write
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

hashes/sha1.py
|  61| ••••••••Pads•the•input•message•with•zeros•so•that•padded_data•has•64•bytes•or•512•bits
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

hashes/sha1.py
|  64| ••••••••padded_data•=•self.data•+•padding•+•struct.pack(">Q",•8•*•len(self.data))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

hashes/sha1.py
|  72| ••••••••••••self.padded_data[i•:•i•+•64]•for•i•in•range(0,•len(self.padded_data),•64)
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

hashes/sha1.py
|  72| ••••••••••••self.padded_data[i•:•i•+•64]•for•i•in•range(0,•len(self.padded_data),•64)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

hashes/sha1.py
|  78| ••••••••Takes•a•bytestring-block•of•length•64,•unpacks•it•to•a•list•of•integers•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

hashes/sha1.py
|  83| ••••••••••••w[i]•=•self.rotate((w[i•-•3]•^•w[i•-•8]•^•w[i•-•14]•^•w[i•-•16]),•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

hashes/sha1.py
|  88| ••••••••Calls•all•the•other•methods•to•process•the•input.•Pads•the•data,•then•splits
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

hashes/sha1.py
|  89| ••••••••into•blocks•and•then•does•a•series•of•operations•for•each•block•(including
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

hashes/sha1.py
|  91| ••••••••For•each•block,•the•variable•h•that•was•initialized•is•copied•to•a,b,c,d,e
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

hashes/sha1.py
|  92| ••••••••and•these•5•variables•a,b,c,d,e•undergo•several•changes.•After•all•the•blocks
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

hashes/sha1.py
|  93| ••••••••are•processed,•these•5•variables•are•pairwise•added•to•h•ie•a•to•h[0],•b•to•h[1]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

hashes/sha1.py
| 115| ••••••••••••••••••••self.rotate(a,•5)•+•f•+•e•+•k•+•expanded_block[i]•&•0xFFFFFFFF,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

hashes/sha1.py
| 133| ••••Test•class•for•the•SHA1Hash•class.•Inherits•the•TestCase•class•from•unittest
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

hashes/sha1.py
| 138| ••••••••self.assertEqual(SHA1Hash(msg).final_hash(),•hashlib.sha1(msg).hexdigest())
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

hashes/sha1.py
| 143| ••••Provides•option•'string'•or•'file'•to•take•input•and•prints•the•calculated•SHA1
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

hashes/sha1.py
| 144| ••••hash.••unittest.main()•has•been•commented•because•we•probably•don't•want•to•run
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

hashes/sha1.py
| 148| ••••parser•=•argparse.ArgumentParser(description="Process•some•strings•or•files")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

hashes/sha1.py
| 155| ••••parser.add_argument("--file",•dest="input_file",•help="Hash•contents•of•a•file")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

sorts/intro_sort.py
| 159| ••••••••pivot•=•median_of_3(array,•start,•start•+•((end•-•start)•//•2)•+•1,•end•-•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

sorts/strand_sort.py
|   4| def•strand_sort(arr:•list,•reverse:•bool•=•False,•solution:•list•=•None)•->•list:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_493/sol1.py
|   4| 70•coloured•balls•are•placed•in•an•urn,•10•for•each•of•the•seven•rainbow•colours.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

matrix/spiral_print.py
|  55| ••••••••remainMat•=•[row[1•:•matCol•-•1]•for•row•in•a[1•:•matRow•-•1]]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

matrix/spiral_print.py
|  55| ••••••••remainMat•=•[row[1•:•matCol•-•1]•for•row•in•a[1•:•matRow•-•1]]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

graphs/minimum_spanning_tree_prims2.py
|   2| Prim's•(also•known•as•Jarník's)•algorithm•is•a•greedy•algorithm•that•finds•a•minimum
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/minimum_spanning_tree_prims2.py
|   3| spanning•tree•for•a•weighted•undirected•graph.•This•means•it•finds•a•subset•of•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/minimum_spanning_tree_prims2.py
|   4| edges•that•forms•a•tree•that•includes•every•vertex,•where•the•total•weight•of•all•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/minimum_spanning_tree_prims2.py
|   5| edges•in•the•tree•is•minimized.•The•algorithm•operates•by•building•this•tree•one•vertex
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/minimum_spanning_tree_prims2.py
|   6| at•a•time,•from•an•arbitrary•starting•vertex,•at•each•step•adding•the•cheapest•possible
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/minimum_spanning_tree_prims2.py
|  41| ••••heap•helper•function•get•the•position•of•the•right•child•of•the•current•node
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/minimum_spanning_tree_prims2.py
|  56| ••••extract_min:•function•to•remove•and•return•the•element•with•lowest•weight•(highest
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/minimum_spanning_tree_prims2.py
|  61| ••••_bubble_down:•helper•function•to•place•a•node•at•the•proper•position•(downward
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/minimum_spanning_tree_prims2.py
|  86| ••••••••self.heap:•list[tuple[T,•int]]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/minimum_spanning_tree_prims2.py
|  87| ••••••••self.position_map:•dict[T,•int]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/minimum_spanning_tree_prims2.py
|  88| ••••••••self.elements:•int•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/minimum_spanning_tree_prims2.py
| 134| ••••••••#•Place•a•node•at•the•proper•position•(upward•movement)•[to•be•used•internally
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/minimum_spanning_tree_prims2.py
| 154| ••••••••if•child_left_position•<•self.elements•and•child_right_position•<•self.elements:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

graphs/minimum_spanning_tree_prims2.py
| 198| ••••••••self.connections:•dict[T,•dict[T,•int]]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/minimum_spanning_tree_prims2.py
| 199| ••••••••self.nodes:•int•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/minimum_spanning_tree_prims2.py
| 243| ••••dist:•dict[T,•int]•=•{node:•maxsize•for•node•in•graph.connections}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/minimum_spanning_tree_prims2.py
| 244| ••••parent:•dict[T,•T•|•None]•=•{node:•None•for•node•in•graph.connections}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/minimum_spanning_tree_prims2.py
| 246| ••••priority_queue:•MinPriorityQueue[T]•=•MinPriorityQueue()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/minimum_spanning_tree_prims2.py
| 266| ••••••••••••if•dist[neighbour]•>•dist[node]•+•graph.connections[node][neighbour]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphs/minimum_spanning_tree_prims2.py
| 267| ••••••••••••••••dist[neighbour]•=•dist[node]•+•graph.connections[node][neighbour]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/eulers_totient.py
|   1| #•Eulers•Totient•function•finds•the•number•of•relative•primes•of•a•number•n•from•1•to•n
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

digital_image_processing/change_brightness.py
|  17| ••••••••raise•ValueError("level•must•be•between•-255.0•(black)•and•255.0•(white)")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

divide_and_conquer/max_subarray_sum.py
|  43| ••••max_sum_of_left•=•max_sum_from_start(array[left•:•mid•+•1][::-1])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

divide_and_conquer/max_subarray_sum.py
|  44| ••••max_sum_of_right•=•max_sum_from_start(array[mid•+•1•:•right•+•1])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

divide_and_conquer/max_subarray_sum.py
|  75| ••••"Maximum•sum•of•contiguous•subarray:",•max_subarray_sum(array,•0,•array_length•-•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/proth_number.py
|  53| ••••••••••••••••proth_list.append(2•**•(block•+•1)•+•proth_list[proth_index•-•1])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

bit_manipulation/binary_or_operator.py
|   6| ••••Take•in•2•integers,•convert•them•to•binary,•and•return•a•binary•number•that•is•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

bit_manipulation/binary_or_operator.py
|  41| ••••••••for•char_a,•char_b•in•zip(a_binary.zfill(max_len),•b_binary.zfill(max_len))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

digital_image_processing/filters/gaussian_filter.py
|  12| ••••x,•y•=•mgrid[0•-•center•:•k_size•-•center,•0•-•center•:•k_size•-•center]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/filters/gaussian_filter.py
|  12| ••••x,•y•=•mgrid[0•-•center•:•k_size•-•center,•0•-•center•:•k_size•-•center]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/filters/gaussian_filter.py
|  13| ••••g•=•1•/•(2•*•pi•*•sigma)•*•exp(-(square(x)•+•square(y))•/•(2•*•square(sigma)))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

digital_image_processing/filters/gaussian_filter.py
|  27| ••••••••window•=•ravel(image[i•:•i•+•k_size,•j•:•j•+•k_size])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/filters/gaussian_filter.py
|  27| ••••••••window•=•ravel(image[i•:•i•+•k_size,•j•:•j•+•k_size])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/filters/gaussian_filter.py
|  36| ••••dst•=•dot(image_array,•filter_array).reshape(dst_height,•dst_width).astype(uint8)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/least_common_multiple.py
|  52| ••••return•first_num•//•greatest_common_divisor(first_num,•second_num)•*•second_num
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

maths/least_common_multiple.py
|  57| ••••••••"from•__main__•import•least_common_multiple_slow,•least_common_multiple_fast"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

quantum/single_qubit_measure.py
|  12| def•single_qubit_measure(qubits:•int,•classical_bits:•int)•->•q.result.counts.Counts:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

strings/manacher.py
|   8| ••••Manacher’s•algorithm•which•finds•Longest•palindromic•Substring•in•linear•time.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

strings/manacher.py
|  10| ••••1.•first•this•convert•input_string("xyx")•into•new_string("x|y|x")•where•odd
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

strings/manacher.py
|  12| ••••2.•for•each•character•in•new_string•it•find•corresponding•length•and•store•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

strings/manacher.py
|  13| ••••••••length•and•l,r•to•store•previously•calculated•info.(please•look•the•explanation
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

strings/manacher.py
|  30| ••••#•we•will•store•the•starting•and•ending•of•previous•furthest•ending•palindromic
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

strings/manacher.py
|  50| ••••••••#•does•this•string•is•ending•after•the•previously•explored•end•(that•is•r)•?
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

strings/manacher.py
|  53| ••••••••••••l•=•j•-•k•+•1••#•noqa:•E741
|    | [NORMAL] PycodestyleBear (E741):
|    | E741 ambiguous variable name 'l''

strings/manacher.py
|  62| ••••s•=•new_input_string[start•-•max_length•//•2•:•start•+•max_length•//•2•+•1]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

strings/manacher.py
|  78| consider•the•string•for•which•we•are•calculating•the•longest•palindromic•substring•is
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

strings/manacher.py
|  79| shown•above•where•...•are•some•characters•in•between•and•right•now•we•are•calculating
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

strings/manacher.py
|  80| the•length•of•palindromic•substring•with•center•at•a5•with•following•conditions•:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

strings/manacher.py
|  81| i)•we•have•stored•the•length•of•palindromic•substring•which•has•center•at•a3•(starts•at
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

strings/manacher.py
|  82| ••••l•ends•at•r)•and•it•is•the•furthest•ending•till•now,•and•it•has•ending•after•a6
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

strings/manacher.py
|  85| iv)•a1•is•corresponding•equal•character•of•a5•in•palindrome•with•center•a3•(remember
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

strings/manacher.py
|  88| now•for•a5•we•will•calculate•the•length•of•palindromic•substring•with•center•as•a5•but
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

strings/manacher.py
|  90| Yes,•look•the•above•string•we•know•that•a5•is•inside•the•palindrome•with•center•a3•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

strings/manacher.py
|  97| so•we•can•say•that•palindrome•at•center•a5•is•at•least•as•long•as•palindrome•at•center
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

strings/manacher.py
|  98| a1•but•this•only•holds•if•a0•and•a6•are•inside•the•limits•of•palindrome•centered•at•a3
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

strings/manacher.py
| 104| and•if•the•a5•lies•outside•of•l,r•boundary•we•calculate•length•of•palindrome•with
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

backtracking/n_queens_math.py
|   4| The•n•queens•problem•is:•placing•N•queens•on•a•N•*•N•chess•board•such•that•no•queen
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

backtracking/n_queens_math.py
|   5| can•attack•any•other•queens•placed•on•that•chess•board.••This•means•that•one•queen
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

backtracking/n_queens_math.py
|  10| To•solve•this•problem•we•will•use•simple•math.•First•we•know•the•queen•can•move•in•all
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

backtracking/n_queens_math.py
|  11| the•possible•ways,•we•can•simplify•it•in•this:•vertical,•horizontal,•diagonal•left•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

backtracking/n_queens_math.py
|  19| On•a•chessboard•vertical•movement•could•be•the•rows•and•horizontal•movement•could•be
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

backtracking/n_queens_math.py
|  22| In•programming•we•can•use•an•array,•and•in•this•array•each•index•could•be•the•rows•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

backtracking/n_queens_math.py
|  25| ••••.•Q•.•.•••••We•have•this•chessboard•with•one•queen•in•each•column•and•each•queen
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

backtracking/n_queens_math.py
|  30| So•if•we•use•an•array•and•we•verify•that•each•value•in•the•array•is•different•to•each
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

backtracking/n_queens_math.py
|  31| other•we•know•that•at•least•the•queens•can't•attack•each•other•in•horizontal•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

backtracking/n_queens_math.py
|  34| At•this•point•we•have•it•halfway•completed•and•we•will•treat•the•chessboard•as•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

backtracking/n_queens_math.py
|  35| Cartesian•plane.••Hereinafter•we•are•going•to•remember•basic•math,•so•in•the•school•we
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

backtracking/n_queens_math.py
|  44| This•formula•allow•us•to•get•the•slope.•For•the•angles•45º•(right•diagonal)•and•135º
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

backtracking/n_queens_math.py
|  57| https://www.mathsisfun.com/y_intercept.html),•if•we•change•the•formula•to•solve•for•b
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

backtracking/n_queens_math.py
|  62| And•since•we•already•have•the•m•values•for•the•angles•45º•and•135º,•this•formula•would
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

backtracking/n_queens_math.py
|  74| Applying•these•two•formulas•we•can•check•if•a•queen•in•some•position•is•being•attacked
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

backtracking/n_queens_math.py
|  97| ••••#•Get•next•row•in•the•current•board•(possible_board)•to•fill•it•with•a•queen
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

backtracking/n_queens_math.py
| 100| ••••#•If•row•is•equal•to•the•size•of•the•board•it•means•there•are•a•queen•in•each•row•in
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

backtracking/n_queens_math.py
| 103| ••••••••#•We•convert•the•variable•possible_board•that•looks•like•this:•[1,•3,•0,•2]•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

backtracking/n_queens_math.py
| 105| ••••••••boards.append([".•"•*•i•+•"Q•"•+•".•"•*•(n•-•1•-•i)•for•i•in•possible_board])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

backtracking/n_queens_math.py
| 108| ••••#•We•iterate•each•column•in•the•row•to•find•all•possible•results•in•each•row
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

backtracking/n_queens_math.py
| 111| ••••••••#•We•apply•that•we•learned•previously.•First•we•check•that•in•the•current•board
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

backtracking/n_queens_math.py
| 112| ••••••••#•(possible_board)•there•are•not•other•same•value•because•if•there•is•it•means
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

backtracking/n_queens_math.py
| 113| ••••••••#•that•there•are•a•collision•in•vertical.•Then•we•apply•the•two•formulas•we
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

backtracking/n_queens_math.py
| 119| ••••••••#•And•we•verify•if•the•results•of•this•two•formulas•not•exist•in•their•variables
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

backtracking/n_queens_math.py
| 122| ••••••••#•If•any•or•these•are•True•it•means•there•is•a•collision•so•we•continue•to•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

backtracking/n_queens_math.py
| 142| ••••boards:•list[list[str]]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/markov_chain.py
|  45| ••••Running•Markov•Chain•algorithm•and•calculating•the•number•of•times•each•node•is
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

maths/trapezoidal_rule.py
|   2| Numerical•integration•or•quadrature•for•a•smooth•function•f•with•known•values•at•x_i
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

sorts/merge_insertion_sort.py
|  71| ••••••••return•merge(sortlist_2d(list_2d[:middle]),•sortlist_2d(list_2d[middle:]))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

sorts/merge_insertion_sort.py
|  77| ••••Group•the•items•into•two•pairs,•and•leave•one•element•if•there•is•a•last•odd•item.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

sorts/merge_insertion_sort.py
| 109| ••••Generate•the•sorted_list•of•them•so•that•you•can•avoid•unnecessary•comparison.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

sorts/merge_insertion_sort.py
| 124| ••••Put•999•in•last•of•the•sorted_list•so•that•you•can•avoid•unnecessary•comparison.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

sorts/merge_insertion_sort.py
| 175| ••••••••••••result•=•result[:•i•+•2]•+•binary_search_insertion(result[i•+•2•:],•pivot)
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

sorts/merge_insertion_sort.py
| 175| ••••••••••••result•=•result[:•i•+•2]•+•binary_search_insertion(result[i•+•2•:],•pivot)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

sorts/merge_insertion_sort.py
| 177| ••••••••••••result•=•result[:•i•+•1]•+•binary_search_insertion(result[i•+•1•:],•pivot)
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

sorts/merge_insertion_sort.py
| 177| ••••••••••••result•=•result[:•i•+•1]•+•binary_search_insertion(result[i•+•1•:],•pivot)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/data_transformations.py
|   3| Normalization•is•the•process•of•converting•numerical•data•to•a•standard•range•of•values.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

machine_learning/data_transformations.py
|   4| This•range•is•typically•between•[0,•1]•or•[-1,•1].•The•equation•for•normalization•is
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/data_transformations.py
|   5| x_norm•=•(x•-•x_min)/(x_max•-•x_min)•where•x_norm•is•the•normalized•value,•x•is•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

machine_learning/data_transformations.py
|   6| value,•x_min•is•the•minimum•value•within•the•column•or•list•of•data,•and•x_max•is•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/data_transformations.py
|   7| maximum•value•within•the•column•or•list•of•data.•Normalization•is•used•to•speed•up•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/data_transformations.py
|   8| training•of•data•and•put•all•of•the•data•on•a•similar•scale.•This•is•useful•because
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

machine_learning/data_transformations.py
|  13| Standardization•is•the•process•of•converting•numerical•data•to•a•normally•distributed
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/data_transformations.py
|  14| range•of•values.•This•range•will•have•a•mean•of•0•and•standard•deviation•of•1.•This•is
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/data_transformations.py
|  16| x_std•=•(x•-•mu)/(sigma)•where•mu•is•the•mean•of•the•column•or•list•of•values•and•sigma
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/data_transformations.py
|  19| Choosing•between•Normalization•&•Standardization•is•more•of•an•art•of•a•science,•but•it
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/data_transformations.py
|  24| ••••3.•If•a•column•or•list•of•values•has•extreme•values•/•outliers,•use•standardization
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/volume.py
|  40| ••••The•intersection•is•composed•by•two•spherical•caps•and•therefore•its•volume•is•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/volume.py
|  41| ••••sum•of•the•volumes•of•the•spherical•caps.•First,•it•calculates•the•heights•(h1,•h2)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/volume.py
| 187| ••••:return•1/3•*•pi•*•height•*•(radius_1^2•+•radius_top^2•+•radius_1•*•radius_2)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/volume.py
| 218| ••••print("Spheres•intersetion:•"•+•str(vol_spheres_intersect(2,•2,•1)))••#•~=•21.21
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

ciphers/playfair_cipher.py
|   6| def•chunker(seq:•Iterable[str],•size:•int)•->•Generator[tuple[str,•...],•None,•None]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

ciphers/playfair_cipher.py
|  50| ••••#•copy•key•chars•into•the•table•if•they•are•in•`alphabet`•ignoring•duplicates
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

other/linear_congruential_generator.py
|   3| from•time•import•time
|    | [NORMAL] PycodestyleBear (E402):
|    | E402 module level import not at top of file'

other/linear_congruential_generator.py
|  11| ••••#•The•default•value•for•**seed**•is•the•result•of•a•function•call•which•is•not
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

other/linear_congruential_generator.py
|  12| ••••#•normally•recommended•and•causes•flake8-bugbear•to•raise•a•B008•error.•However,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

other/linear_congruential_generator.py
|  13| ••••#•in•this•case,•it•is•accptable•because•`LinearCongruentialGenerator.__init__()`
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

other/linear_congruential_generator.py
|  14| ••••#•will•only•be•called•once•per•instance•and•it•ensures•that•each•instance•will
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

other/linear_congruential_generator.py
|  21| ••••••••modulo•is•the•largest•number•that•can•be•generated•(exclusive).•The•most
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

other/linear_congruential_generator.py
|  32| ••••••••The•largest•number•that•can•be•generated•is•modulo-1.•modulo•is•set•in•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

other/linear_congruential_generator.py
|  35| ••••••••self.seed•=•(self.multiplier•*•self.seed•+•self.increment)•%•self.modulo
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

linear_algebra/src/power_iteration.py
|  51| ••••#•Set•convergence•to•False.•Will•define•convergence•when•we•exceed•max_iterations
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

linear_algebra/src/power_iteration.py
| 114| ••••••••#•Last•column•in•this•matrix•is•eigenvector•corresponding•to•largest•eigenvalue.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

linear_algebra/src/power_iteration.py
| 121| ••••••••assert•np.linalg.norm(np.abs(eigen_vector)•-•np.abs(eigen_vector_max))•<=•1e-6
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

other/fischer_yates_shuffle.py
|   3| The•Fisher–Yates•shuffle•is•an•algorithm•for•generating•a•random•permutation•of•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

other/fischer_yates_shuffle.py
|  25| ••••print("FY•Shuffle",•fisher_yates_shuffle(integers),•fisher_yates_shuffle(strings))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

data_structures/queue/priority_queue_using_list.py
|   2| Pure•Python•implementations•of•a•Fixed•Priority•Queue•and•an•Element•Priority•Queue
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

data_structures/queue/priority_queue_using_list.py
|  17| ••••Tasks•can•be•added•to•a•Priority•Queue•at•any•time•and•in•any•order•but•when•Tasks
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

data_structures/queue/priority_queue_using_list.py
|  18| ••••are•removed•then•the•Task•with•the•highest•priority•is•removed•in•FIFO•order.••In
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/queue/priority_queue_using_list.py
|  19| ••••code•we•will•use•three•levels•of•priority•with•priority•zero•Tasks•being•the•most
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/queue/priority_queue_using_list.py
|  62| ••••data_structures.queue.priority_queue_using_list.UnderFlowError:•All•queues•are•empty
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

data_structures/queue/priority_queue_using_list.py
| 100| ••••••••return•"\n".join(f"Priority•{i}:•{q}"•for•i,•q•in•enumerate(self.queues))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/queue/priority_queue_using_list.py
| 105| ••••Element•Priority•Queue•is•the•same•as•Fixed•Priority•Queue•except•that•the•value•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/queue/priority_queue_using_list.py
| 106| ••••the•element•itself•is•the•priority.•The•rules•for•priorities•are•the•same•the•as
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/queue/priority_queue_using_list.py
| 144| ••••data_structures.queue.priority_queue_using_list.UnderFlowError:•The•queue•is•empty
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

strings/word_occurrence.py
|  18| ••••occurrence:•DefaultDict[str,•int]•=•defaultdict(int)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

digital_image_processing/convert_to_negative.py
|   2| ••••Implemented•an•algorithm•using•opencv•to•convert•a•colored•image•into•its•negative
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

web_programming/instagram_video.py
|   7| ••••base_url•=•"https://downloadgram.net/wp-json/wppress/video-downloader/video?url="
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/binary_tree/merge_two_binary_trees.py
|  18| ••••••••self.left:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/merge_two_binary_trees.py
|  19| ••••••••self.right:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/merge_two_binary_trees.py
|  22| def•merge_two_binary_trees(tree1:•Node•|•None,•tree2:•Node•|•None)•->•Node•|•None:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/decimal_isolate.py
|  11| ••••If•digitAmount•>•0•round•to•that•decimal•place,•else•print•the•entire•decimal.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

financial/equated_monthly_installments.py
|  47| ••••#•Years•to•repay•is•multiplied•by•12•to•get•number•of•payments•as•payment•is•monthly
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/integration_by_simpson_approx.py
|  10| (•read•article•:•https://cp-algorithms.com/num_methods/simpson-integration.html•)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/integration_by_simpson_approx.py
|  37| def•simpson_integration(function,•a:•float,•b:•float,•precision:•int•=•4)•->•float:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

maths/integration_by_simpson_approx.py
|  47| ••••••••result•:•the•value•of•the•approximated•integration•of•function•in•range•a•to•b
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/integration_by_simpson_approx.py
|  72| ••••AssertionError:•precision•should•be•positive•integer•your•input•:•wrong_input
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/integration_by_simpson_approx.py
|  76| ••••AssertionError:•the•function(object)•passed•should•be•callable•your•input•:•...
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

maths/integration_by_simpson_approx.py
|  94| ••••),•f"the•function(object)•passed•should•be•callable•your•input•:•{function}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/integration_by_simpson_approx.py
|  95| ••••assert•isinstance(a,•(float,•int)),•f"a•should•be•float•or•integer•your•input•:•{a}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/integration_by_simpson_approx.py
|  97| ••••••••"the•function•should•return•integer•or•float•return•type•of•your•function,•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/integration_by_simpson_approx.py
| 100| ••••assert•isinstance(b,•(float,•int)),•f"b•should•be•float•or•integer•your•input•:•{b}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/integration_by_simpson_approx.py
| 105| ••••#•just•applying•the•formula•of•simpson•for•approximate•integration•written•in
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/stacks/evaluate_postfix_notations.py
|  27| ••••stack:•list[Any]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

computer_vision/mosaic_augmentation.py
|  44| ••••••••cv2.imwrite(f"{file_root}.jpg",•new_image,•[cv2.IMWRITE_JPEG_QUALITY,•85])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

computer_vision/mosaic_augmentation.py
| 103| ••••-•filter_scale•<type:•float>:•the•condition•of•downscale•image•and•bounding•box
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

computer_vision/mosaic_augmentation.py
| 111| ••••scale_x•=•scale_range[0]•+•random.random()•*•(scale_range[1]•-•scale_range[0])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

computer_vision/mosaic_augmentation.py
| 112| ••••scale_y•=•scale_range[0]•+•random.random()•*•(scale_range[1]•-•scale_range[0])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

computer_vision/mosaic_augmentation.py
| 133| ••••••••••••img•=•cv2.resize(img,•(output_size[1]•-•divid_point_x,•divid_point_y))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

computer_vision/mosaic_augmentation.py
| 134| ••••••••••••output_img[:divid_point_y,•divid_point_x•:•output_size[1],•:]•=•img
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

computer_vision/mosaic_augmentation.py
| 142| ••••••••••••img•=•cv2.resize(img,•(divid_point_x,•output_size[0]•-•divid_point_y))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

computer_vision/mosaic_augmentation.py
| 143| ••••••••••••output_img[divid_point_y•:•output_size[0],•:divid_point_x,•:]•=•img
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

computer_vision/mosaic_augmentation.py
| 152| ••••••••••••••••img,•(output_size[1]•-•divid_point_x,•output_size[0]•-•divid_point_y)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

computer_vision/mosaic_augmentation.py
| 155| ••••••••••••••••divid_point_y•:•output_size[0],•divid_point_x•:•output_size[1],•:
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

computer_vision/mosaic_augmentation.py
| 155| ••••••••••••••••divid_point_y•:•output_size[0],•divid_point_x•:•output_size[1],•:
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

computer_vision/mosaic_augmentation.py
| 155| ••••••••••••••••divid_point_y•:•output_size[0],•divid_point_x•:•output_size[1],•:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

computer_vision/mosaic_augmentation.py
| 169| ••••••••••••if•filter_scale•<•(anno[3]•-•anno[1])•and•filter_scale•<•(anno[4]•-•anno[2])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

digital_image_processing/histogram_equalization/histogram_stretch.py
|  59| ••••file_path•=•os.path.join(os.path.basename(__file__),•"image_data/input.jpg")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

sorts/tim_sort.py
|  22| ••••••••lst•=•lst[:pos]•+•[value]•+•lst[pos:index]•+•lst[index•+•1•:]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

data_structures/linked_list/merge_two_lists.py
|  15| ••••data:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/linked_list/merge_two_lists.py
|  16| ••••next:•Node•|•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/linked_list/merge_two_lists.py
|  21| ••••••••self.head:•Node•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/linked_list/merge_two_lists.py
|  27| ••••••••>>>•tuple(SortedLinkedList(test_data_odd))•==•tuple(sorted(test_data_odd))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

data_structures/linked_list/merge_two_lists.py
|  29| ••••••••>>>•tuple(SortedLinkedList(test_data_even))•==•tuple(sorted(test_data_even))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/linked_list/merge_two_lists.py
|  70| ••••'-11•->•-2•->•-1•->•0•->•0•->•1•->•2•->•3•->•3•->•4•->•5•->•6•->•7•->•8•->•9•->•10'
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

arithmetic_analysis/newton_forward_interpolation.py
|  25| ••••y:•list[list[float]]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

hashes/md5.py
|  24| ••••••••newString•+=•bitString32[8•*•i•:•8•*•i•+•8]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

hashes/md5.py
|  41| ••••••••thing•+=•hexrep[2•*•i•:•2•*•i•+•2]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

hashes/md5.py
|  76| ••••••••currPart•=•bitString[currPos•:•currPos•+•512]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

hashes/md5.py
|  79| ••••••••••••mySplits.append(int(rearrange(currPart[32•*•i•:•32•*•i•+•32]),•2))
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

hashes/md5.py
| 221| ••••digest•=•reformatHex(a0)•+•reformatHex(b0)•+•reformatHex(c0)•+•reformatHex(d0)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_010/sol1.py
|  52| ••••return•sum(num•for•num•in•range(3,•n,•2)•if•is_prime(num))•+•2•if•n•>•2•else•0
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

sorts/bubble_sort.py
|  19| ••••>>>•bubble_sort(['d',•'a',•'b',•'e',•'c'])•==•sorted(['d',•'a',•'b',•'e',•'c'])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

sorts/bubble_sort.py
|  26| ••••>>>•collection•=•random.choices(string.ascii_letters•+•string.digits,•k=100)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

sorts/bubble_sort.py
|  36| ••••••••••••••••collection[j],•collection[j•+•1]•=•collection[j•+•1],•collection[j]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

dynamic_programming/sum_of_subset.py
|  10| ••••subset•=•[[False•for•i•in•range(requiredSum•+•1)]•for•i•in•range(arrLen•+•1)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

dynamic_programming/sum_of_subset.py
|  12| ••••#•for•each•arr•value,•a•sum•of•zero(0)•can•be•formed•by•not•taking•any•element
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

dynamic_programming/sum_of_subset.py
|  26| ••••••••••••••••subset[i][j]•=•subset[i•-•1][j]•or•subset[i•-•1][j•-•arr[i•-•1]]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

arithmetic_analysis/secant_method.py
|  16| def•secant_method(lower_bound:•float,•upper_bound:•float,•repeats:•int)•->•float:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_032/sol32.py
|   3| digits•1•to•n•exactly•once;•for•example,•the•5-digit•number,•15234,•is•1•through
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_032/sol32.py
|  41| ••••Finds•the•sum•of•all•products•whose•multiplicand/multiplier/product•identity
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

strings/word_patterns.py
|  31| ••••all_patterns:•dict•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

strings/word_patterns.py
|  43| ••••print(f"Done!••{len(all_patterns):,}•word•patterns•found•in•{totalTime}•seconds.")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

cellular_automata/nagel_schrekenberg.py
|   4| The•highway•is•a•loop•so•when•a•car•comes•to•one•end,•it•will•come•out•on•the•other.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

cellular_automata/nagel_schrekenberg.py
|  19| More•information•here:•https://en.wikipedia.org/wiki/Nagel%E2%80%93Schreckenberg_model
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

cellular_automata/nagel_schrekenberg.py
|  72| ••••cells•=•highway_now[car_index•+•1•:]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

cellular_automata/nagel_schrekenberg.py
|  97| ••••••••••••next_highway[car_index]•=•min(highway_now[car_index]•+•1,•max_speed)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

cellular_automata/nagel_schrekenberg.py
| 116| ••••[[-1,•2,•-1,•3],•[-1,•0,•-1,•0],•[-1,•0,•-1,•0],•[-1,•0,•-1,•0],•[-1,•0,•-1,•0]]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

cellular_automata/nagel_schrekenberg.py
| 128| ••••••••••••••••#•Change•the•position•based•on•the•speed•(with•%•to•create•the•loop)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

divide_and_conquer/mergesort.py
|  96| ••••#•the•actual•formula•to•calculate•the•middle•element•=•left•+•(right•-•left)•//•2
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

dynamic_programming/optimal_binary_search_tree.py
|   3| #•This•Python•program•implements•an•optimal•binary•search•tree•(abbreviated•BST)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

dynamic_programming/optimal_binary_search_tree.py
|  75| ••••>>>•find_optimal_binary_search_tree([Node(12,•8),•Node(10,•34),•Node(20,•50),•\
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

dynamic_programming/optimal_binary_search_tree.py
|  76| •••••••••••••••••••••••••••••••••••••••••Node(42,•3),•Node(25,•40),•Node(37,•30)])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

dynamic_programming/optimal_binary_search_tree.py
| 102| ••••#•This•2D•array•stores•the•overall•tree•cost•(which's•as•minimized•as•possible);
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

dynamic_programming/optimal_binary_search_tree.py
| 105| ••••#•sum[i][j]•stores•the•sum•of•key•frequencies•between•i•and•j•inclusive•in•nodes
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

dynamic_programming/optimal_binary_search_tree.py
| 108| ••••#•stores•tree•roots•that•will•be•used•later•for•constructing•binary•search•tree
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

dynamic_programming/optimal_binary_search_tree.py
| 120| ••••••••••••for•r•in•range(root[i][j•-•1],•root[i•+•1][j]•+•1):••#•r•is•a•temporal•root
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

dynamic_programming/optimal_binary_search_tree.py
| 121| ••••••••••••••••left•=•dp[i][r•-•1]•if•r•!=•i•else•0••#•optimal•cost•for•left•subtree
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

dynamic_programming/optimal_binary_search_tree.py
| 122| ••••••••••••••••right•=•dp[r•+•1][j]•if•r•!=•j•else•0••#•optimal•cost•for•right•subtree
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/bidirectional_breadth_first_search.py
|  25| ••••••••self,•pos_x:•int,•pos_y:•int,•goal_x:•int,•goal_y:•int,•parent:•Node•|•None
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

graphs/bidirectional_breadth_first_search.py
|  86| ••••••••••••if•not•(0•<=•pos_x•<=•len(grid[0])•-•1•and•0•<=•pos_y•<=•len(grid)•-•1):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/bidirectional_breadth_first_search.py
|  93| ••••••••••••••••Node(pos_x,•pos_y,•self.target.pos_y,•self.target.pos_x,•parent)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/bidirectional_breadth_first_search.py
| 156| ••••def•retrace_bidirectional_path(self,•fwd_node:•Node,•bwd_node:•Node)•->•Path:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/nevilles_method.py
|  16| •••••••••••x_points,•y_points:•Iterables•of•x•and•corresponding•y•points•through
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/nevilles_method.py
|  19| •••••••Return•Value:•A•list•of•the•approximated•value•and•the•Neville•iterations
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

data_structures/queue/circular_queue.py
|  48| ••••••••This•function•insert•an•element•in•the•queue•using•self.rear•value•as•an•index
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

data_structures/queue/circular_queue.py
|  69| ••••••••This•function•removes•an•element•from•the•queue•using•on•self.front•value•as•an
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

dynamic_programming/knapsack.py
|  12| ••••This•code•involves•the•concept•of•memory•functions.•Here•we•solve•the•subproblems
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

dynamic_programming/knapsack.py
|  35| ••••••••••••••••dp[i][w]•=•max(val[i•-•1]•+•dp[i•-•1][w•-•wt[i•-•1]],•dp[i•-•1][w])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

dynamic_programming/knapsack.py
|  76| ••••••••••••"Both•the•weights•and•values•vectors•must•be•either•lists•or•tuples"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

dynamic_programming/knapsack.py
|  94| ••••example_optional_set:•set•=•set()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

dynamic_programming/knapsack.py
| 108| ••••dp:•list•of•list,•the•table•of•a•solved•integer•weight•dynamic•programming•problem
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

dynamic_programming/knapsack.py
| 113| ••••optimal_set:•set,•the•optimal•subset•so•far.•This•gets•modified•by•the•function.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

dynamic_programming/knapsack.py
| 120| ••••#•for•the•current•item•i•at•a•maximum•weight•j•to•be•part•of•an•optimal•subset,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

dynamic_programming/knapsack.py
| 121| ••••#•the•optimal•value•at•(i,•j)•must•be•greater•than•the•optimal•value•at•(i-1,•j).
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

dynamic_programming/knapsack.py
| 122| ••••#•where•i•-•1•means•considering•only•the•previous•items•at•the•given•maximum•weight
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

dynamic_programming/knapsack.py
| 139| ••••F•=•[[0]•*•(w•+•1)]•+•[[0]•+•[-1•for•i•in•range(w•+•1)]•for•j•in•range(n•+•1)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

dynamic_programming/knapsack.py
| 146| ••••optimal_solution,•optimal_subset•=•knapsack_with_example_solution(w,•wt,•val)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

dynamic_programming/knapsack.py
| 150| ••••print("An•optimal•subset•corresponding•to•the•optimal•value",•optimal_subset)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

sorts/selection_sort.py
|  39| ••••••••••••collection[least],•collection[i]•=•(collection[i],•collection[least])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

strings/knuth_morris_pratt.py
|   6| ••••The•Knuth-Morris-Pratt•Algorithm•for•finding•a•pattern•within•a•piece•of•text
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

strings/knuth_morris_pratt.py
|   9| ••••1)•Preprocess•pattern•to•identify•any•suffixes•that•are•identical•to•prefixes
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

strings/knuth_morris_pratt.py
|  11| ••••••••This•tells•us•where•to•continue•from•if•we•get•a•mismatch•between•a•character
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

strings/knuth_morris_pratt.py
|  14| ••••2)•Step•through•the•text•one•character•at•a•time•and•compare•it•to•a•character•in
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

bit_manipulation/binary_shifts.py
|  71| ••••'number'•is•the•integer•to•be•arithmetically•right•shifted•'shift_amount'•times.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

bit_manipulation/binary_shifts.py
|  91| ••••••••binary_number_length•=•len(bin(number)[3:])••#•Find•2's•complement•of•number
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

bit_manipulation/binary_shifts.py
|  94| ••••••••••••"1"•+•"0"•*•(binary_number_length•-•len(binary_number))•+•binary_number
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

backtracking/all_combinations.py
|   4| ••••••••Time•complexity:•O(C(n,k))•which•is•O(n•choose•k)•=•O((n!/(k!•*•(n•-•k)!)))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

backtracking/all_combinations.py
|  15| ••••result:•list[list[int]]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

backtracking/all_combinations.py
|  33| ••••••••create_all_state(i•+•1,•total_number,•level•-•1,•current_list,•total_list)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

hashes/enigma_machine.py
|  57| ••••••••f"\nYour•Token•is•{token}•please•write•it•down.\nIf•you•want•to•decode•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/base16.py
|  30| ••••#•b16decode•the•input•into•bytes•and•decode•that•into•a•human•readable•string
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_034/sol1.py
|   5| Find•the•sum•of•all•numbers•which•are•equal•to•the•sum•of•the•factorial•of•their•digits.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/pi_monte_carlo_estimation.py
|  29| ••••The•estimate•is•generated•by•Monte•Carlo•simulations.•Let•U•be•uniformly•drawn•from
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/pi_monte_carlo_estimation.py
|  30| ••••the•unit•square•[0,•1)•x•[0,•1).•The•probability•that•U•lies•in•the•unit•circle•is:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/pi_monte_carlo_estimation.py
|  42| ••••••••2.•Repeat•the•first•step•n•times•and•count•the•number•of•points•in•the•unit
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

maths/pi_monte_carlo_estimation.py
|  47| ••••••••raise•ValueError("At•least•one•simulation•is•necessary•to•estimate•PI.")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/lstm/lstm_prediction.py
|  31| ••••test_data•=•actual_data[division•-•look_back•:]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

machine_learning/lstm/lstm_prediction.py
|  36| ••••••••train_x.append(train_data[i•:•i•+•look_back])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

machine_learning/lstm/lstm_prediction.py
|  37| ••••••••train_y.append(train_data[i•+•look_back•:•i•+•look_back•+•forward_days])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

machine_learning/lstm/lstm_prediction.py
|  37| ••••••••train_y.append(train_data[i•+•look_back•:•i•+•look_back•+•forward_days])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/lstm/lstm_prediction.py
|  39| ••••••••test_x.append(test_data[i•:•i•+•look_back])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

machine_learning/lstm/lstm_prediction.py
|  40| ••••••••test_y.append(test_data[i•+•look_back•:•i•+•look_back•+•forward_days])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

maths/entropy.py
|  34| ••••>>>•text•=•("The•Ministry•of•Truth—Minitrue,•in•Newspeak•[Newspeak•was•the•official"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/entropy.py
|  40| ••••>>>•text•=•("Had•repulsive•dashwoods•suspicion•sincerity•but•advantage•now•him.•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/entropy.py
|  41| ••••...•••••••••"Remark•easily•garret•nor•nay.••Civil•those•mrs•enjoy•shy•fat•merry.•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/entropy.py
|  42| ••••...•••••••••"You•greatest•jointure•saw•horrible.•He•private•he•on•be•imagine•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/entropy.py
|  43| ••••...•••••••••"suppose.•Fertile•beloved•evident•through•no•service•elderly•is.•Blind•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/entropy.py
|  44| ••••...•••••••••"there•if•every•no•so•at.•Own•neglected•you•preferred•way•sincerity•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/entropy.py
|  45| ••••...•••••••••"delivered•his•attempted.•To•of•message•cottage•windows•do•besides•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/entropy.py
|  46| ••••...•••••••••"against•uncivil.••Delightful•unreserved•impossible•few•estimating•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/entropy.py
|  47| ••••...•••••••••"men•favourable•see•entreaties.•She•propriety•immediate•was•improving.•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/entropy.py
|  48| ••••...•••••••••"He•or•entrance•humoured•likewise•moderate.•Much•nor•game•son•say•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

maths/entropy.py
|  49| ••••...•••••••••"feel.•Fat•make•met•can•must•form•into•gate.•Me•we•offending•prevailed•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/entropy.py
| 106| ••••••••two_char_strings[text[i•:•i•+•2]]•+=•1
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

maths/entropy.py
| 115| ••••#•••••"Had•repulsive•dashwoods•suspicion•sincerity•but•advantage•now•him.•Remark•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/entropy.py
| 116| ••••#•••••"easily•garret•nor•nay.•Civil•those•mrs•enjoy•shy•fat•merry.•You•greatest•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/entropy.py
| 117| ••••#•••••"jointure•saw•horrible.•He•private•he•on•be•imagine•suppose.•Fertile•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/entropy.py
| 118| ••••#•••••"beloved•evident•through•no•service•elderly•is.•Blind•there•if•every•no•so•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/entropy.py
| 119| ••••#•••••"at.•Own•neglected•you•preferred•way•sincerity•delivered•his•attempted.•To•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/entropy.py
| 121| ••••#•••••"unreserved•impossible•few•estimating•men•favourable•see•entreaties.•She•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/entropy.py
| 122| ••••#•••••"propriety•immediate•was•improving.•He•or•entrance•humoured•likewise•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/entropy.py
| 123| ••••#•••••"moderate.•Much•nor•game•son•say•feel.•Fat•make•met•can•must•form•into•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/edmonds_karp_multiple_source_and_sink.py
|  89| ••••••••••••raise•Exception("You•should•execute•algorithm•before•using•its•result!")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/edmonds_karp_multiple_source_and_sink.py
|  98| ••••••••self.preflow•=•[[0]•*•self.verticesCount•for•i•in•range(self.verticesCount)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/edmonds_karp_multiple_source_and_sink.py
| 107| ••••••••for•nextVertexIndex,•bandwidth•in•enumerate(self.graph[self.sourceIndex]):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/edmonds_karp_multiple_source_and_sink.py
| 143| ••••••••••••••••••••and•self.heights[vertexIndex]•>•self.heights[neighbourIndex]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/edmonds_karp_multiple_source_and_sink.py
| 163| ••••••••••••••••self.graph[vertexIndex][toIndex]•-•self.preflow[vertexIndex][toIndex]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/bfs_zero_one_shortest_path.py
|   2| Finding•the•shortest•path•in•0-1-graph•in•O(E•+•V)•which•is•faster•than•dijkstra.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphs/bfs_zero_one_shortest_path.py
|  17| ••••destination_vertex:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/bfs_zero_one_shortest_path.py
|  18| ••••weight:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/bfs_zero_one_shortest_path.py
|  25| ••••••••self._graph:•list[list[Edge]]•=•[[]•for•_•in•range(size)]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/bfs_zero_one_shortest_path.py
|  62| ••••def•get_shortest_path(self,•start_vertex:•int,•finish_vertex:•int)•->•int•|•None:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/bfs_zero_one_shortest_path.py
|  64| ••••••••Return•the•shortest•distance•from•start_vertex•to•finish_vertex•in•0-1-graph.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/bfs_zero_one_shortest_path.py
| 110| ••••••••distances:•list[int•|•None]•=•[None]•*•self.size
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/greedy_min_vertex_cover.py
|   6| URL:•https://cs.stackexchange.com/questions/129017/greedy-algorithm-for-vertex-cover
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/greedy_min_vertex_cover.py
|  23| ••••queue:•list[list]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/greedy_min_vertex_cover.py
|  25| ••••#•for•each•node•and•his•adjacency•list•add•them•and•the•rank•of•the•node•to•queue
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/trie/trie.py
|   3| of•words/patterns•in•a•set•of•words.•A•basic•Trie•however•has•O(n^2)•space•complexity
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/trie/trie.py
|   4| making•it•impractical•in•practice.•It•however•provides•O(max(search_string,•length•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/trie/trie.py
|   5| longest•word))•lookup•time•making•it•an•optimal•approach•when•space•is•not•an•issue.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/trie/trie.py
|  11| ••••••••self.nodes:•dict[str,•TrieNode]•=•dict()••#•Mapping•from•char•to•TrieNode
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/trie/trie.py
|  11| ••••••••self.nodes:•dict[str,•TrieNode]•=•dict()••#•Mapping•from•char•to•TrieNode
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

ciphers/elgamal_key_generator.py
|  14| #•Handbook•of•Applied•Cryptography(CRC•Press,•ISBN•:•0-8493-8523-7,•October•1996)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

ciphers/elgamal_key_generator.py
|  27| def•generate_key(key_size:•int)•->•tuple[tuple[int,•int,•int,•int],•tuple[int,•int]]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

ciphers/elgamal_key_generator.py
|  31| ••••d•=•random.randrange(3,•p)••#•private_key•->•have•to•be•greater•than•2•for•safety.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

ciphers/elgamal_key_generator.py
|  41| ••••if•os.path.exists(f"{name}_pubkey.txt")•or•os.path.exists(f"{name}_privkey.txt"):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

ciphers/elgamal_key_generator.py
|  45| ••••••••••••"Use•a•different•name•or•delete•these•files•and•re-run•this•program."
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

ciphers/elgamal_key_generator.py
|  54| ••••••••••••"%d,%d,%d,%d"•%•(publicKey[0],•publicKey[1],•publicKey[2],•publicKey[3])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

web_programming/nasa_data.py
|   6| def•get_apod_data(api_key:•str,•download:•bool•=•False,•path:•str•=•".")•->•dict:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_085/sol1.py
|  12| ••••For•a•grid•with•side-lengths•a•and•b,•the•number•of•rectangles•contained•in•the•grid
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

project_euler/problem_085/sol1.py
|  13| ••••is•[a*(a+1)/2]•*•[b*(b+1)/2)],•which•happens•to•be•the•product•of•the•a-th•and•b-th
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_085/sol1.py
|  14| ••••triangle•numbers.•So•to•find•the•solution•grid•(a,b),•we•need•to•find•the•two
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_085/sol1.py
|  17| ••••Denote•these•two•triangle•numbers•Ta•and•Tb.•We•want•their•product•Ta*Tb•to•be
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_085/sol1.py
|  18| ••••as•close•as•possible•to•2m.•Assuming•that•the•best•solution•is•fairly•close•to•2m,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_085/sol1.py
|  19| ••••We•can•assume•that•both•Ta•and•Tb•are•roughly•bounded•by•2m.•Since•Ta•=•a(a+1)/2,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_085/sol1.py
|  20| ••••we•can•assume•that•a•(and•similarly•b)•are•roughly•bounded•by•sqrt(2•*•2m)•=•2000.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_085/sol1.py
|  21| ••••Since•this•is•a•rough•bound,•to•be•on•the•safe•side•we•add•10%.•Therefore•we•start
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_085/sol1.py
|  22| ••••by•generating•all•the•triangle•numbers•Ta•for•1•<=•a•<=•2200.•This•can•be•done
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_085/sol1.py
|  26| ••••We•then•search•this•list•of•triangle•numbers•for•the•two•that•give•a•product
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_085/sol1.py
|  27| ••••closest•to•our•target•of•two•million.•Rather•than•testing•every•combination•of•2
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_085/sol1.py
|  28| ••••elements•of•the•list,•which•would•find•the•result•in•quadratic•time,•we•can•find
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_085/sol1.py
|  31| ••••We•iterate•through•the•list•of•triangle•numbers•using•enumerate()•so•we•have•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_085/sol1.py
|  32| ••••and•Ta.•Since•we•want•Ta•*•Tb•to•be•as•close•as•possible•to•2m,•we•know•that•Tb
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_085/sol1.py
|  33| ••••needs•to•be•roughly•2m•/•Ta.•Using•the•formula•Tb•=•b*(b+1)/2•as•well•as•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_085/sol1.py
|  37| ••••Since•the•closest•integers•to•this•estimate•will•give•product•closest•to•2m,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_085/sol1.py
|  38| ••••we•only•need•to•consider•the•integers•above•and•below.•It's•then•a•simple•matter
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_085/sol1.py
|  39| ••••to•get•the•triangle•numbers•corresponding•to•those•integers,•calculate•the•product
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_085/sol1.py
|  40| ••••Ta•*•Tb,•compare•that•product•to•our•target•2m,•and•keep•track•of•the•(a,b)•pair
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_085/sol1.py
|  63| ••••triangle_numbers:•list[int]•=•[0]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_085/sol1.py
|  64| ••••idx:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_085/sol1.py
|  70| ••••best_product:•int•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_085/sol1.py
|  71| ••••#•the•area•corresponding•to•the•grid•that•gives•the•product•closest•to•target
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_085/sol1.py
|  72| ••••area:•int•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_085/sol1.py
|  74| ••••b_estimate:•float
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_085/sol1.py
|  76| ••••b_floor:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_085/sol1.py
|  78| ••••b_ceil:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_085/sol1.py
|  80| ••••triangle_b_first_guess:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_085/sol1.py
|  82| ••••triangle_b_second_guess:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lfu_cache.py
|  22| ••••••••self.freq:•int•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lfu_cache.py
|  23| ••••••••self.next:•DoubleLinkedListNode[T,•U]•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lfu_cache.py
|  24| ••••••••self.prev:•DoubleLinkedListNode[T,•U]•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lfu_cache.py
|  27| ••••••••return•"Node:•key:•{},•val:•{},•freq:•{},•has•next:•{},•has•prev:•{}".format(
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

other/lfu_cache.py
|  28| ••••••••••••self.key,•self.val,•self.freq,•self.next•is•not•None,•self.prev•is•not•None
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

other/lfu_cache.py
| 100| ••••••••self.head:•DoubleLinkedListNode[T,•U]•=•DoubleLinkedListNode(None,•None)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lfu_cache.py
| 100| ••••••••self.head:•DoubleLinkedListNode[T,•U]•=•DoubleLinkedListNode(None,•None)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

other/lfu_cache.py
| 101| ••••••••self.rear:•DoubleLinkedListNode[T,•U]•=•DoubleLinkedListNode(None,•None)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lfu_cache.py
| 101| ••••••••self.rear:•DoubleLinkedListNode[T,•U]•=•DoubleLinkedListNode(None,•None)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

other/lfu_cache.py
| 115| ••••••••Adds•the•given•node•at•the•tail•of•the•list•and•shifting•it•to•proper•position
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

other/lfu_cache.py
| 120| ••••••••#•All•nodes•other•than•self.head•are•guaranteed•to•have•non-None•previous
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

other/lfu_cache.py
| 165| ••••LFU•Cache•to•store•a•given•capacity•of•data.•Can•be•used•as•a•stand-alone•object
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

other/lfu_cache.py
| 198| ••••#•class•variable•to•map•the•decorator•functions•to•their•respective•instance
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

other/lfu_cache.py
| 199| ••••decorator_function_to_instance_map:•dict[Callable[[T],•U],•LFUCache[T,•U]]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lfu_cache.py
| 199| ••••decorator_function_to_instance_map:•dict[Callable[[T],•U],•LFUCache[T,•U]]•=•{}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

other/lfu_cache.py
| 202| ••••••••self.list:•DoubleLinkedList[T,•U]•=•DoubleLinkedList()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lfu_cache.py
| 207| ••••••••self.cache:•dict[T,•DoubleLinkedListNode[T,•U]]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lfu_cache.py
| 236| ••••••••Returns•the•value•for•the•input•key•and•updates•the•Double•Linked•List.•Returns
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

other/lfu_cache.py
| 242| ••••••••••••value_node:•DoubleLinkedListNode[T,•U]•=•self.cache[key]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/lfu_cache.py
| 295| ••••••••••••••••••••cls.decorator_function_to_instance_map[func]•=•LFUCache(size)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

other/lfu_cache.py
| 297| ••••••••••••••••result•=•cls.decorator_function_to_instance_map[func].get(args[0])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

other/lfu_cache.py
| 300| ••••••••••••••••••••cls.decorator_function_to_instance_map[func].set(args[0],•result)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

fractals/mandelbrot.py
|  15| (see•also•https://en.wikipedia.org/wiki/Plotting_algorithms_for_the_Mandelbrot_set•)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

fractals/mandelbrot.py
|  26| ••••Return•the•relative•distance•(=•step/max_step)•after•which•the•complex•number
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

fractals/mandelbrot.py
|  84| ••••••••return•tuple(round(i•*•255)•for•i•in•colorsys.hsv_to_rgb(distance,•1,•1))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

fractals/mandelbrot.py
|  97| ••••Function•to•generate•the•image•of•the•Mandelbrot•set.•Two•types•of•coordinates
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

fractals/mandelbrot.py
|  99| ••••that•refer•to•the•complex•numbers•inside•and•outside•the•Mandelbrot•set.•The
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

fractals/mandelbrot.py
| 100| ••••figure-coordinates•in•the•arguments•of•this•function•determine•which•section
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

fractals/mandelbrot.py
| 102| ••••roughly•between•"-1.5•<•x•<•0.5"•and•"-1•<•y•<•1"•in•the•figure-coordinates.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

fractals/mandelbrot.py
| 120| ••••••••••••figure_x•=•figure_center_x•+•(image_x•/•image_width•-•0.5)•*•figure_width
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

fractals/mandelbrot.py
| 121| ••••••••••••figure_y•=•figure_center_y•+•(image_y•/•image_height•-•0.5)•*•figure_height
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

fractals/mandelbrot.py
| 125| ••••••••••••#•color•the•corresponding•pixel•based•on•the•selected•coloring-function
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

neural_network/perceptron.py
|   6| ••••that•represent•chemical•characteristics•we•can•classify•the•oil,•in•p1•or•p2
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

neural_network/perceptron.py
|  25| ••••••••:param•target:•variable•for•classification•with•two•possible•states•-1•or•1
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

neural_network/perceptron.py
|  50| ••••••••••••raise•ValueError("Sample•data•and•Target•data•do•not•have•matching•lengths")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

neural_network/perceptron.py
|  56| ••••••••self.weight:•list•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

neural_network/perceptron.py
| 225| ••••••••sample=samples,•target=exit,•learning_rate=0.01,•epoch_number=1000,•bias=-1
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

neural_network/perceptron.py
| 231| ••••••••sample:•list•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/stacks/infix_to_postfix_conversion.py
|  41| ••••stack:•Stack[str]•=•Stack()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/stacks/infix_to_postfix_conversion.py
|  53| ••••••••••••while•not•stack.is_empty()•and•precedence(char)•<=•precedence(stack.peek()):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

searches/tabu_search.py
|   2| This•is•pure•Python•implementation•of•Tabu•search•algorithm•for•a•Travelling•Salesman
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/tabu_search.py
|   3| Problem,•that•the•distances•between•the•cities•are•symmetric•(the•distance•between•city
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

searches/tabu_search.py
|   5| The•TSP•can•be•represented•into•a•graph.•The•cities•are•represented•by•nodes•and•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/tabu_search.py
|   6| distance•between•them•is•represented•by•the•weight•of•the•ark•between•the•nodes.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

searches/tabu_search.py
|  14| Be•careful•node1,•node2•and•the•distance•between•them,•must•exist•only•once.•This•means
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

searches/tabu_search.py
|  23| python•tabu_search.py•-f•your_file_name.txt•-number_of_iterations_of_tabu_search•\
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

searches/tabu_search.py
|  33| ••••Pure•implementation•of•generating•a•dictionary•of•neighbors•and•the•cost•with•each
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/tabu_search.py
|  36| ••••:param•path:•The•path•to•the•.txt•file•that•includes•the•graph•(e.g.tabudata2.txt)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/tabu_search.py
|  37| ••••:return•dict_of_neighbours:•Dictionary•with•key•each•node•and•value•a•list•of•lists
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

searches/tabu_search.py
|  38| ••••••••with•the•neighbors•of•the•node•and•the•cost•(distance)•for•each•neighbor.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

searches/tabu_search.py
|  44| ••••This•indicates•the•neighbors•of•node•(city)•'a',•which•has•neighbor•the•node•'b'
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/tabu_search.py
|  45| ••••with•distance•20,•the•node•'c'•with•distance•18,•the•node•'d'•with•distance•22•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/tabu_search.py
|  75| ••••Pure•implementation•of•generating•the•first•solution•for•the•Tabu•search•to•start,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/tabu_search.py
|  76| ••••with•the•redundant•resolution•strategy.•That•means•that•we•start•from•the•starting
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/tabu_search.py
|  77| ••••node•(e.g.•node•'a'),•then•we•go•to•the•city•nearest•(lowest•distance)•to•this•node
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

searches/tabu_search.py
|  78| ••••(let's•assume•is•node•'c'),•then•we•go•to•the•nearest•city•of•the•node•'c',•etc.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/tabu_search.py
|  81| ••••:param•path:•The•path•to•the•.txt•file•that•includes•the•graph•(e.g.tabudata2.txt)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/tabu_search.py
|  82| ••••:param•dict_of_neighbours:•Dictionary•with•key•each•node•and•value•a•list•of•lists
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/tabu_search.py
|  83| ••••••••with•the•neighbors•of•the•node•and•the•cost•(distance)•for•each•neighbor.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

searches/tabu_search.py
|  84| ••••:return•first_solution:•The•solution•for•the•first•iteration•of•Tabu•search•using
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/tabu_search.py
|  86| ••••:return•distance_of_first_solution:•The•total•distance•that•Travelling•Salesman
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

searches/tabu_search.py
| 128| ••••Pure•implementation•of•generating•the•neighborhood•(sorted•by•total•distance•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

searches/tabu_search.py
| 129| ••••each•solution•from•lowest•to•highest)•of•a•solution•with•1-1•exchange•method,•that
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/tabu_search.py
| 130| ••••means•we•exchange•each•node•in•a•solution•with•each•other•node•and•generating•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

searches/tabu_search.py
| 134| ••••:param•dict_of_neighbours:•Dictionary•with•key•each•node•and•value•a•list•of•lists
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/tabu_search.py
| 135| ••••••••with•the•neighbors•of•the•node•and•the•cost•(distance)•for•each•neighbor.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

searches/tabu_search.py
| 136| ••••:return•neighborhood_of_solution:•A•list•that•includes•the•solutions•and•the•total
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/tabu_search.py
| 137| ••••••••distance•of•each•solution•(in•form•of•list)•that•are•produced•with•1-1•exchange
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

searches/tabu_search.py
| 142| ••••...•••••••••••••••••••{'a':•[['b',•'20'],•['c',•'18'],•['d',•'22'],•['e',•'26']],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/tabu_search.py
| 143| ••••...••••••••••••••••••••'c':•[['a',•'18'],•['b',•'10'],•['d',•'23'],•['e',•'24']],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/tabu_search.py
| 144| ••••...••••••••••••••••••••'b':•[['a',•'20'],•['c',•'10'],•['d',•'11'],•['e',•'12']],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/tabu_search.py
| 145| ••••...••••••••••••••••••••'e':•[['a',•'26'],•['b',•'12'],•['c',•'24'],•['d',•'40']],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/tabu_search.py
| 146| ••••...••••••••••••••••••••'d':•[['a',•'22'],•['b',•'11'],•['c',•'23'],•['e',•'40']]}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/tabu_search.py
| 191| ••••Pure•implementation•of•Tabu•search•algorithm•for•a•Travelling•Salesman•Problem•in
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/tabu_search.py
| 194| ••••:param•first_solution:•The•solution•for•the•first•iteration•of•Tabu•search•using
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/tabu_search.py
| 196| ••••:param•distance_of_first_solution:•The•total•distance•that•Travelling•Salesman•will
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

searches/tabu_search.py
| 198| ••••:param•dict_of_neighbours:•Dictionary•with•key•each•node•and•value•a•list•of•lists
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/tabu_search.py
| 199| ••••••••with•the•neighbors•of•the•node•and•the•cost•(distance)•for•each•neighbor.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

searches/tabu_search.py
| 202| ••••:return•best_solution_ever:•The•solution•with•the•lowest•distance•that•occurred
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

searches/tabu_search.py
| 204| ••••:return•best_cost:•The•total•distance•that•Travelling•Salesman•will•travel,•if•he
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/tabu_search.py
| 230| ••••••••••••if•[first_exchange_node,•second_exchange_node]•not•in•tabu_list•and•[
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_203/sol1.py
|  39| ••••The•coefficients•of•this•triangle•are•symmetric.•A•further•improvement•to•this
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_203/sol1.py
|  99| ••••This•method•supposes•that•squared_primes•is•sorted•in•ascending•order•and•that
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_203/sol1.py
| 104| ••••If•all•the•elements•in•squared_primes•are•greater•than•num_to_look,•then•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_203/sol1.py
| 162| ••••••••if•any(num•%•prime•==•0•for•prime•in•squared_primes[:prime_squared_idx]):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphs/directed_and_undirected_(weighted)_graph.py
|   6| #•the•default•weight•is•1•if•not•assigned•but•all•the•implementation•is•weighted
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/directed_and_undirected_(weighted)_graph.py
|  74| ••••#•c•is•the•count•of•nodes•you•want•and•if•you•leave•it•or•pass•-1•to•the•function
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/directed_and_undirected_(weighted)_graph.py
| 230| ••••••••••••••••••••••••••••••••anticipating_nodes.add(stack[len_stack_minus_one])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/directed_and_undirected_(weighted)_graph.py
| 343| ••••#•c•is•the•count•of•nodes•you•want•and•if•you•leave•it•or•pass•-1•to•the•function
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/directed_and_undirected_(weighted)_graph.py
| 459| ••••••••••••••••••••••••••••••••anticipating_nodes.add(stack[len_stack_minus_one])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

backtracking/all_permutations.py
|  35| ••••••••••••create_state_space_tree(sequence,•current_sequence,•index•+•1,•index_used)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

backtracking/all_permutations.py
|  47| sequence:•list[int•|•str]•=•[3,•1,•2,•4]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

backtracking/all_permutations.py
|  50| sequence_2:•list[int•|•str]•=•["A",•"B",•"C"]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

ciphers/mixed_keyword_cypher.py
|  15| ••••>>>•mixed_keyword("college",•"UNIVERSITY")••#•doctest:•+NORMALIZE_WHITESPACE
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/mixed_keyword_cypher.py
|  16| ••••{'A':•'C',•'B':•'A',•'C':•'I',•'D':•'P',•'E':•'U',•'F':•'Z',•'G':•'O',•'H':•'B',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

ciphers/mixed_keyword_cypher.py
|  17| •••••'I':•'J',•'J':•'Q',•'K':•'V',•'L':•'L',•'M':•'D',•'N':•'K',•'O':•'R',•'P':•'W',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

ciphers/mixed_keyword_cypher.py
|  18| •••••'Q':•'E',•'R':•'F',•'S':•'M',•'T':•'S',•'U':•'X',•'V':•'G',•'W':•'H',•'X':•'N',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_011/sol1.py
|  42| ••••••••••••vertProduct•=•grid[j][i]•*•grid[j•+•1][i]•*•grid[j•+•2][i]•*•grid[j•+•3][i]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_011/sol1.py
|  43| ••••••••••••horzProduct•=•grid[i][j]•*•grid[i][j•+•1]•*•grid[i][j•+•2]•*•grid[i][j•+•3]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_011/sol1.py
|  63| ••••••••••••maxProduct•=•max(vertProduct,•horzProduct,•lrDiagProduct,•rlDiagProduct)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_091/sol1.py
|   7| There•are•exactly•fourteen•triangles•containing•a•right•angle•that•can•be•formed
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_091/sol1.py
|  20| ••••Check•if•the•triangle•described•by•P(x1,y1),•Q(x2,y2)•and•O(0,0)•is•right-angled.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_091/sol1.py
|  21| ••••Note:•this•doesn't•check•if•P•and•Q•are•equal,•but•that's•handled•by•the•use•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_091/sol1.py
|  43| ••••Return•the•number•of•right•triangles•OPQ•that•can•be•formed•by•two•points•P,•Q
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/modular_exponential.py
|   3| ••••Modular•exponentiation•is•a•type•of•exponentiation•performed•over•a•modulus.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_173/sol1.py
|   4| We•shall•define•a•square•lamina•to•be•a•square•outline•with•a•square•"hole"•so•that
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_173/sol1.py
|   5| the•shape•possesses•vertical•and•horizontal•symmetry.•For•example,•using•exactly
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_173/sol1.py
|   8| With•one-hundred•tiles,•and•not•necessarily•using•all•of•the•tiles•at•one•time,•it•is
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_173/sol1.py
|  20| ••••Return•the•number•of•different•square•laminae•that•can•be•formed•using•up•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

other/graham_scan.py
|  24| ••••>>>•graham_scan([(9,•6),•(3,•1),•(0,•0),•(5,•5),•(5,•2),•(7,•0),•(3,•3),•(1,•4)])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

other/graham_scan.py
|  33| ••••>>>•graham_scan([(-100,•20),•(99,•3),•(1,•10000001),•(5133186,•-25),•(-66,•-4)])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

other/graham_scan.py
|  39| ••••••••raise•ValueError("graham_scan:•argument•must•contain•more•than•3•points.")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

other/graham_scan.py
|  57| ••••#•remove•the•lowest•and•the•most•left•point•from•points•for•preparing•for•sort
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

other/graham_scan.py
|  78| ••••••••#•sort•the•points•accorgind•to•the•angle•from•the•lowest•and•the•most•left•point
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

other/graham_scan.py
|  84| ••••sorted_points•=•sorted(points,•key=lambda•point:•angle_comparer(point,•minx,•miny))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

other/graham_scan.py
|  90| ••••#•traversal•from•the•lowest•and•the•most•left•point•in•anti-clockwise•direction
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

other/graham_scan.py
|  98| ••••••••starting:•tuple[int,•int],•via:•tuple[int,•int],•target:•tuple[int,•int]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

other/graham_scan.py
| 140| ••••stack:•deque[tuple[int,•int]]•=•deque()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/graham_scan.py
| 166| ••••••••••••••••••••#•every•previous•points•on•those•straigh•line•is•not•convex•hull.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

other/davisb_putnamb_logemannb_loveland.py
|   4| Davis–Putnam–Logemann–Loveland•(DPLL)•algorithm•is•a•complete,•backtracking-based
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

other/davisb_putnamb_logemannb_loveland.py
|   5| search•algorithm•for•deciding•the•satisfiability•of•propositional•logic•formulae•in
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

other/davisb_putnamb_logemannb_loveland.py
|   6| conjunctive•normal•form,•i.e,•for•solving•the•Conjunctive•Normal•Form•SATisfiability
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

other/davisb_putnamb_logemannb_loveland.py
|   9| For•more•information•about•the•algorithm:•https://en.wikipedia.org/wiki/DPLL_algorithm
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

other/davisb_putnamb_logemannb_loveland.py
|  36| ••••••••self.literals:•dict[str,•bool•|•None]•=•{literal:•None•for•literal•in•literals}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/davisb_putnamb_logemannb_loveland.py
|  36| ••••••••self.literals:•dict[str,•bool•|•None]•=•{literal:•None•for•literal•in•literals}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

other/davisb_putnamb_logemannb_loveland.py
|  76| ••••••••1.•Return•True•if•both•a•literal•and•its•complement•exist•in•the•clause.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

other/davisb_putnamb_logemannb_loveland.py
|  78| ••••••••3.•Return•None(unable•to•complete•evaluation)•if•a•literal•has•no•assignment.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

other/davisb_putnamb_logemannb_loveland.py
|  82| ••••••••••••symbol•=•literal.rstrip("'")•if•literal.endswith("'")•else•literal•+•"'"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

other/davisb_putnamb_logemannb_loveland.py
|  98| ••••••••{{A1,•A2,•A3'},•{A5',•A2',•A1}}•is•((A1•v•A2•v•A3')•and•(A5'•v•A2'•v•A1))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

other/davisb_putnamb_logemannb_loveland.py
| 110| ••••••••str(Formula([Clause(["A1",•"A2'",•"A3"]),•Clause(["A5'",•"A2'",•"A1"])]))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

other/davisb_putnamb_logemannb_loveland.py
| 143| ••••clauses:•set[Clause]•=•set()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/davisb_putnamb_logemannb_loveland.py
| 158| ••••>>>•formula•=•Formula([Clause(["A1",•"A2'",•"A3"]),•Clause(["A5'",•"A2'",•"A1"])])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

other/davisb_putnamb_logemannb_loveland.py
| 192| ••••>>>•formula•=•Formula([Clause(["A1",•"A2'",•"A3"]),•Clause(["A5'",•"A2'",•"A1"])])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

other/davisb_putnamb_logemannb_loveland.py
| 202| ••••assignment:•dict[str,•bool•|•None]•=•dict()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/davisb_putnamb_logemannb_loveland.py
| 245| ••••>>>•clauses,•symbols•=•generate_parameters(Formula([clause1,•clause2,•clause3]))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

other/davisb_putnamb_logemannb_loveland.py
| 267| ••••assignment:•dict[str,•bool•|•None]•=•dict()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/davisb_putnamb_logemannb_loveland.py
| 287| ••••>>>•formula•=•Formula([Clause(["A4",•"A3",•"A5'",•"A1",•"A3'"]),•Clause(["A4"])])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

other/davisb_putnamb_logemannb_loveland.py
| 341| ••••return•dpll_algorithm(clauses,•rest,•tmp1)•or•dpll_algorithm(clauses,•rest,•tmp2)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

web_programming/crawl_google_scholar_citation.py
|  14| ••••soup•=•BeautifulSoup(requests.get(base_url,•params=params).content,•"html.parser")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

web_programming/crawl_google_scholar_citation.py
|  23| ••••••••••••"Precisely•geometry•controlled•microsupercapacitors•for•ultrahigh•areal•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

web_programming/crawl_google_scholar_citation.py
|  32| ••••print(get_citation("http://scholar.google.com/scholar_lookup",•params=params))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

ciphers/diffie_hellman.py
| 244| ••••def•is_valid_public_key_static(remote_public_key_str:•int,•prime:•int)•->•bool:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

ciphers/diffie_hellman.py
| 258| ••••••••if•not•DiffieHellman.is_valid_public_key_static(remote_public_key,•prime):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

cellular_automata/game_of_life.py
|  71| ••••••••••••••••pt,•current_canvas[r•-•1•:•r•+•2,•c•-•1•:•c•+•2]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

cellular_automata/game_of_life.py
|  71| ••••••••••••••••pt,•current_canvas[r•-•1•:•r•+•2,•c•-•1•:•c•+•2]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

cellular_automata/game_of_life.py
|  76| ••••return_canvas:•list[list[bool]]•=•current_canvas.tolist()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_077/sol1.py
|   4| It•is•possible•to•write•ten•as•the•sum•of•primes•in•exactly•five•different•ways:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_077/sol1.py
|  24| prime:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_077/sol1.py
|  36| ••••The•unique•prime•partitions•can•be•represented•as•unique•prime•decompositions,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_077/sol1.py
|  50| ••••ret:•set[int]•=•set()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_077/sol1.py
|  51| ••••prime:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_077/sol1.py
|  52| ••••sub:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_077/sol1.py
|  65| ••••Return•the•smallest•integer•that•can•be•written•as•the•sum•of•primes•in•over
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/rsa_cipher.py
|  18| ••••••••for•i•in•range(block_start,•min(block_start•+•block_size,•len(message_bytes))):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/rsa_cipher.py
|  25| ••••block_ints:•list[int],•message_length:•int,•block_size:•int•=•DEFAULT_BLOCK_SIZE
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

ciphers/rsa_cipher.py
|  27| ••••message:•list[str]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

ciphers/rsa_cipher.py
|  29| ••••••••block_message:•list[str]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

ciphers/rsa_cipher.py
|  79| ••••••••••••"ERROR:•Block•size•is•%s•bits•and•key•size•is•%s•bits.•The•RSA•cipher•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

ciphers/rsa_cipher.py
|  80| ••••••••••••"requires•the•block•size•to•be•equal•to•or•greater•than•the•key•size.•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

ciphers/rsa_cipher.py
|  85| ••••encrypted_blocks•=•[str(i)•for•i•in•encrypt_message(message,•(n,•e),•block_size)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

ciphers/rsa_cipher.py
|  94| def•read_from_file_and_decrypt(message_filename:•str,•key_filename:•str)•->•str:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/rsa_cipher.py
| 104| ••••••••••••"ERROR:•Block•size•is•%s•bits•and•key•size•is•%s•bits.•The•RSA•cipher•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

ciphers/rsa_cipher.py
| 105| ••••••••••••"requires•the•block•size•to•be•equal•to•or•greater•than•the•key•size.•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

ciphers/rsa_cipher.py
| 114| ••••return•decrypt_message(encrypted_blocks,•message_length,•(n,•d),•block_size)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/rsa_cipher.py
| 133| ••••••••encryptedText•=•encrypt_and_write_to_file(filename,•pubkey_filename,•message)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/disjoint_set/disjoint_set.py
|  10| ••••••••self.rank:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/disjoint_set/disjoint_set.py
|  11| ••••••••self.parent:•Node
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

bit_manipulation/reverse_bits.py
|  67| ••••••••raise•TypeError("'<'•not•supported•between•instances•of•'str'•and•'int'")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

other/dijkstra_bankers_algorithm.py
|   8| The•Banker's•algorithm•is•a•resource•allocation•and•deadlock•avoidance•algorithm
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

other/dijkstra_bankers_algorithm.py
|   9| developed•by•Edsger•Dijkstra•that•tests•for•safety•by•simulating•the•allocation•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

other/dijkstra_bankers_algorithm.py
|  10| predetermined•maximum•possible•amounts•of•all•resources,•and•then•makes•a•"s-state"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

other/dijkstra_bankers_algorithm.py
|  11| check•to•test•for•possible•deadlock•conditions•for•all•other•pending•activities,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

other/dijkstra_bankers_algorithm.py
|  49| ••••••••:param•claim_vector:•A•nxn/nxm•list•depicting•the•amount•of•each•resources
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

other/dijkstra_bankers_algorithm.py
|  51| ••••••••:param•allocated_resources_table:•A•nxn/nxm•list•depicting•the•amount•of•each
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

other/dijkstra_bankers_algorithm.py
|  53| ••••••••:param•maximum_claim_table:•A•nxn/nxm•list•depicting•how•much•of•each•resource
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

other/dijkstra_bankers_algorithm.py
|  62| ••••••••Check•for•allocated•resources•in•line•with•each•resource•in•the•claim•vector
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

other/dijkstra_bankers_algorithm.py
|  71| ••••••••Check•for•available•resources•in•line•with•each•resource•in•the•claim•vector
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

other/dijkstra_bankers_algorithm.py
|  83| ••••••••••••list(np.array(self.__maximum_claim_table[i])•-•np.array(allocated_resource))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

other/dijkstra_bankers_algorithm.py
|  84| ••••••••••••for•i,•allocated_resource•in•enumerate(self.__allocated_resources_table)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

other/dijkstra_bankers_algorithm.py
|  89| ••••••••This•function•builds•an•index•control•dictionary•to•track•original•ids/indices
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

other/dijkstra_bankers_algorithm.py
|  93| ••••••••...•••••test_maximum_claim_table)._BankersAlgorithm__need_index_manager()
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

other/dijkstra_bankers_algorithm.py
| 102| ••••••••Utilize•various•methods•in•this•class•to•simulate•the•Banker's•algorithm
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

other/dijkstra_bankers_algorithm.py
| 172| ••••••••••••••••••••for•original_need_index,•need_clone•in•need_index_manager.items():
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

other/dijkstra_bankers_algorithm.py
| 179| ••••••••••••••••••••available_resources•=•np.array(available_resources)•+•np.array(
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

strings/autocomplete_using_trie.py
|   8| ••••••••self._trie:•dict•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

ciphers/simple_keyword_cypher.py
|   3| ••••Removes•duplicate•alphabetic•characters•in•a•keyword•(letter•is•ignored•after•its
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

dynamic_programming/longest_increasing_subsequence.py
|   4| This•is•a•pure•Python•implementation•of•Dynamic•Programming•solution•to•the•longest
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

dynamic_programming/longest_increasing_subsequence.py
|   8| Given•an•array,•to•find•the•longest•and•increasing•sub-array•in•that•given•array•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

dynamic_programming/longest_increasing_subsequence.py
|  16| def•longest_subsequence(array:•list[int])•->•list[int]:••#•This•function•is•recursive
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

dynamic_programming/longest_increasing_subsequence.py
|  31| ••••#•If•the•array•contains•only•one•element,•we•return•it•(it's•the•stop•condition•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

dynamic_programming/longest_increasing_subsequence.py
|  39| ••••longest_subseq:•list[int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

dynamic_programming/longest_increasing_subsequence.py
|  43| ••••••••••••temp_array•=•[element•for•element•in•array[i:]•if•element•>=•array[i]]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

data_structures/linked_list/from_sequence.py
|  11| ••••••••"""Returns•a•visual•representation•of•the•node•and•all•its•following•nodes."""
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

digital_image_processing/filters/gabor_filter.py
|   4| from•cv2•import•COLOR_BGR2GRAY,•CV_8UC3,•cvtColor,•filter2D,•imread,•imshow,•waitKey
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

digital_image_processing/filters/convolve.py
|  12| ••••image_array•=•zeros((dst_height•*•dst_width,•block_size[1]•*•block_size[0]))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

digital_image_processing/filters/convolve.py
|  16| ••••••••••••window•=•ravel(image[i•:•i•+•block_size[0],•j•:•j•+•block_size[1]])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/filters/convolve.py
|  16| ••••••••••••window•=•ravel(image[i•:•i•+•block_size[0],•j•:•j•+•block_size[1]])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

sorts/bucket_sort.py
|  21| The•overall•performance•would•then•be•dominated•by•the•algorithm•used•to•sort•each
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

sorts/bucket_sort.py
|  55| ••••buckets:•list[list]•=•[[]•for•_•in•range(bucket_count)]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_057/sol1.py
|   3| It•is•possible•to•show•that•the•square•root•of•two•can•be•expressed•as•an•infinite
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_057/sol1.py
|  14| The•next•three•expansions•are•99/70,•239/169,•and•577/408,•but•the•eighth•expansion,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_057/sol1.py
|  15| 1393/985,•is•the•first•example•where•the•number•of•digits•in•the•numerator•exceeds
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_057/sol1.py
|  18| In•the•first•one-thousand•expansions,•how•many•fractions•contain•a•numerator•with
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/qr_decomposition.py
|  20| ••••textbook.••In•cases•where•efficiency•is•particularly•important,•an•optimized
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/qr_decomposition.py
|  60| ••••••••Q_k•=•np.block([[np.eye(k),•np.zeros((k,•m•-•k))],•[np.zeros((m•-•k,•k)),•Q_k]])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

web_programming/download_images_from_google_query.py
|  11| ••••"User-Agent":•"Mozilla/5.0•(Windows•NT•10.0;•Win64;•x64)•AppleWebKit/537.36"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

web_programming/download_images_from_google_query.py
|  16| def•download_images_from_google_query(query:•str•=•"dhaka",•max_images:•int•=•5)•->•int:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

web_programming/download_images_from_google_query.py
|  17| ••••"""Searches•google•using•the•provided•query•term•and•downloads•the•images•in•a•folder.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

web_programming/download_images_from_google_query.py
|  41| ••••html•=•requests.get("https://www.google.com/search",•params=params,•headers=headers)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

web_programming/download_images_from_google_query.py
|  44| ••••••••re.findall(r"AF_initDataCallback\(([^<]+)\);",•str(soup.select("script")))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

web_programming/download_images_from_google_query.py
|  58| ••••••••r"\[\"(https\:\/\/encrypted-tbn0\.gstatic\.com\/images\?.*?)\",\d+,\d+\]",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

web_programming/download_images_from_google_query.py
|  67| ••••for•index,•fixed_full_res_image•in•enumerate(matched_google_full_resolution_images):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

web_programming/download_images_from_google_query.py
|  70| ••••••••original_size_img_not_fixed•=•bytes(fixed_full_res_image,•"ascii").decode(
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

web_programming/download_images_from_google_query.py
|  81| ••••••••••••••••"•(KHTML,•like•Gecko)•Chrome/70.0.3538.102•Safari/537.36•Edge/18.19582",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

project_euler/problem_072/sol1.py
|   6| Consider•the•fraction,•n/d,•where•n•and•d•are•positive•integers.•If•n<d•and•HCF(n,d)=1,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_072/sol1.py
|   8| If•we•list•the•set•of•reduced•proper•fractions•for•d•≤•8•in•ascending•order•of•size,•we
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_072/sol1.py
|   9| get:•1/8,•1/7,•1/6,•1/5,•1/4,•2/7,•1/3,•3/8,•2/5,•3/7,•1/2,•4/7,•3/5,•5/8,•2/3,•5/7,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_072/sol1.py
|  17| Number•of•numbers•between•1•and•n•that•are•coprime•to•n•is•given•by•the•Euler's•Totient
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_072/sol1.py
|  18| function,•phi(n).•So,•the•answer•is•simply•the•sum•of•phi(n)•for•2•<=•n•<=•1,000,000
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_072/sol1.py
|  19| Sum•of•phi(d),•for•all•d|n•=•n.•This•result•can•be•used•to•find•phi(n)•using•a•sieve.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_072/sol1.py
|  43| ••••return•sum(phi[2•:•limit•+•1])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

data_structures/binary_tree/non_recursive_segment_tree.py
|   2| A•non-recursive•Segment•Tree•implementation•with•range•query•and•single•element•update,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/binary_tree/non_recursive_segment_tree.py
|  26| >>>•st•=•SegmentTree([[1,•2,•3],•[3,•2,•1],•[1,•1,•1]],•lambda•a,•b:•[a[i]•+•b[i]•for•i
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/binary_tree/non_recursive_segment_tree.py
|  27| ...•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••in•range(len(a))])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

data_structures/binary_tree/non_recursive_segment_tree.py
|  59| ••••••••any_type:•Any•|•T•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/non_recursive_segment_tree.py
|  61| ••••••••self.N:•int•=•len(arr)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/non_recursive_segment_tree.py
|  62| ••••••••self.st:•list[T]•=•[any_type•for•_•in•range(self.N)]•+•arr
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/non_recursive_segment_tree.py
| 108| ••••••••res:•T•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/non_recursive_segment_tree.py
| 109| ••••••••while•l•<=•r:••#•noqa:•E741
|    | [NORMAL] PycodestyleBear (E741):
|    | E741 ambiguous variable name 'l''

data_structures/binary_tree/non_recursive_segment_tree.py
| 148| ••••••••••••••••min_range•=•reduce(min,•test_array[i•:•j•+•1])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

data_structures/binary_tree/non_recursive_segment_tree.py
| 149| ••••••••••••••••max_range•=•reduce(max,•test_array[i•:•j•+•1])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

data_structures/binary_tree/non_recursive_segment_tree.py
| 150| ••••••••••••••••sum_range•=•reduce(lambda•a,•b:•a•+•b,•test_array[i•:•j•+•1])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

scheduling/first_come_first_served.py
|  94| ••••turnaround_times•=•calculate_turnaround_times(duration_times,•waiting_times)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

scheduling/first_come_first_served.py
|  98| ••••average_turnaround_time•=•calculate_average_turnaround_time(turnaround_times)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

conversions/binary_to_hexadecimal.py
|  51| ••••••••"0"•*•(4•*•(divmod(len(binary_str),•4)[0]•+•1)•-•len(binary_str))•+•binary_str
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

conversions/binary_to_hexadecimal.py
|  56| ••••••••hexadecimal.append(BITS_TO_HEX[binary_str[x•:•x•+•4]])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

sorts/msd_radix_sort.py
| 112| ••••list_of_ints:•list[int],•bit_position:•int,•begin_index:•int,•end_index:•int
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

dynamic_programming/iterating_through_submasks.py
|  15| ••••••••mask•:•number•which•shows•mask•(•always•integer•>•0,•zero•does•not•have•any
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

dynamic_programming/iterating_through_submasks.py
|  19| ••••••••all_submasks•:•the•list•of•submasks•of•mask•(mask•s•is•called•submask•of•mask
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

dynamic_programming/iterating_through_submasks.py
|  46| ••••to•get•other•submasks•till•we•reach•empty•submask•that•is•zero•(•zero•is•not
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/multi_heuristic_astar.py
| 158| ••••••••••••if•valid(neighbours)•and•g_function[neighbours]•>•g_function[s]•+•1:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/multi_heuristic_astar.py
| 162| ••••••••••••••••••••open_list[0].put(neighbours,•key(neighbours,•0,•goal,•g_function))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/multi_heuristic_astar.py
| 165| ••••••••••••••••••••••••••••if•key(neighbours,•var,•goal,•g_function)•<=•W2•*•key(
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/multi_heuristic_astar.py
| 169| ••••••••••••••••••••••••••••••••••••neighbours,•key(neighbours,•var,•goal,•g_function)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/multi_heuristic_astar.py
| 247| ••••close_list_anchor:•list[int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/multi_heuristic_astar.py
| 248| ••••close_list_inad:•list[int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_009/sol1.py
|  70| ••••••••timeit.timeit("solution()",•setup="from•__main__•import•solution",•number=1000)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_009/sol1.py
|  74| ••••••••••••"solution_fast()",•setup="from•__main__•import•solution_fast",•number=1000
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

physics/horizontal_projectile_motion.py
| 150| ••••print(f"Horizontal•Distance:•{str(horizontal_distance(init_vel,•angle))}•[m]")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/sock_merchant.py
|  11| ••••return•sum(socks_by_color•//•2•for•socks_by_color•in•Counter(colors).values())
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

web_programming/fetch_well_rx_price.py
|  16| def•fetch_pharmacy_and_price_list(drug_name:•str,•zip_code:•str)•->•list•|•None:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

web_programming/fetch_well_rx_price.py
|  87| ••••pharmacy_price_list:•list•|•None•=•fetch_pharmacy_and_price_list(
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

linear_algebra/src/lib.py
|  81| ••••••••••••result•=•[self.__components[i]•+•other.component(i)•for•i•in•range(size)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

linear_algebra/src/lib.py
|  94| ••••••••••••result•=•[self.__components[i]•-•other.component(i)•for•i•in•range(size)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

linear_algebra/src/lib.py
| 117| ••••••••••••prods•=•[self.__components[i]•*•other.component(i)•for•i•in•range(size)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

linear_algebra/src/lib.py
| 144| ••••••••if•type(i)•is•int•and•-len(self.__components)•<=•i•<•len(self.__components):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

linear_algebra/src/lib.py
| 264| ••••••••change_component(x:•int,•y:•int,•value:•float):•changes•specified•component
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

linear_algebra/src/lib.py
| 352| ••••••••elif•isinstance(other,•int)•or•isinstance(other,•float):••#•matrix-scalar
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

linear_algebra/src/lib.py
| 395| ••••••••minor•=•self.__matrix[:x]•+•self.__matrix[x•+•1•:]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

linear_algebra/src/lib.py
| 397| ••••••••••••minor[i]•=•minor[i][:y]•+•minor[i][y•+•1•:]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

linear_algebra/src/lib.py
| 428| ••••••••••••••••self.__matrix[0][y]•*•self.cofactor(0,•y)•for•y•in•range(self.__width)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

linear_algebra/src/lib.py
| 437| ••••ans:•list[list[float]]•=•[[0]•*•n•for•_•in•range(n)]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

linear_algebra/src/lib.py
| 447| ••••matrix:•list[list[float]]•=•[
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

digital_image_processing/morphological_operations/dilation_operation.py
|  48| ••••••••(image.shape[0]•+•kernel.shape[0]•-•1,•image.shape[1]•+•kernel.shape[1]•-•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

digital_image_processing/morphological_operations/dilation_operation.py
|  52| ••••image_padded[kernel.shape[0]•-•2•:•-1•:,•kernel.shape[1]•-•2•:•-1•:]•=•image
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/morphological_operations/dilation_operation.py
|  52| ••••image_padded[kernel.shape[0]•-•2•:•-1•:,•kernel.shape[1]•-•2•:•-1•:]•=•image
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/morphological_operations/dilation_operation.py
|  52| ••••image_padded[kernel.shape[0]•-•2•:•-1•:,•kernel.shape[1]•-•2•:•-1•:]•=•image
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/morphological_operations/dilation_operation.py
|  52| ••••image_padded[kernel.shape[0]•-•2•:•-1•:,•kernel.shape[1]•-•2•:•-1•:]•=•image
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/morphological_operations/dilation_operation.py
|  52| ••••image_padded[kernel.shape[0]•-•2•:•-1•:,•kernel.shape[1]•-•2•:•-1•:]•=•image
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

digital_image_processing/morphological_operations/dilation_operation.py
|  58| ••••••••••••••••kernel•*•image_padded[y•:•y•+•kernel.shape[0],•x•:•x•+•kernel.shape[1]]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/morphological_operations/dilation_operation.py
|  58| ••••••••••••••••kernel•*•image_padded[y•:•y•+•kernel.shape[0],•x•:•x•+•kernel.shape[1]]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/morphological_operations/dilation_operation.py
|  58| ••••••••••••••••kernel•*•image_padded[y•:•y•+•kernel.shape[0],•x•:•x•+•kernel.shape[1]]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

other/least_recently_used.py
|  33| ••••dq_store:•deque[T]••#•Cache•store•of•keys
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/least_recently_used.py
|  34| ••••key_reference:•set[T]••#•References•of•the•keys•in•cache
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/least_recently_used.py
|  35| ••••_MAX_CAPACITY:•int•=•10••#•Maximum•capacity•of•cache
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

other/least_recently_used.py
|  82| ••••lru_cache:•LRUCache[str•|•int]•=•LRUCache(4)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/dijkstra.py
|   8| 1•-••let•H•=•min•heap•data•structure,•initialized•with•0•and•s•[here•0•indicates
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/dijkstra.py
|  13| 5•-••••••go•to•the•while•loop,•line•2•//Once•a•node•is•explored•there•is•no•need
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/primelib.py
| 152| ••••assert•isinstance(number,•int)•and•number•>=•0,•"'number'•must•been•an•int•and•>=•0"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/primelib.py
| 251| ••••assert•isinstance(number•%•2•==•0,•bool),•"compare•bust•been•from•type•bool"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/primelib.py
| 267| ••••assert•isinstance(number•%•2•!=•0,•bool),•"compare•bust•been•from•type•bool"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/primelib.py
| 322| ••••),•"'ans'•must•contains•two•primes.•And•sum•of•elements•must•been•eq•'number'"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/primelib.py
| 513| ••••••••isinstance(ans,•list)•and•ans[0]•!=•pNumber1•and•ans[len(ans)•-•1]•!=•pNumber2
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/primelib.py
| 540| ••••assert•ans[0]•==•1•and•ans[len(ans)•-•1]•==•n,•"Error•in•function•getDivisiors(...)"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

web_programming/fetch_jobs.py
|  14| def•fetch_jobs(location:•str•=•"mumbai")•->•Generator[tuple[str,•str],•None,•None]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

web_programming/fetch_jobs.py
|  18| ••••••••job_title•=•job.find("a",•attrs={"data-tn-element":•"jobTitle"}).text.strip()
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

cellular_automata/one_dimensional.py
|   2| Return•an•image•of•16•generations•of•one-dimensional•cellular•automata•based•on•a•given
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

cellular_automata/one_dimensional.py
|  30| def•new_generation(cells:•list[list[int]],•rule:•list[int],•time:•int)•->•list[int]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

cellular_automata/one_dimensional.py
|  39| ••••••••situation•=•7•-•int(f"{left_neighbor}{cells[time][i]}{right_neighbor}",•2)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

cellular_automata/one_dimensional.py
|  46| ••••Convert•the•cells•into•a•greyscale•PIL.Image.Image•and•return•it•to•the•caller.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

strings/capitalize.py
|  20| ••••lower_to_upper•=•{lc:•uc•for•lc,•uc•in•zip(ascii_lowercase,•ascii_uppercase)}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

matrix/matrix_class.py
|   6| ••••Matrix•object•generated•from•a•2D•array•where•each•element•is•an•array•representing
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

matrix/matrix_class.py
|  37| ••••Identity,•Minors,•Cofactors•and•Adjugate•are•returned•as•Matrices.••Inverse•can•be
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

matrix/matrix_class.py
| 109| ••••••••••••"Matrices•must•be•formed•from•a•list•of•zero•or•more•lists•containing•at•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

matrix/matrix_class.py
| 110| ••••••••••••"least•one•and•the•same•number•of•values,•each•of•which•must•be•of•type•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

matrix/matrix_class.py
| 129| ••••••••return•[[row[i]•for•row•in•self.rows]•for•i•in•range(len(self.rows[0]))]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

matrix/matrix_class.py
| 149| ••••••••••••[0•if•column_num•!=•row_num•else•1•for•column_num•in•range(self.num_rows)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

matrix/matrix_class.py
| 194| ••••••••••••••••[self.get_minor(row,•column)•for•column•in•range(self.num_columns)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

matrix/matrix_class.py
| 214| ••••••••••••[self.cofactors().rows[column][row]•for•column•in•range(self.num_columns)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

matrix/matrix_class.py
| 244| ••••••••type_error•=•TypeError("Row•must•be•a•list•containing•all•ints•and/or•floats")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

matrix/matrix_class.py
| 270| ••••••••••••••••"Column•must•be•equal•in•length•to•the•other•columns•in•the•matrix"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

matrix/matrix_class.py
| 273| ••••••••••••self.rows•=•[self.rows[i]•+•[column[i]]•for•i•in•range(self.num_rows)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

matrix/matrix_class.py
| 276| ••••••••••••••••self.rows[i][0:position]•+•[column[i]]•+•self.rows[i][position:]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

matrix/matrix_class.py
| 283| ••••••••••••raise•TypeError("A•Matrix•can•only•be•compared•with•another•Matrix")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

matrix/matrix_class.py
| 297| ••••••••••••••••[self.rows[i][j]•+•other.rows[i][j]•for•j•in•range(self.num_columns)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

matrix/matrix_class.py
| 307| ••••••••••••••••[self.rows[i][j]•-•other.rows[i][j]•for•j•in•range(self.num_columns)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

matrix/matrix_class.py
| 314| ••••••••••••return•Matrix([[element•*•other•for•element•in•row]•for•row•in•self.rows])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

matrix/matrix_class.py
| 323| ••••••••••••••••••••[Matrix.dot_product(row,•column)•for•column•in•other.columns()]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

matrix/matrix_class.py
| 329| ••••••••••••••••"A•Matrix•can•only•be•multiplied•by•an•int,•float,•or•another•matrix"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

matrix/matrix_class.py
| 334| ••••••••••••raise•TypeError("A•Matrix•can•only•be•raised•to•the•power•of•an•int")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/binary_tree/segment_tree.py
|  19| ••••••••if•l•==•r:••#•noqa:•E741
|    | [NORMAL] PycodestyleBear (E741):
|    | E741 ambiguous variable name 'l''

data_structures/binary_tree/segment_tree.py
|  25| ••••••••••••self.st[idx]•=•max(self.st[self.left(idx)],•self.st[self.right(idx)])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/binary_tree/segment_tree.py
|  36| ••••••••if•l•==•r:••#•noqa:•E741
|    | [NORMAL] PycodestyleBear (E741):
|    | E741 ambiguous variable name 'l''

data_structures/binary_tree/segment_tree.py
|  54| ••••••••if•l•>=•a•and•r•<=•b:••#•noqa:•E741
|    | [NORMAL] PycodestyleBear (E741):
|    | E741 ambiguous variable name 'l''

data_structures/linked_list/singly_linked_list.py
| 419| ••••••••str(linked_list)•==•"-9->100->Node(77345112)->dlrow•olleH->7->5555->0->"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

data_structures/linked_list/singly_linked_list.py
| 427| ••••••••str(linked_list)•==•"100->Node(77345112)->dlrow•olleH->7->5555->0->-192.55555->"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

data_structures/linked_list/singly_linked_list.py
| 435| ••••••••str(linked_list)•==•"100->Node(77345112)->dlrow•olleH->7->5555->0->-192.55555->"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

data_structures/linked_list/singly_linked_list.py
| 443| ••••••••str(linked_list)•==•"100->Node(77345112)->dlrow•olleH->7->5555->0->-192.55555->"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/sum_of_arithmetic_series.py
|  11| ••••sum•=•(num_of_terms•/•2)•*•(2•*•first_term•+•(num_of_terms•-•1)•*•common_diff)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_051/sol1.py
|  10| number•is•the•first•example•having•seven•primes•among•the•ten•generated•numbers,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_051/sol1.py
|  12| Consequently•56003,•being•the•first•member•of•this•family,•is•the•smallest•prime
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_051/sol1.py
|  71| ••••••••family•=•[int(number_str.replace(duplicate,•digit))•for•digit•in•digits]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_051/sol1.py
|  91| ••••••••x•for•x•in•set(prime_sieve(1_000_000))•if•len(str(x))•-•len(set(str(x)))•>=•3
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/linked_list/doubly_linked_list_two.py
|   2| -•A•linked•list•is•similar•to•an•array,•it•holds•values.•However,•links•in•a•linked
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

data_structures/linked_list/doubly_linked_list_two.py
|   6| -•A•Doubly•Linked•List•(DLL)•contains•an•extra•pointer,•typically•called•previous
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/linked_list/doubly_linked_list_two.py
|   7| ••••pointer,•together•with•next•pointer•and•data•which•are•there•in•singly•linked•list.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/linked_list/doubly_linked_list_two.py
|   8| •-•Advantages•over•SLL•-•It•can•be•traversed•in•both•forward•and•backward•direction.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/ternary_search.py
|   2| This•is•a•type•of•divide•and•conquer•algorithm•which•divides•the•search•space•into
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

searches/ternary_search.py
|  16| #•This•is•the•linear•search•that•will•occur•after•the•search•space•has•become•smaller.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/ternary_search.py
| 113| def•rec_ternary_search(left:•int,•right:•int,•array:•list[int],•target:•int)•->•int:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/ternary_search.py
| 154| ••••••••••••return•rec_ternary_search(one_third•+•1,•two_third•-•1,•array,•target)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

searches/ternary_search.py
| 166| ••••assert•collection•==•sorted(collection),•f"List•must•be•ordered.\n{collection}."
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/simple_binary_search.py
|  51| ••••••••return•binary_search(a_list[midpoint•+•1•:],•item)
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

data_structures/heap/skew_heap.py
|  18| ••••••••self._value:•T•=•value
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/heap/skew_heap.py
|  19| ••••••••self.left:•SkewNode[T]•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/heap/skew_heap.py
|  20| ••••••••self.right:•SkewNode[T]•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/heap/skew_heap.py
|  80| ••••••••self._root:•SkewNode[T]•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/heap/skew_heap.py
| 109| ••••••••result:•list[Any]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/heap/skew_heap.py
| 153| ••••••••••••SkewNode.merge(self._root.left,•self._root.right)•if•self._root•else•None
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

sorts/bogo_sort.py
|   3| also•known•as•permutation•sort,•stupid•sort,•slowsort,•shotgun•sort,•or•monkey•sort.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
|   2| ••••Implementation•of•sequential•minimal•optimization•(SMO)•for•support•vector•machines
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
|   5| ••••Sequential•minimal•optimization•(SMO)•is•an•algorithm•for•solving•the•quadratic
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
|  23| ••••••••SVM•=•SmoSVM(train=train,•alpha_list=init_alphas,•kernel_func=kernel,•cost=0.4,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
|  66| ••••••••self._tol•=•np.float64(tolerance)•if•tolerance•>•0.0001•else•np.float64(0.001)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
|  69| ••••••••self.samples•=•self._norm(train[:,•1:])•if•self._auto_norm•else•train[:,•1:]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
|  70| ••••••••self.alphas•=•alpha_list•if•alpha_list•is•not•None•else•np.zeros(train.shape[0])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
|  92| ••••••••••••••••print("Optimization•done!\nEvery•sample•satisfy•the•KKT•condition!")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 130| ••••••••••••#•4:••update•error•value,here•we•only•calculate•those•non-bound•samples'
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 132| ••••••••••••self._unbound•=•[i•for•i•in•self._all_samples•if•self._is_unbound(i)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 153| ••••••••••••••••"Test•samples'•feature•length•does•not•equal•to•that•of•train•samples"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 175| ••••••••return•(r•<•-tol•and•alphas[index]•<•c)•or•(r•>•tol•and•alphas[index]•>•0.0)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 191| ••••••••••••2:sample[index]•is•bound,Use•predicted•value•deduct•true•value:•g(xi)•-•yi
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 199| ••••••••••••gx•=•np.dot(self.alphas•*•self.tags,•self._K_matrix[:,•index])•+•self._b
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 238| •••••••••••2:Second•loop•over•all•non-bound•samples•till•all•non-bound•samples•does•not
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 240| •••••••••••3:Repeat•this•two•process•endlessly,till•all•samples•does•not•voilate•kkt
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 247| ••••••••••••for•i1•in•[i•for•i•in•self._all_samples•if•self._check_obey_kkt(i)]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 274| •••••••••••2:•Start•in•a•random•point,loop•over•all•non-bound•samples•till•alpha1•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 276| •••••••••••3:•Start•in•a•random•point,loop•over•all•samples•till•alpha1•and•alpha2•are
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 289| ••••••••••••••••i2•=•min(tmp_error_dict,•key=lambda•index:•tmp_error_dict[index])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 291| ••••••••••••••••i2•=•max(tmp_error_dict,•key=lambda•index:•tmp_error_dict[index])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 441| ••••••••maps•=•{"linear":•self._linear,•"poly":•self._polynomial,•"rbf":•self._rbf}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 470| ••••••••••••headers={"User-Agent":•"Mozilla/4.0•(compatible;•MSIE•5.5;•Windows•NT)"},
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 493| ••••#•4:•calculating•best•alphas•using•SMO•algorithm•and•predict•test_data•samples
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 581| ••••We•can•not•get•the•optimum•w•of•our•kernel•svm•model•which•is•different•from•linear
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 582| ••••svm.••For•this•reason,•we•generate•randomly•distributed•points•with•high•desity•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/sequential_minimum_optimization.py
| 583| ••••prediced•values•of•these•points•are•calculated•by•using•our•tained•model.•Then•we
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

scheduling/non_preemptive_shortest_job_first.py
|  36| ••••ready_process:•list[int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

scheduling/non_preemptive_shortest_job_first.py
|  63| ••••••••••••••••total_time•-•arrival_time[target_process]•-•burst_time[target_process]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

scheduling/non_preemptive_shortest_job_first.py
|  98| ••••waiting_time•=•calculate_waitingtime(arrival_time,•burst_time,•no_of_processes)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

web_programming/current_weather.py
|  17| def•weather_onecall(lat:•float•=•55.68,•lon:•float•=•12.57,•appid:•str•=•APPID)•->•dict:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

graphs/minimum_spanning_tree_kruskal2.py
|  20| ••••••••self.map:•dict[T,•DisjointSetTreeNode[T]]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/minimum_spanning_tree_kruskal2.py
|  51| ••••••••#•connections:•map•from•the•node•to•the•neighbouring•nodes•(with•weights)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphs/minimum_spanning_tree_kruskal2.py
|  52| ••••••••self.connections:•dict[T,•dict[T,•int]]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/minimum_spanning_tree_kruskal2.py
|  67| ••••••••#•Kruskal's•Algorithm•to•generate•a•Minimum•Spanning•Tree•(MST)•of•a•graph
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

conversions/pressure_conversions.py
|  69| ••••••••••••f"Invalid•'from_type'•value:•{from_type!r}••Supported•values•are:\n"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

conversions/pressure_conversions.py
|  78| ••••••••value•*•PRESSURE_CONVERSION[from_type].from_•*•PRESSURE_CONVERSION[to_type].to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/scc_kosaraju.py
|  42| ••••graph:•list[list[int]]•=•[[]•for•i•in•range(n)]••#•graph
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/scc_kosaraju.py
|  43| ••••reversedGraph:•list[list[int]]•=•[[]•for•i•in•range(n)]••#•reversed•graph
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/scc_kosaraju.py
|  50| ••••stack:•list[int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/scc_kosaraju.py
|  51| ••••visit:•list[bool]•=•[False]•*•n
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/scc_kosaraju.py
|  52| ••••scc:•list[int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/scc_kosaraju.py
|  53| ••••component:•list[int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_074/sol1.py
|   4| The•number•145•is•well•known•for•the•property•that•the•sum•of•the•factorial•of•its
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_074/sol1.py
|   9| Perhaps•less•well•known•is•169,•in•that•it•produces•the•longest•chain•of•numbers•that
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_074/sol1.py
|  16| It•is•not•difficult•to•prove•that•EVERY•starting•number•will•eventually•get•stuck•in
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_074/sol1.py
|  26| How•many•chains,•with•a•starting•number•below•one•million,•contain•exactly•sixty
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

searches/binary_search.py
|  21| ••••Locates•the•first•element•in•a•sorted•array•that•is•larger•or•equal•to•a•given
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

searches/binary_search.py
|  27| ••••:param•sorted_collection:•some•ascending•sorted•collection•with•comparable•items
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/binary_search.py
|  30| ••••:param•hi:•past•the•highest•index•to•consider•(as•in•sorted_collection[lo:hi])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

searches/binary_search.py
|  31| ••••:return:•index•i•such•that•all•values•in•sorted_collection[lo:i]•are•<•item•and•all
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

searches/binary_search.py
|  67| ••••Locates•the•first•element•in•a•sorted•array•that•is•larger•than•a•given•value.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

searches/binary_search.py
|  72| ••••:param•sorted_collection:•some•ascending•sorted•collection•with•comparable•items
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/binary_search.py
|  75| ••••:param•hi:•past•the•highest•index•to•consider•(as•in•sorted_collection[lo:hi])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

searches/binary_search.py
|  76| ••••:return:•index•i•such•that•all•values•in•sorted_collection[lo:i]•are•<=•item•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/binary_search.py
| 112| ••••Inserts•a•given•value•into•a•sorted•array•before•other•values•with•the•same•value.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/binary_search.py
| 117| ••••:param•sorted_collection:•some•ascending•sorted•collection•with•comparable•items
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/binary_search.py
| 120| ••••:param•hi:•past•the•highest•index•to•consider•(as•in•sorted_collection[lo:hi])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

searches/binary_search.py
| 148| ••••sorted_collection.insert(bisect_left(sorted_collection,•item,•lo,•hi),•item)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

searches/binary_search.py
| 155| ••••Inserts•a•given•value•into•a•sorted•array•after•other•values•with•the•same•value.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

searches/binary_search.py
| 160| ••••:param•sorted_collection:•some•ascending•sorted•collection•with•comparable•items
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/binary_search.py
| 163| ••••:param•hi:•past•the•highest•index•to•consider•(as•in•sorted_collection[lo:hi])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

searches/binary_search.py
| 191| ••••sorted_collection.insert(bisect_right(sorted_collection,•item,•lo,•hi),•item)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

searches/binary_search.py
| 200| ••••:param•sorted_collection:•some•ascending•sorted•collection•with•comparable•items
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/binary_search.py
| 232| def•binary_search_std_lib(sorted_collection:•list[int],•item:•int)•->•int•|•None:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

searches/binary_search.py
| 238| ••••:param•sorted_collection:•some•ascending•sorted•collection•with•comparable•items
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/binary_search.py
| 269| ••••First•recursion•should•be•started•with•left=0•and•right=(len(sorted_collection)-1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/binary_search.py
| 271| ••••:param•sorted_collection:•some•ascending•sorted•collection•with•comparable•items
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

searches/binary_search.py
| 296| ••••••••return•binary_search_by_recursion(sorted_collection,•item,•left,•midpoint•-•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

searches/binary_search.py
| 298| ••••••••return•binary_search_by_recursion(sorted_collection,•item,•midpoint•+•1,•right)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/zellers_congruence.py
|  86| ••••m:•int•=•int(date_input[0]•+•date_input[1])
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/zellers_congruence.py
|  91| ••••sep_1:•str•=•date_input[2]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/zellers_congruence.py
|  97| ••••d:•int•=•int(date_input[3]•+•date_input[4])
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/zellers_congruence.py
| 103| ••••sep_2:•str•=•date_input[5]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/zellers_congruence.py
| 109| ••••y:•int•=•int(date_input[6]•+•date_input[7]•+•date_input[8]•+•date_input[9])
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/zellers_congruence.py
| 124| ••••c:•int•=•int(str(y)[:2])
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/zellers_congruence.py
| 125| ••••k:•int•=•int(str(y)[2:])
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/zellers_congruence.py
| 126| ••••t:•int•=•int(2.6•*•m•-•5.39)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/zellers_congruence.py
| 127| ••••u:•int•=•int(c•/•4)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/zellers_congruence.py
| 128| ••••v:•int•=•int(k•/•4)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/zellers_congruence.py
| 129| ••••x:•int•=•int(d•+•k)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/zellers_congruence.py
| 130| ••••z:•int•=•int(t•+•u•+•v•+•x)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/zellers_congruence.py
| 131| ••••w:•int•=•int(z•-•(2•*•c))
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/zellers_congruence.py
| 132| ••••f:•int•=•round(w•%•7)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/zellers_congruence.py
| 137| ••••••••raise•AssertionError("The•date•was•evaluated•incorrectly.•Contact•developer.")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/zellers_congruence.py
| 140| ••••response:•str•=•f"Your•date•{date_input},•is•a•{days[str(f)]}!"
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/zellers_congruence.py
| 155| ••••••••"date_input",•type=str,•help="Date•as•a•string•(mm-dd-yyyy•or•mm/dd/yyyy)"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

divide_and_conquer/convex_hull.py
|   2| The•convex•hull•problem•is•problem•of•finding•all•the•vertices•of•convex•polygon,•P•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

divide_and_conquer/convex_hull.py
|   3| a•set•of•points•in•a•plane•such•that•all•the•points•are•either•on•the•vertices•of•P•or
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

divide_and_conquer/convex_hull.py
|   4| inside•P.•TH•convex•hull•problem•has•several•applications•in•geometrical•problems,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

divide_and_conquer/convex_hull.py
| 118| ••••points:•list[Point]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

divide_and_conquer/convex_hull.py
| 141| ••••a•convex-hull•algorithm.•The•elements•of•points•must•be•either•lists,•tuples•or
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

divide_and_conquer/convex_hull.py
| 146| ••••points:•array_like,•an•iterable•of•all•well-defined•Points•constructed•passed•in.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

divide_and_conquer/convex_hull.py
| 151| ••••ValueError:•if•points•is•empty•or•None,•or•if•a•wrong•data•structure•like•a•scalar
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

divide_and_conquer/convex_hull.py
| 154| ••••TypeError:•if•an•iterable•but•non-indexable•object•(eg.•dictionary)•is•passed.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

divide_and_conquer/convex_hull.py
| 155| ••••••••••••••••The•exception•to•this•a•set•which•we'll•convert•to•a•list•before•using
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

divide_and_conquer/convex_hull.py
| 178| ••••••••••••f"Expecting•an•iterable•object•but•got•an•non-iterable•type•{points}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

divide_and_conquer/convex_hull.py
| 189| ••••Computes•the•sign•perpendicular•distance•of•a•2d•point•c•from•a•line•segment
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

divide_and_conquer/convex_hull.py
| 192| ••••means•c•is•below•ab•(to•the•right).•0•means•all•three•points•are•on•a•straight•line.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

divide_and_conquer/convex_hull.py
| 218| ••••det•=•(a.x•*•b.y•+•b.x•*•c.y•+•c.x•*•a.y)•-•(a.y•*•b.x•+•b.y•*•c.x•+•c.y•*•a.x)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

divide_and_conquer/convex_hull.py
| 224| ••••Constructs•the•convex•hull•of•a•set•of•2D•points•using•a•brute•force•algorithm.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

divide_and_conquer/convex_hull.py
| 225| ••••The•algorithm•basically•considers•all•combinations•of•points•(i,•j)•and•uses•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

divide_and_conquer/convex_hull.py
| 226| ••••definition•of•convexity•to•determine•whether•(i,•j)•is•part•of•the•convex•hull•or
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

divide_and_conquer/convex_hull.py
| 227| ••••not.••(i,•j)•is•part•of•the•convex•hull•if•and•only•iff•there•are•no•points•on•both
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

divide_and_conquer/convex_hull.py
| 228| ••••sides•of•the•line•segment•connecting•the•ij,•and•there•is•no•point•k•such•that•k•is
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

divide_and_conquer/convex_hull.py
| 255| •••••>>>•convex_hull_bf([(0,•3),•(2,•2),•(1,•1),•(2,•1),•(3,•0),•(0,•0),•(3,•3),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

divide_and_conquer/convex_hull.py
| 277| ••••••••••••••••••••••••#•point[i],•point[j],•point[k]•all•lie•on•a•straight•line
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

divide_and_conquer/convex_hull.py
| 297| ••••Constructs•the•convex•hull•of•a•set•of•2D•points•using•a•divide-and-conquer•strategy
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

divide_and_conquer/convex_hull.py
| 298| ••••The•algorithm•exploits•the•geometric•properties•of•the•problem•by•repeatedly
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

divide_and_conquer/convex_hull.py
| 299| ••••partitioning•the•set•of•points•into•smaller•hulls,•and•finding•the•convex•hull•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

divide_and_conquer/convex_hull.py
| 300| ••••these•smaller•hulls.••The•union•of•the•convex•hull•from•smaller•hulls•is•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

divide_and_conquer/convex_hull.py
| 320| ••••>>>•convex_hull_recursive([[-1,•1],[-1,•-1],•[0,•0],•[0.5,•0.5],•[1,•-1],•[1,•1],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

divide_and_conquer/convex_hull.py
| 323| ••••>>>•convex_hull_recursive([(0,•3),•(2,•2),•(1,•1),•(2,•1),•(3,•0),•(0,•0),•(3,•3),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

divide_and_conquer/convex_hull.py
| 337| ••••#•all•points•to•the•left•(above)•the•line•joining•the•extreme•points•belong•to•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

divide_and_conquer/convex_hull.py
| 339| ••••#•all•points•to•the•right•(below)•the•line•joining•the•extreme•points•below•to•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

divide_and_conquer/convex_hull.py
| 372| ••••points:•list•or•None,•the•hull•of•points•from•which•to•choose•the•next•convex-hull
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

divide_and_conquer/convex_hull.py
| 376| ••••convex_set:•set,•the•current•convex-hull.•The•state•of•convex-set•gets•updated•by
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

divide_and_conquer/convex_hull.py
| 411| ••••Constructs•the•convex•hull•of•a•set•of•2D•points•using•the•melkman•algorithm.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

divide_and_conquer/convex_hull.py
| 412| ••••The•algorithm•works•by•iteratively•inserting•points•of•a•simple•polygonal•chain
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

divide_and_conquer/convex_hull.py
| 413| ••••(meaning•that•no•line•segments•between•two•consecutive•points•cross•each•other).
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

divide_and_conquer/convex_hull.py
| 416| ••••For•a•detailed•description,•see•http://cgm.cs.mcgill.ca/~athens/cs601/Melkman.html
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

divide_and_conquer/convex_hull.py
| 438| ••••>>>•convex_hull_melkman([[-1,•1],[-1,•-1],•[0,•0],•[0.5,•0.5],•[1,•-1],•[1,•1],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

divide_and_conquer/convex_hull.py
| 441| ••••>>>•convex_hull_melkman([(0,•3),•(2,•2),•(1,•1),•(2,•1),•(3,•0),•(0,•0),•(3,•3),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

matrix/nth_fibonacci_using_matrix_exponentiation.py
|  15| We•can•decrease•the•n•times•multiplication•by•following•the•divide•and•conquer•approach.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

matrix/nth_fibonacci_using_matrix_exponentiation.py
|  75| ••••••••n•=•int("".join(c•for•c•in•ordinal•if•c•in•"0123456789"))••#•1000th•-->•1000
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

knapsack/tests/test_greedy_knapsack.py
|  29| ••••••••self.assertRaisesRegex(ValueError,•"max_weight•must•greater•than•zero.")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

knapsack/tests/test_greedy_knapsack.py
|  59| ••••••••self.assertRaisesRegex(ValueError,•"max_weight•must•greater•than•zero.")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/cryptomath_module.py
|  14| ••••••••v1,•v2,•v3,•u1,•u2,•u3•=•(u1•-•q•*•v1),•(u2•-•q•*•v2),•(u3•-•q•*•v3),•v1,•v2,•v3
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

graphs/bellman_ford.py
|  30| ••••>>>•g•=•[{"src":•s,•"dst":•d,•"weight":•w}•for•s,•d,•w•in•edges•+•[(1,•3,•5)]]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

graphs/bellman_ford.py
|  61| ••••graph:•list[dict[str,•int]]•=•[dict()•for•j•in•range(E)]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/bellman_ford.py
|  67| ••••••••••••for•x•in•input("Enter•source,•destination,•weight:•").strip().split("•")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

ciphers/trafid_cipher.py
|  50| ••••••••••••raise•ValueError("Each•message•character•has•to•be•included•in•alphabet!")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

ciphers/trafid_cipher.py
|  92| ••••message:•str,•alphabet:•str•=•"ABCDEFGHIJKLMNOPQRSTUVWXYZ.",•period:•int•=•5
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/trafid_cipher.py
|  94| ••••message,•alphabet,•character2Number,•number2Character•=•__prepare(message,•alphabet)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

ciphers/trafid_cipher.py
|  98| ••••••••encrypted_numeric•+=•__encryptPart(message[i•:•i•+•period],•character2Number)
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

ciphers/trafid_cipher.py
|  98| ••••••••encrypted_numeric•+=•__encryptPart(message[i•:•i•+•period],•character2Number)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

ciphers/trafid_cipher.py
| 101| ••••••••encrypted•+=•number2Character[encrypted_numeric[i•:•i•+•3]]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

ciphers/trafid_cipher.py
| 107| ••••message:•str,•alphabet:•str•=•"ABCDEFGHIJKLMNOPQRSTUVWXYZ.",•period:•int•=•5
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/trafid_cipher.py
| 109| ••••message,•alphabet,•character2Number,•number2Character•=•__prepare(message,•alphabet)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

ciphers/trafid_cipher.py
| 114| ••••••••a,•b,•c•=•__decryptPart(message[i•:•i•+•period],•character2Number)
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

maths/relu.py
|   4| It's•a•kind•of•activation•function•defined•as•the•positive•part•of•its•argument•in•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

linear_algebra/src/schur_complement.py
|  51| ••••••••••••••••"Input•matrix•A•is•not•invertible.•Cannot•compute•Schur•complement."
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

arithmetic_analysis/gaussian_elimination.py
|  23| ••••>>>•gaussian_elimination([[2,•2,•-1],•[0,•-2,•-1],•[0,•0,•5]],•[[5],•[-7],•[15]])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

arithmetic_analysis/gaussian_elimination.py
|  34| ••••x:•NDArray[float64]•=•np.zeros((rows,•1),•dtype=float)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

arithmetic_analysis/gaussian_elimination.py
|  55| ••••>>>•gaussian_elimination([[1,•-4,•-2],•[5,•2,•-2],•[1,•-1,•0]],•[[-2],•[-3],•[4]])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

arithmetic_analysis/gaussian_elimination.py
|  69| ••••augmented_mat:•NDArray[float64]•=•np.concatenate((coefficients,•vector),•axis=1)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

arithmetic_analysis/gaussian_elimination.py
|  69| ••••augmented_mat:•NDArray[float64]•=•np.concatenate((coefficients,•vector),•axis=1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

arithmetic_analysis/gaussian_elimination.py
|  80| ••••••••augmented_mat[:,•0:columns],•augmented_mat[:,•columns•:•columns•+•1]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

ciphers/polybius.py
|   4| A•Polybius•Square•is•a•table•that•allows•someone•to•translate•letters•into•numbers.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

ciphers/polybius.py
|  54| ••••••••>>>•PolybiusCipher().encode("test•message")•==•"44154344•32154343112215"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/polybius.py
|  57| ••••••••>>>•PolybiusCipher().encode("Test•Message")•==•"44154344•32154343112215"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/polybius.py
|  67| ••••••••••••••••encoded_message•=•encoded_message•+•str(numbers[0])•+•str(numbers[1])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

ciphers/polybius.py
|  77| ••••••••>>>•PolybiusCipher().decode("44154344•32154343112215")•==•"test•message"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

data_structures/stacks/stack_with_singly_linked_list.py
|  13| ••••••••self.next:•Node[T]•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/stacks/stack_with_singly_linked_list.py
|  50| ••••••••self.top:•Node[T]•|•None•=•None
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/check_bipartite_graph_bfs.py
|   4| #•A•Bipartite•Graph•is•a•graph•whose•vertices•can•be•divided•into•two•independent•sets,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/check_bipartite_graph_bfs.py
|   5| #•U•and•V•such•that•every•edge•(u,•v)•either•connects•a•vertex•from•U•to•V•or•a•vertex
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/check_bipartite_graph_bfs.py
|   6| #•from•V•to•U.•In•other•words,•for•every•edge•(u,•v),•either•u•belongs•to•U•and•v•to•V,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/check_bipartite_graph_bfs.py
|   7| #•or•u•belongs•to•V•and•v•to•U.•We•can•also•say•that•there•is•no•edge•that•connects
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_129/sol1.py
|   4| A•number•consisting•entirely•of•ones•is•called•a•repunit.•We•shall•define•R(k)•to•be
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_129/sol1.py
|   7| Given•that•n•is•a•positive•integer•and•GCD(n,•10)•=•1,•it•can•be•shown•that•there
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_129/sol1.py
|   8| always•exists•a•value,•k,•for•which•R(k)•is•divisible•by•n,•and•let•A(n)•be•the•least
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_129/sol1.py
|  19| ••••Return•the•least•value•k•such•that•the•Repunit•of•length•k•is•divisible•by•divisor.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/series/harmonic.py
|  41| ••••••••raise•ValueError("Input•series•is•not•valid,•valid•series•-•[1,•2/3,•2]")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/gradient_descent.py
|   2| Implementation•of•gradient•descent•algorithm•for•minimizing•cost•of•a•linear•hypothesis
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/gradient_descent.py
|  38| ••••It•is•not•explicitly•mentioned•in•input•data..•But,•ML•hypothesis•functions•use•it.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/gradient_descent.py
|  93| ••••:param•index:•index•of•the•parameter•vector•wrt•to•derivative•is•to•be•calculated
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

strings/lower.py
|  17| ••••#•converting•to•ascii•value•int•value•and•checking•to•see•if•char•is•a•capital
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

strings/lower.py
|  18| ••••#•letter•if•it•is•a•capital•letter•it•is•getting•shift•by•32•which•makes•it•a•lower
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

strings/lower.py
|  20| ••••return•"".join(chr(ord(char)•+•32)•if•"A"•<=•char•<=•"Z"•else•char•for•char•in•word)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

project_euler/problem_551/sol1.py
|  18| memo:•dict[int,•dict[int,•list[list[int]]]]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_551/sol1.py
| 112| ••••same•as•next_term(a_i,•k,•i,•n)•but•computes•terms•without•memoizing•results.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphs/breadth_first_search_shortest_path.py
|  18| ••••def•__init__(self,•graph:•dict[str,•list[str]],•source_vertex:•str)•->•None:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/breadth_first_search_shortest_path.py
|  25| ••••••••self.parent:•dict[str,•str•|•None]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/breadth_first_search_shortest_path.py
|  30| ••••••••This•function•is•a•helper•for•running•breath•first•search•on•this•graph.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

graphs/breadth_first_search_shortest_path.py
|  51| ••••••••1.)•No•path•is•found.•The•string•is•a•human•readable•message•to•indicate•this.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

graphs/breadth_first_search_shortest_path.py
|  53| ••••••••••••`v1(->v2->v3->...->vn)`,•where•v1•is•the•source•vertex•and•vn•is•the•target
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/breadth_first_search_shortest_path.py
|  74| ••••••••••••return•f"No•path•from•vertex:{self.source_vertex}•to•vertex:{target_vertex}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

conversions/prefix_conversions.py
|  50| ••••Wikipedia•reference:•https://en.wikipedia.org/wiki/International_System_of_Units
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

conversions/prefix_conversions.py
|  66| ••••unknown_amount:•float•=•known_amount•*•(
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

conversions/prefix_conversions.py
|  94| ••••unknown_amount:•float•=•known_amount•*•(
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/greedy_best_first.py
|  90| ••••••••self.closed_nodes:•list[Node]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/greedy_best_first.py
| 119| ••••••••••••••••••••better_node•=•self.open_nodes.pop(self.open_nodes.index(child_node))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

graphs/greedy_best_first.py
| 139| ••••••••••••if•not•(0•<=•pos_x•<=•len(grid[0])•-•1•and•0•<=•pos_y•<=•len(grid)•-•1):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/bfs_shortest_path.py
|  98| ••••••••••••••••dist[node]•if•dist[target]•==•-1•else•min(dist[target],•dist[node])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

graphs/bfs_shortest_path.py
| 109| ••••print(bfs_shortest_path(demo_graph,•"G",•"D"))••#•returns•['G',•'C',•'A',•'B',•'D']
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/sum_of_geometric_progression.py
|   1| def•sum_of_geometric_progression(
|    | [NORMAL] PycodestyleBear (E302):
|    | E302 expected 2 blank lines, found 0'

electronics/ohms_law.py
|   5| def•ohms_law(voltage:•float,•current:•float,•resistance:•float)•->•dict[str,•float]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

electronics/ohms_law.py
|   7| ••••Apply•Ohm's•Law,•on•any•two•given•electrical•values,•which•can•be•voltage,•current,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

electronics/ohms_law.py
|   8| ••••and•resistance,•and•then•in•a•Python•dict•return•name/value•pair•of•the•zero•value.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_049/sol1.py
|  14| What•12-digit•number•do•you•form•by•concatenating•the•three•terms•in•this•sequence?
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_049/sol1.py
| 117| ••••••••••••••••••••••••and•len({candidate[i],•candidate[j],•candidate[k]})•==•3
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

sorts/pancake_sort.py
|  29| ••••••••arr•=•arr[mi::-1]•+•arr[mi•+•1•:•len(arr)]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

sorts/pancake_sort.py
|  31| ••••••••arr•=•arr[cur•-•1•::•-1]•+•arr[cur•:•len(arr)]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

sorts/pancake_sort.py
|  31| ••••••••arr•=•arr[cur•-•1•::•-1]•+•arr[cur•:•len(arr)]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

sorts/recursive_insertion_sort.py
|  72| ••••number_list:•list[int]•=•[int(num)•for•num•in•numbers.split()]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

linear_algebra/src/polynom_for_points.py
|  55| ••••••••matrix:•list[list[float]]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

linear_algebra/src/polynom_for_points.py
|  60| ••••••••••••count_line:•list[float]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

linear_algebra/src/polynom_for_points.py
|  69| ••••••••vector:•list[float]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

linear_algebra/src/polynom_for_points.py
|  94| ••••••••solution:•list[str]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

linear_algebra/src/polynom_for_points.py
| 103| ••••••••••••remove_e:•list[str]•=•solution[count].split("E")
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_191/sol1.py
|  29| cache:•dict[tuple[int,•int,•int],•int]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/queue/queue_on_pseudo_stack.py
|   1| """Queue•represented•by•a•pseudo•stack•(represented•by•a•list•with•pop•and•append)"""
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/heap/min_heap.py
|  69| ••••••••••••l•=•self.get_left_child_idx(idx)••#•noqa:•E741
|    | [NORMAL] PycodestyleBear (E741):
|    | E741 ambiguous variable name 'l''

data_structures/heap/min_heap.py
|  95| ••••••••••••self.idx_of_element[self.heap[p]],•self.idx_of_element[self.heap[idx]]•=•(
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

data_structures/heap/min_heap.py
| 107| ••••••••self.idx_of_element[self.heap[0]],•self.idx_of_element[self.heap[-1]]•=•(
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_056/sol1.py
|  30| ••••#•RETURN•the•MAXIMUM•from•the•list•of•SUMs•of•the•list•of•INT•converted•from•STR•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/sylvester_sequence.py
|  29| ••••assert•isinstance(number,•int),•f"The•input•value•of•[n={number}]•is•not•an•integer"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

strings/frequency_finder.py
|  53| ••••freq_to_letter:•dict[int,•list[str]]•=•{
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

strings/frequency_finder.py
|  59| ••••freq_to_letter_str:•dict[int,•str]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

strings/frequency_finder.py
|  68| ••••freq_order:•list[str]•=•[freq_pair[1]•for•freq_pair•in•freq_pairs]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

sorts/circle_sort.py
|  26| ••••>>>•all(sorted(collection)•==•circle_sort(collection)•for•collection•in•collections)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

data_structures/binary_tree/binary_search_tree.py
|  60| ••••••••••••••••••••••••parent_node.left•=•new_node••#•We•insert•the•new•node•in•a•leaf
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/binary_tree/binary_search_tree.py
| 113| ••••••••••••if•node.left•is•None•and•node.right•is•None:••#•If•it•has•no•children
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/binary_tree/binary_search_tree.py
| 126| ••••••••••••••••)••#•Assigns•the•value•to•the•node•to•delete•and•keep•tree•structure
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/binary_tree/binary_search_tree.py
| 154| ••••••••arr:•list•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/binary_tree/binary_search_tree.py
| 155| ••••••••self.inorder(arr,•node)••#•append•all•values•to•list•using•inorder•traversal
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/binary_tree/binary_search_tree.py
| 165| ••••••••node_list•=•postorder(curr_node.left)•+•postorder(curr_node.right)•+•[curr_node]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/max_sum_sliding_window.py
|   2| Given•an•array•of•integer•elements•and•an•integer•'k',•we•are•required•to•find•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/max_sum_sliding_window.py
|   5| Instead•of•using•a•nested•for•loop,•in•a•Brute•force•approach•we•will•use•a•technique
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/max_sum_sliding_window.py
|   6| called•'Window•sliding•technique'•where•the•nested•loops•can•be•converted•to•a•single
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/max_sum_sliding_window.py
|  45| ••••print(f"The•maximum•sum•of•{k}•consecutive•elements•is•{max_sum_in_array(array,k)}")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

backtracking/rat_in_maze.py
|   8| ••••We•want•to•go•from•the•start•to•the•end.•In•this•matrix•zeroes•represent•walls
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

backtracking/rat_in_maze.py
|  73| def•run_maze(maze:•list[list[int]],•i:•int,•j:•int,•solutions:•list[list[int]])•->•bool:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

backtracking/rat_in_maze.py
|  75| ••••This•method•is•recursive•starting•from•(i,•j)•and•going•in•one•of•four•directions:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

backtracking/rat_in_maze.py
|  77| ••••If•a•path•is•found•to•destination•it•returns•True•otherwise•it•returns•False.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/largest_subarray_sum.py
|   6| ••••>>>•max_sub_array_sum([-13,•-3,•-25,•-20,•-3,•-16,•-23,•-12,•-5,•-22,•-15,•-4,•-7])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

digital_image_processing/filters/bilateral_filter.py
|  28| ••••return•img[x•-•half•:•x•+•half•+•1,•y•-•half•:•y•+•half•+•1]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/filters/bilateral_filter.py
|  28| ••••return•img[x•-•half•:•x•+•half•+•1,•y•-•half•:•y•+•half•+•1]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/filters/bilateral_filter.py
|  77| ••••filename,•spatial_variance,•intensity_variance,•kernel_size•=•parse_args(sys.argv)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

digital_image_processing/filters/bilateral_filter.py
|  83| ••••out•=•bilateral_filter(out,•spatial_variance,•intensity_variance,•kernel_size)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/forecasting/run.py
|  22| ••••train_dt:•list,•train_usr:•list,•train_mtch:•list,•test_dt:•list,•test_mtch:•list
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/forecasting/run.py
|  28| ••••>>>•n•=•linear_regression_prediction([2,3,4,5],•[5,3,4,6],•[3,1,2,4],•[2,1],•[2,2])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/forecasting/run.py
|  29| ••••>>>•abs(n•-•5.0)•<•1e-6••#•Checking•precision•because•of•floating•point•errors
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/forecasting/run.py
|  34| ••••beta•=•np.dot(np.dot(np.linalg.inv(np.dot(x.transpose(),•x)),•x.transpose()),•y)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/forecasting/run.py
|  38| def•sarimax_predictor(train_user:•list,•train_match:•list,•test_match:•list)•->•float:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/forecasting/run.py
|  43| ••••input•:•training•data•(total_user,•with•exog•data•=•total_event)•in•list•of•float
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/forecasting/run.py
|  51| ••••••••train_user,•exog=train_match,•order=order,•seasonal_order=seasonal_order
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/forecasting/run.py
|  58| def•support_vector_regressor(x_train:•list,•x_test:•list,•train_user:•list)•->•float:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/forecasting/run.py
| 117| data_input•=•[[18231,•0.0,•1],•[22621,•1.0,•2],•[15675,•0.0,•3],•[23583,•1.0,•4]]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/forecasting/run.py
| 118| data_input_df•=•pd.DataFrame(data_input,•columns=["total_user",•"total_even",•"days"])
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/forecasting/run.py
| 135| x_test•=•x[len(x)•-•1•:]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

machine_learning/forecasting/run.py
| 142| tst_date•=•total_date[len(total_date)•-•1•:]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

machine_learning/forecasting/run.py
| 143| tst_user•=•total_user[len(total_user)•-•1•:]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

machine_learning/forecasting/run.py
| 144| tst_match•=•total_match[len(total_match)•-•1•:]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

machine_learning/forecasting/run.py
| 150| ••••linear_regression_prediction(trn_date,•trn_user,•trn_match,•tst_date,•tst_match)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

ciphers/transposition_cipher.py
|   6| follows•a•regular•system•that•results•in•the•permuted•text,•known•as•the•encrypted
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

sorts/external_sort.py
|  68| ••••••••••••i:•self.buffers[i]•for•i•in•range(self.num_buffers)•if•i•not•in•self.empty
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

sorts/external_sort.py
| 123| ••••••••merger.merge(splitter.get_block_filenames(),•filename•+•".out",•buffer_size)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

sorts/external_sort.py
| 145| ••••••••"-m",•"--mem",•help="amount•of•memory•to•use•for•sorting",•default="100M"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/area.py
|  21| ••••••••raise•ValueError("surface_area_cube()•only•accepts•non-negative•values")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/area.py
|  41| ••••••••raise•ValueError("surface_area_sphere()•only•accepts•non-negative•values")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/area.py
|  64| ••••••••raise•ValueError("surface_area_hemisphere()•only•accepts•non-negative•values")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/area.py
|  92| ••••••••raise•ValueError("surface_area_cone()•only•accepts•non-negative•values")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/area.py
| 120| ••••••••raise•ValueError("surface_area_cylinder()•only•accepts•non-negative•values")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/area.py
| 188| def•area_triangle_three_sides(side1:•float,•side2:•float,•side3:•float)•->•float:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/area.py
| 192| ••••This•function•uses•Heron's•formula:•https://en.wikipedia.org/wiki/Heron%27s_formula
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/area.py
| 220| ••••••••raise•ValueError("area_triangle_three_sides()•only•accepts•non-negative•values")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/area.py
| 221| ••••elif•side1•+•side2•<•side3•or•side1•+•side3•<•side2•or•side2•+•side3•<•side1:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/area.py
| 253| ••••••••raise•ValueError("area_parallelogram()•only•accepts•non-negative•values")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/area.py
| 366| ••••doctest.testmod(verbose=True)••#•verbose•so•we•can•see•methods•missing•tests
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_041/sol1.py
|   5| We•shall•say•that•an•n-digit•number•is•pandigital•if•it•makes•use•of•all•the•digits
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_041/sol1.py
|   6| 1•to•n•exactly•once.•For•example,•2143•is•a•4-digit•pandigital•and•is•also•prime.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_041/sol1.py
|   9| All•pandigital•numbers•except•for•1,•4•,7•pandigital•numbers•are•divisible•by•3.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

data_structures/stacks/balanced_parentheses.py
|  17| ••••stack:•Stack[str]•=•Stack()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

audio_filters/show_response.py
|  32| ••••lowest•=•min([-20,•np.min(fft_results[1•:•samplerate•//•2•-•1])])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

audio_filters/show_response.py
|  33| ••••highest•=•max([20,•np.max(fft_results[1•:•samplerate•//•2•-•1])])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

graphs/even_tree.py
|  51| ••••visited:•dict[int,•bool]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/even_tree.py
|  52| ••••cuts:•list[int]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphs/even_tree.py
|  54| ••••edges•=•[(2,•1),•(3,•1),•(4,•3),•(5,•2),•(6,•1),•(7,•2),•(8,•6),•(9,•8),•(10,•8)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_097/sol1.py
|   2| The•first•known•prime•found•to•exceed•one•million•digits•was•discovered•in•1999,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_097/sol1.py
|   3| and•is•a•Mersenne•prime•of•the•form•2**6972593•−•1;•it•contains•exactly•2,098,960
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_097/sol1.py
|   4| digits.•Subsequently•other•Mersenne•primes,•of•the•form•2**p•−•1,•have•been•found
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/euler_method.py
|  11| ••••For•reference•to•Euler's•method•refer•to•https://en.wikipedia.org/wiki/Euler_method.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

data_structures/stacks/infix_to_prefix_conversion.py
|  47| ••••••••••••••••Postfix.append(Stack.pop())••#•Pop•stack•&•add•the•content•to•Postfix
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/stacks/infix_to_prefix_conversion.py
|  52| ••••••••••••else:••#•while•priority•of•x•is•not•>•priority•of•element•in•the•stack
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

dynamic_programming/bitmask.py
|   3| This•is•a•Python•implementation•for•questions•involving•task•assignments•between•people.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

dynamic_programming/bitmask.py
|   7| We•have•N•tasks•and•M•people.•Each•person•in•M•can•do•only•certain•of•these•tasks.•Also
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

dynamic_programming/bitmask.py
|  22| ••••••••••••[-1•for•i•in•range(total•+•1)]•for•j•in•range(2•**•len(task_performed))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

dynamic_programming/bitmask.py
|  25| ••••••••self.task•=•defaultdict(list)••#•stores•the•list•of•persons•for•each•task
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

dynamic_programming/bitmask.py
|  27| ••••••••#•final_mask•is•used•to•check•if•all•persons•are•included•by•setting•all•bits
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

dynamic_programming/bitmask.py
|  37| ••••••••#•if•not•everyone•gets•the•task•and•no•more•tasks•are•available,•return•0
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

dynamic_programming/bitmask.py
|  48| ••••••••#•now•assign•the•tasks•one•by•one•to•all•possible•persons•and•recursively
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

dynamic_programming/bitmask.py
|  57| ••••••••••••••••#•assign•this•task•to•p•and•change•the•mask•value.•And•recursively
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

dynamic_programming/bitmask.py
|  59| ••••••••••••••••total_ways_util•+=•self.CountWaysUtil(mask•|•(1•<<•p),•task_no•+•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

dynamic_programming/bitmask.py
|  73| ••••••••#•call•the•function•to•fill•the•DP•table,•final•answer•is•stored•in•dp[0][1]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

web_programming/currency_converter.py
|  16| ••••••••"API•key•must•be•provided•in•the•'AMDOREN_API_KEY'•environment•variable."
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

web_programming/currency_converter.py
| 178| ••••from_:•str•=•"USD",•to:•str•=•"INR",•amount:•float•=•1.0,•api_key:•str•=•API_KEY
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

file_transfer/tests/test_send_file.py
|  13| ••••file.return_value.__enter__.return_value.read.side_effect•=•lambda•_:•next(f)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_188/sol1.py
|  22| #•small•helper•function•for•modular•exponentiation•(fast•exponentiation•algorithm)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_188/sol1.py
|  42| ••••••••return•(base•*•_modexpt(base,•exponent•-•1,•modulo_value))•%•modulo_value
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

digital_image_processing/resize/resize.py
|  39| ••••••••>>>•nn•=•NearestNeighbour(imread("digital_image_processing/image_data/lena.jpg",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

digital_image_processing/resize/resize.py
|  52| ••••••••>>>•nn•=•NearestNeighbour(imread("digital_image_processing/image_data/lena.jpg",
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

digital_image_processing/resize/resize.py
|  68| ••••••••f"Image•resized•from:•{im.shape[1]}x{im.shape[0]}•to•{dst_w}x{dst_h}",•n.output
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

dynamic_programming/catalan_numbers.py
|  61| ••••print("\n*********•Catalan•Numbers•Using•Dynamic•Programming•************\n")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

dynamic_programming/catalan_numbers.py
|  63| ••••print("\nEnter•the•upper•limit•(≥•0)•for•the•Catalan•number•sequence:•",•end="")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/polymonial_regression.py
|  20| X_train,•X_test,•y_train,•y_test•=•train_test_split(X,•y,•test_size=0.2,•random_state=0)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

strings/can_string_be_rearranged_as_palindrome.py
|   7| #•Check•if•characters•of•the•given•string•can•be•rearranged•to•form•a•palindrome.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

strings/can_string_be_rearranged_as_palindrome.py
|   8| #•Counter•is•faster•for•long•strings•and•non-Counter•is•faster•for•short•strings.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

strings/can_string_be_rearranged_as_palindrome.py
|  23| ••••>>>•can_string_be_rearranged_as_palindrome_counter("A•man•a•plan•a•canal•Panama")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

strings/can_string_be_rearranged_as_palindrome.py
|  26| ••••return•sum(c•%•2•for•c•in•Counter(input_str.replace("•",•"").lower()).values())•<•2
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

strings/can_string_be_rearranged_as_palindrome.py
|  39| ••••>>>•can_string_be_rearranged_as_palindrome_counter("A•man•a•plan•a•canal•Panama")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

strings/can_string_be_rearranged_as_palindrome.py
|  45| ••••#•character_freq_dict:•Stores•the•frequency•of•every•character•in•the•input•string
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

strings/can_string_be_rearranged_as_palindrome.py
|  46| ••••character_freq_dict:•dict[str,•int]•=•{}
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

strings/can_string_be_rearranged_as_palindrome.py
|  49| ••••••••character_freq_dict[character]•=•character_freq_dict.get(character,•0)•+•1
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

strings/can_string_be_rearranged_as_palindrome.py
|  66| ••••Step•1:•We'll•count•number•of•characters•that•appear•odd•number•of•times•i.e•oddChar
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

strings/can_string_be_rearranged_as_palindrome.py
| 111| ••••••••"Enter•string•to•determine•if•it•can•be•rearranged•as•a•palindrome•or•not:•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

strings/can_string_be_rearranged_as_palindrome.py
| 115| ••••print(f"{check_str}•can•{''•if•status•else•'not•'}be•rearranged•as•a•palindrome")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

quantum/ripple_adder_classic.py
|   9| def•store_two_classics(val1:•int,•val2:•int)•->•tuple[QuantumCircuit,•str,•str]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

quantum/ripple_adder_classic.py
|  23| ••••#•The•second•parameter•is•the•number•of•classical•registers,•to•measure•the•result
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

quantum/ripple_adder_classic.py
|  56| #•The•default•value•for•**backend**•is•the•result•of•a•function•call•which•is•not
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

quantum/ripple_adder_classic.py
|  57| #•normally•recommended•and•causes•flake8-bugbear•to•raise•a•B008•error.•However,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

quantum/ripple_adder_classic.py
|  58| #•in•this•case,•this•is•accptable•because•`Aer.get_backend()`•is•called•when•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

quantum/ripple_adder_classic.py
|  59| #•function•is•defined•and•that•same•backend•is•then•reused•for•all•function•calls.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

quantum/ripple_adder_classic.py
|  93| ••••We•are•essentially•using•each•bit•of•x•&•y•respectively•as•full_adder's•input
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

quantum/ripple_adder_classic.py
| 100| ••••••••full_adder(circuit,•i,•len(x)•+•i,•len(x)•+•len(y)•+•i,•len(x)•+•len(y)•+•i•+•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

maths/greatest_common_divisor.py
|  54| ••••while•y:••#•-->•when•y=0•then•loop•will•terminate•and•return•x•as•final•GCD.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/greatest_common_divisor.py
|  71| ••••••••print(f"By•iterative•gcd({num_1},•{num_2})•=•{gcd_by_iterative(num_1,•num_2)}")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
|   8| ••••••••2.•The•variance•calculated•for•each•input•variables•by•class•grouping•is•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
|  10| ••••••••3.•The•mix•of•classes•in•your•training•set•is•representative•of•the•problem.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
|  14| ••••••••The•LDA•model•requires•the•estimation•of•statistics•from•the•training•data•:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
|  28| ••••••••••••••••1.•Calculate•the•squared•difference•for•each•input•variable•from•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
|  40| ••••••••After•calculating•the•discriminant•value•for•each•class,•the•class•with•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
|  53| def•gaussian_distribution(mean:•float,•std_dev:•float,•instance_count:•int)•->•list:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
|  55| ••••Generate•gaussian•distribution•instances•based-on•given•mean•and•standard•deviation
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
|  57| ••••:param•std_dev:•value•of•standard•deviation•entered•by•usr•or•default•value•of•it
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
|  59| ••••:return:•a•list•containing•generated•values•based-on•given•mean,•std_dev•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
|  63| ••••[6.288184753155463,•6.4494456086997705,•5.066335808938262,•4.235456349028368,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
|  64| •••••3.9078267848958586,•5.031334516831717,•3.977896829989127,•3.56317055489747,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
|  65| ••••••5.199311976483754,•5.133374604658605,•5.546468300338232,•4.086029056264687,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
|  66| •••••••5.005005283626573,•4.935258239627312,•3.494170998739258,•5.537997178661033,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
|  67| ••••••••5.320711100998849,•7.3891120432406865,•5.202969177309964,•4.855297691835079]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 130| ••••:param•items:•a•list•containing•all•items(gaussian•distribution•of•all•classes)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 149| ••••#•one•divided•by•(the•number•of•all•instances•-•number•of•classes)•multiplied•by
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 160| ••••:param•x_items:•a•list•containing•all•items(gaussian•distribution•of•all•classes)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 162| ••••:param•variance:•calculated•value•of•variance•by•calculate_variance•function
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 167| ••••...••••••••••••••••4.235456349028368,•3.9078267848958586,•5.031334516831717,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 171| ••••...••••••••••••••••5.537997178661033,•5.320711100998849,•7.3891120432406865,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 172| ••••...••••••••••••••••5.202969177309964,•4.855297691835079],•[11.288184753155463,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 173| ••••...••••••••••••••••11.44944560869977,•10.066335808938263,•9.235456349028368,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 174| ••••...••••••••••••••••8.907826784895859,•10.031334516831716,•8.977896829989128,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 175| ••••...••••••••••••••••8.56317055489747,•10.199311976483754,•10.133374604658606,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 176| ••••...••••••••••••••••10.546468300338232,•9.086029056264687,•10.005005283626572,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 177| ••••...••••••••••••••••9.935258239627313,•8.494170998739259,•10.537997178661033,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 178| ••••...••••••••••••••••10.320711100998848,•12.389112043240686,•10.202969177309964,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 179| ••••...••••••••••••••••9.85529769183508],•[16.288184753155463,•16.449445608699772,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 180| ••••...••••••••••••••••15.066335808938263,•14.235456349028368,•13.907826784895859,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 181| ••••...••••••••••••••••15.031334516831716,•13.977896829989128,•13.56317055489747,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 182| ••••...••••••••••••••••15.199311976483754,•15.133374604658606,•15.546468300338232,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 183| ••••...••••••••••••••••14.086029056264687,•15.005005283626572,•14.935258239627313,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 184| ••••...••••••••••••••••13.494170998739259,•15.537997178661033,•15.320711100998848,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 185| ••••...••••••••••••••••17.389112043240686,•15.202969177309964,•14.85529769183508]]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 189| ••••>>>•probabilities•=•[0.3333333333333333,•0.3333333333333333,•0.3333333333333333]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 192| ••••[0,•0,•0,•0,•0,•0,•0,•0,•0,•0,•0,•0,•0,•0,•0,•0,•0,•0,•0,•0,•1,•1,•1,•1,•1,•1,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 197| ••••#•An•empty•list•to•store•generated•discriminant•values•of•all•items•in•dataset•for
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 204| ••••••••••••temp•=•[]••#•to•store•all•discriminant•values•of•each•item•as•a•list
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 207| ••••••••••••••••#•appending•values•of•discriminants•for•each•class•to•'temp'•list
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 223| ••••:param•actual_y:a•list•containing•initial•Y•values•generated•by•'y_generator'
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 246| ••••#•percentage•of•accuracy•equals•to•number•of•correct•predictions•divided•by•number
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 267| ••••:condition:•function•that•represents•the•condition•that•user•input•is•valid.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 281| ••••••••••••••••f"{user_input}:•Incorrect•input•type,•expected•{input_type.__name__!r}"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 317| ••••••••#•Trying•to•get•number•of•instances•in•classes•and•theirs•means•to•generate
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 319| ••••••••counts•=•[]••#•An•empty•list•to•store•instance•counts•of•classes•in•dataset
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 366| ••••••••actual_means•=•[calculate_mean(counts[k],•x[k])•for•k•in•range(n_classes)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 367| ••••••••#•for•loop•iterates•over•number•of•elements•in•'actual_means'•list•and•print
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 375| ••••••••••••calculate_probabilities(counts[i],•sum(counts))•for•i•in•range(n_classes)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 378| ••••••••#•for•loop•iterates•over•number•of•elements•in•'probabilities'•list•and•print
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 391| ••••••••pre_indexes•=•predict_y_values(x,•actual_means,•variance,•probabilities)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

machine_learning/linear_discriminant_analysis.py
| 399| ••••••••if•input("Press•any•key•to•restart•or•'q'•for•quit:•").strip().lower()•==•"q":
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

fuzzy_logic/fuzzy_operations.py
|  51| ••••#•Plot•each•set•A,•set•B•and•each•operation•result•using•plot()•and•subplot().
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_044/sol1.py
|  10| Find•the•pair•of•pentagonal•numbers,•Pj•and•Pk,•for•which•their•sum•and•difference
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_044/sol1.py
|  31| ••••Returns•the•minimum•difference•of•two•pentagonal•numbers•P1•and•P2•such•that
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/hill_cipher.py
|  10| Your•text•is•divided•into•batches•of•length•N•and•converted•to•numerical•vectors
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/hill_cipher.py
|  28| batch•of•letters),•the•last•character•of•the•text•is•added•to•the•text•until•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

ciphers/hill_cipher.py
|  71| ••••••••self.encrypt_key•=•self.modulus(encrypt_key)••#•mod36•calc's•on•the•encrypt•key
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/hill_cipher.py
|  72| ••••••••self.check_determinant()••#•validate•the•determinant•of•the•encryption•key
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

ciphers/hill_cipher.py
| 108| ••••••••••••••••f"determinant•modular•{req_l}•of•encryption•key({det})•is•not•co•prime•"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

ciphers/hill_cipher.py
| 140| ••••••••••••batch•=•text[i•:•i•+•self.break_key]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

ciphers/hill_cipher.py
| 143| ••••••••••••batch_encrypted•=•self.modulus(self.encrypt_key.dot(batch_vec)).T.tolist()[
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

ciphers/hill_cipher.py
| 191| ••••••••••••batch•=•text[i•:•i•+•self.break_key]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

ciphers/hill_cipher.py
| 194| ••••••••••••batch_decrypted•=•self.modulus(decrypt_key.dot(batch_vec)).T.tolist()[0]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

backtracking/sudoku.py
|  17| initial_grid:•Matrix•=•[
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

backtracking/sudoku.py
|  30| no_solution:•Matrix•=•[
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

backtracking/sudoku.py
|  93| ••••if•location•:=•find_empty_location(grid):
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

backtracking/sudoku.py
|  93| ••••if•location•:=•find_empty_location(grid):
|    | [NORMAL] PycodestyleBear (E231):
|    | E231 missing whitespace after ':''

backtracking/sudoku.py
|  93| ••••if•location•:=•find_empty_location(grid):
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

backtracking/sudoku.py
|  93| ••••if•location•:=•find_empty_location(grid):
|    | [NORMAL] PycodestyleBear (E225):
|    | E225 missing whitespace around operator'

maths/pollard_rho.py
|  82| ••••••••••••#•At•each•iteration,•the•tortoise•moves•one•step•and•the•hare•moves•two.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/pollard_rho.py
|  87| ••••••••••••#•At•some•point•both•the•tortoise•and•the•hare•will•enter•a•cycle•whose
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

maths/pollard_rho.py
|  88| ••••••••••••#•length•``p``•is•a•divisor•of•``num``.••Once•in•that•cycle,•at•some•point
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/pollard_rho.py
|  90| ••••••••••••#•We•can•detect•when•this•happens•because•the•position•difference•between
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/pollard_rho.py
|  91| ••••••••••••#•the•tortoise•and•the•hare•will•share•a•common•divisor•with•``num``.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

maths/pollard_rho.py
| 100| ••••••••••••••••••••#•Unfortunately,•the•divisor•is•``num``•itself•and•is•useless.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/find_min_recursion.py
|  50| ••••right_min•=•find_min(nums,•mid•+•1,•right)••#•find•min•in•range[mid•+•1,•right]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_010/sol3.py
|  20| ••••The•sieve•of•Eratosthenes•is•one•of•the•most•efficient•ways•to•find•all•primes
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_010/sol3.py
|  21| ••••smaller•than•n•when•n•is•smaller•than•10•million.••Only•for•positive•numbers.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

physics/n_body_simulation.py
|   2| In•physics•and•astronomy,•a•gravitational•N-body•simulation•is•a•simulation•of•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

physics/n_body_simulation.py
|   4| consists•of•a•number•of•bodies,•each•of•which•exerts•a•gravitational•force•on•all
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

physics/n_body_simulation.py
|   6| gravitation.•The•Euler•method•is•used•at•each•time-step•to•calculate•the•change•in
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

physics/n_body_simulation.py
|   7| velocity•and•position•brought•about•by•these•forces.•Softening•is•used•to•prevent
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

physics/n_body_simulation.py
|  35| ••••••••The•parameters•"size"•&•"color"•are•not•relevant•for•the•simulation•itself,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

physics/n_body_simulation.py
| 110| ••••factor•and•the•softening•factor.•The•time•factor•is•used•to•control•the•speed
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

physics/n_body_simulation.py
| 112| ••••trick•for•N-body•simulations•to•prevent•numerical•divergences•when•two•bodies
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

physics/n_body_simulation.py
| 145| ••••••••>>>•body_system_2•=•BodySystem([Body(-10,0,0,0),•Body(10,0,0,0,•mass=4)],•1,•10)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

physics/n_body_simulation.py
| 162| ••••••••••••••••••••distance•=•(dif_x**2•+•dif_y**2•+•self.softening_factor)•**•(
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

physics/n_body_simulation.py
| 168| ••••••••••••••••••••••••self.gravitation_constant•*•body2.mass•*•dif_x•/•distance**3
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

physics/n_body_simulation.py
| 171| ••••••••••••••••••••••••self.gravitation_constant•*•body2.mass•*•dif_y•/•distance**3
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

physics/n_body_simulation.py
| 174| ••••••••••••#•Update•the•body's•velocity•once•all•the•force•components•have•been•added
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

physics/n_body_simulation.py
| 175| ••••••••••••body1.update_velocity(force_x,•force_y,•delta_time•*•self.time_factor)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

physics/n_body_simulation.py
| 186| ••••Updates•the•body-system•and•applies•the•change•to•the•patch-list•used•for•plotting
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

physics/n_body_simulation.py
| 195| ••••>>>•body_system_2•=•BodySystem([Body(-10,0,0,0),•Body(10,0,0,0,•mass=4)],•1,•10)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

physics/n_body_simulation.py
| 235| ••••••••plt.Circle((body.position_x,•body.position_y),•body.size,•fc=body.color)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

physics/n_body_simulation.py
| 259| ••••(initial•conditions•taken•from•http://www.artcompsci.org/vol_1/v1_web/node56.html)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

physics/n_body_simulation.py
| 271| ••••••••Body(position_x,•position_y,•velocity_x,•velocity_y,•size=0.2,•color="red"),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

physics/n_body_simulation.py
| 272| ••••••••Body(-position_x,•-position_y,•velocity_x,•velocity_y,•size=0.2,•color="green"),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

physics/n_body_simulation.py
| 282| ••••initial•conditions,•the•moon•should•orbit•around•the•earth•as•it•actually•does.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

physics/n_body_simulation.py
| 299| ••••moon•=•Body(-earth_moon_distance,•0,•0,•moon_velocity,•moon_mass,•10000000,•"grey")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

conversions/decimal_to_any.py
|  69| ••••ALPHABET_VALUES•=•{'10':•'A',•'11':•'B',•'12':•'C',•'13':•'D',•'14':•'E',•'15':•'F',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

conversions/decimal_to_any.py
|  70| •••••••••••••••••••••••'16':•'G',•'17':•'H',•'18':•'I',•'19':•'J',•'20':•'K',•'21':•'L',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

conversions/decimal_to_any.py
|  71| •••••••••••••••••••••••'22':•'M',•'23':•'N',•'24':•'O',•'25':•'P',•'26':•'Q',•'27':•'R',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

conversions/decimal_to_any.py
|  72| •••••••••••••••••••••••'28':•'S',•'29':•'T',•'30':•'U',•'31':•'V',•'32':•'W',•'33':•'X',
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

data_structures/linked_list/print_reverse.py
|  10| ••••••••"""Returns•a•visual•representation•of•the•node•and•all•its•following•nodes."""
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

scheduling/shortest_job_first.py
| 115| ••••print("Average•turn•around•time•=",•total_turn_around_time•/•no_of_processes)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

scheduling/shortest_job_first.py
| 126| ••••••••print("Enter•the•arrival•time•and•burst•time•for•process:--"•+•str(i•+•1))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

scheduling/shortest_job_first.py
| 129| ••••waiting_time•=•calculate_waitingtime(arrival_time,•burst_time,•no_of_processes)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

scheduling/shortest_job_first.py
| 139| ••••••••list(zip(processes,•burst_time,•arrival_time,•waiting_time,•turn_around_time)),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

project_euler/problem_023/sol1.py
|   2| A•perfect•number•is•a•number•for•which•the•sum•of•its•proper•divisors•is•exactly
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

electronics/carrier_concentration.py
|  20| ••••>>>•carrier_concentration(electron_conc=25,•hole_conc=100,•intrinsic_conc=0)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

electronics/carrier_concentration.py
|  22| ••••>>>•carrier_concentration(electron_conc=0,•hole_conc=1600,•intrinsic_conc=200)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

electronics/carrier_concentration.py
|  24| ••••>>>•carrier_concentration(electron_conc=1000,•hole_conc=0,•intrinsic_conc=1200)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

electronics/carrier_concentration.py
|  26| ••••>>>•carrier_concentration(electron_conc=1000,•hole_conc=400,•intrinsic_conc=1200)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

electronics/carrier_concentration.py
|  30| ••••>>>•carrier_concentration(electron_conc=-1000,•hole_conc=0,•intrinsic_conc=1200)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

electronics/carrier_concentration.py
|  34| ••••>>>•carrier_concentration(electron_conc=0,•hole_conc=-400,•intrinsic_conc=1200)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

electronics/carrier_concentration.py
|  38| ••••>>>•carrier_concentration(electron_conc=0,•hole_conc=400,•intrinsic_conc=-1200)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

electronics/carrier_concentration.py
|  46| ••••••••raise•ValueError("Electron•concentration•cannot•be•negative•in•a•semiconductor")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

electronics/carrier_concentration.py
|  48| ••••••••raise•ValueError("Hole•concentration•cannot•be•negative•in•a•semiconductor")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

strings/upper.py
|  15| ••••#•Converting•to•ascii•value•int•value•and•checking•to•see•if•char•is•a•lower•letter
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

strings/upper.py
|  16| ••••#•if•it•is•a•lowercase•letter•it•is•getting•shift•by•32•which•makes•it•an•uppercase
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

strings/upper.py
|  18| ••••return•"".join(chr(ord(char)•-•32)•if•"a"•<=•char•<=•"z"•else•char•for•char•in•word)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

project_euler/problem_048/sol1.py
|  13| ••••Returns•the•last•10•digits•of•the•series,•1^1•+•2^2•+•3^3•+•...•+•1000^1000.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_047/sol1.py
|  17| Find•the•first•four•consecutive•integers•to•have•four•distinct•prime•factors•each.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/local_weighted_learning/local_weighted_learning.py
|   7| def•weighted_matrix(point:•np.mat,•training_data_x:•np.mat,•bandwidth:•float)•->•np.mat:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

machine_learning/local_weighted_learning/local_weighted_learning.py
|  15| ••••>>>•weighted_matrix(np.array([1.,•1.]),np.mat([[16.99,•10.34],•[21.01,23.68],
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/local_weighted_learning/local_weighted_learning.py
|  33| ••••point:•np.mat,•training_data_x:•np.mat,•training_data_y:•np.mat,•bandwidth:•float
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

machine_learning/local_weighted_learning/local_weighted_learning.py
|  36| ••••Calculate•the•local•weights•using•the•weight_matrix•function•on•training•data.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

machine_learning/local_weighted_learning/local_weighted_learning.py
|  57| ••••...••••••••••••••••••••••••••••[24.59,25.69]]),np.mat([[1.01,•1.66,•3.5]]),•0.6)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

machine_learning/local_weighted_learning/local_weighted_learning.py
|  73| ••••Function•used•for•loading•data•from•the•seaborn•splitting•into•x•and•y•points
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/local_weighted_learning/local_weighted_learning.py
|  94| def•get_preds(training_data_x:•np.mat,•mcol_b:•np.mat,•tau:•float)•->•np.ndarray:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

machine_learning/local_weighted_learning/local_weighted_learning.py
| 133| ••••training_data_x,•mcol_b,•col_a,•col_b•=•load_data("tips",•"total_bill",•"tip")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

other/gauss_easter.py
|  31| ••••••••15•-•lunar_orbit_correction•+•leap_day_inhibits•-•leap_day_reinstall_number
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

other/gauss_easter.py
|  33| ••••century_starting_point•=•(4•+•leap_day_inhibits•-•leap_day_reinstall_number)•%•7
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

matrix/sherman_morrison.py
|  21| ••••••••self.array•=•[[default_value•for•c•in•range(column)]•for•r•in•range(row)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

matrix/sherman_morrison.py
|  30| ••••••••s•=•"Matrix•consist•of•%d•rows•and•%d•columns\n"•%•(self.row,•self.column)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

matrix/sherman_morrison.py
|  43| ••••••••••••line•+=•",•".join(string_format_identifier•%•(obj,)•for•obj•in•row_vector)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

matrix/sherman_morrison.py
| 178| ••••••••••••raise•TypeError(f"Unsupported•type•given•for•another•({type(another)})")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

matrix/sherman_morrison.py
| 210| ••••••••This•method•returns•(A•+•uv^T)^(-1)•where•A^(-1)•is•self.•Returns•None•if•it's
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

matrix/sherman_morrison.py
| 232| ••••••••assert•self.row•==•self.column•==•u.row•==•v.row••#•u,•v•should•be•column•vector
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

project_euler/problem_086/sol1.py
|   4| A•spider,•S,•sits•in•one•corner•of•a•cuboid•room,•measuring•6•by•5•by•3,•and•a•fly,•F,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_086/sol1.py
|   5| sits•in•the•opposite•corner.•By•travelling•on•the•surfaces•of•the•room•the•shortest
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_086/sol1.py
|   6| "straight•line"•distance•from•S•to•F•is•10•and•the•path•is•shown•on•the•diagram.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_086/sol1.py
|   8| However,•there•are•up•to•three•"shortest"•path•candidates•for•any•given•cuboid•and•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_086/sol1.py
|  11| It•can•be•shown•that•there•are•exactly•2060•distinct•cuboids,•ignoring•rotations,•with
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_086/sol1.py
|  12| integer•dimensions,•up•to•a•maximum•size•of•M•by•M•by•M,•for•which•the•shortest•route
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_086/sol1.py
|  13| has•integer•length•when•M•=•100.•This•is•the•least•value•of•M•for•which•the•number•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_086/sol1.py
|  14| solutions•first•exceeds•two•thousand;•the•number•of•solutions•when•M•=•99•is•1975.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_086/sol1.py
|  16| Find•the•least•value•of•M•such•that•the•number•of•solutions•first•exceeds•one•million.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_086/sol1.py
|  19| ••••Label•the•3•side-lengths•of•the•cuboid•a,b,c•such•that•1•<=•a•<=•b•<=•c•<=•M.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_086/sol1.py
|  20| ••••By•conceptually•"opening•up"•the•cuboid•and•laying•out•its•faces•on•a•plane,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_086/sol1.py
|  22| ••••sqrt((a+b)^2•+•c^2).•This•distance•is•an•integer•if•and•only•if•(a+b),c•make•up
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_086/sol1.py
|  27| ••••we•can•calculate•this•number•iteratively•each•time•we•increase•M,•as•follows.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_086/sol1.py
|  28| ••••The•set•of•cuboids•satisfying•this•property•with•maximum•side-length•M-1•is•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_086/sol1.py
|  30| ••••(since•any•cuboids•with•side•lengths•<=•M-1•are•also•<=•M).•To•calculate•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_086/sol1.py
|  31| ••••number•of•cuboids•in•the•larger•set•(corresponding•to•M)•we•need•only•consider
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_086/sol1.py
|  32| ••••the•cuboids•which•have•at•least•one•side•of•length•M.•Since•we•have•ordered•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_086/sol1.py
|  33| ••••side•lengths•a•<=•b•<=•c,•we•can•assume•that•c•=•M.•Then•we•just•need•to•count
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_086/sol1.py
|  38| ••••To•count•the•number•of•pairs•(a,b)•satisfying•these•conditions,•write•d•=•a+b.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_086/sol1.py
|  41| •••••••••••••••••••••••••••••••••••we•can•actually•make•the•second•equality•strict,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_086/sol1.py
|  43| ••••••••••••••••••••••••••••••••••••••••••••••=>•shortest•distance•=•M•*•sqrt(5)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_086/sol1.py
|  59| ••••For•a•given•d,•the•number•of•cuboids•satisfying•the•required•property•with•c•=•M
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_086/sol1.py
|  75| ••••Return•the•least•value•of•M•such•that•there•are•more•than•one•million•cuboids
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_086/sol1.py
|  87| ••••num_cuboids:•int•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_086/sol1.py
|  88| ••••max_cuboid_size:•int•=•0
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_086/sol1.py
|  89| ••••sum_shortest_sides:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

strings/aho_corasick.py
|   8| ••••••••self.adlist:•list[dict]•=•list()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

strings/aho_corasick.py
|  36| ••••••••••••••••self.adlist[current_state]["next_states"].append(len(self.adlist)•-•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

strings/aho_corasick.py
|  43| ••••••••q:•deque•=•deque()
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

strings/aho_corasick.py
|  53| ••••••••••••••••••••self.find_next_state(state,•self.adlist[child]["value"])•is•None
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

strings/aho_corasick.py
|  73| ••••••••result:•dict•=•(
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphics/bezier_curve.py
|  17| ••••••••list_of_points:•Control•points•in•the•xy•plane•on•which•to•interpolate.•These
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphics/bezier_curve.py
|  27| ••••••••The•basis•function•determines•the•weight•of•each•control•point•at•time•t.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphics/bezier_curve.py
|  28| ••••••••••••t:•time•value•between•0•and•1•inclusive•at•which•to•evaluate•the•basis•of
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphics/bezier_curve.py
|  39| ••••••••output_values:•list[float]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphics/bezier_curve.py
|  70| ••••••••••••#•For•all•points,•sum•up•the•product•of•i-th•basis•function•and•i-th•point.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphics/bezier_curve.py
|  78| ••••••••••••step_size:•defines•the•step(s)•at•which•to•evaluate•the•Bezier•curve.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

graphics/bezier_curve.py
|  83| ••••••••to_plot_x:•list[float]•=•[]••#•x•coordinates•of•points•to•plot
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

graphics/bezier_curve.py
|  84| ••••••••to_plot_y:•list[float]•=•[]••#•y•coordinates•of•points•to•plot
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

hashes/luhn.py
|  19| ••••check_digit:•int
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

hashes/luhn.py
|  20| ••••_vector:•list[str]•=•list(string)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

hashes/luhn.py
|  22| ••••vector:•list[int]•=•[int(digit)•for•digit•in•__vector]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

hashes/luhn.py
|  27| ••••••••••••doubled:•int•=•digit•*•2
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_075/sol1.py
|   4| It•turns•out•that•12•cm•is•the•smallest•length•of•wire•that•can•be•bent•to•form•an
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_075/sol1.py
|   5| integer•sided•right•angle•triangle•in•exactly•one•way,•but•there•are•many•more•examples.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

project_euler/problem_075/sol1.py
|  14| In•contrast,•some•lengths•of•wire,•like•20•cm,•cannot•be•bent•to•form•an•integer•sided
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_075/sol1.py
|  15| right•angle•triangle,•and•other•lengths•allow•more•than•one•solution•to•be•found;•for
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_075/sol1.py
|  16| example,•using•120•cm•it•is•possible•to•form•exactly•three•different•integer•sided
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_075/sol1.py
|  21| Given•that•L•is•the•length•of•the•wire,•for•how•many•values•of•L•≤•1,500,000•can
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_075/sol1.py
|  37| ••••Return•the•number•of•values•of•L•<=•limit•such•that•a•wire•of•length•L•can•be
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

project_euler/problem_075/sol1.py
|  46| ••••frequencies:•DefaultDict•=•defaultdict(int)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

project_euler/problem_075/sol1.py
|  53| ••••••••••••for•perimeter•in•range(primitive_perimeter,•limit•+•1,•primitive_perimeter):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

sorts/bitonic_sort.py
|   9| def•comp_and_swap(array:•list[int],•index1:•int,•index2:•int,•direction:•int)•->•None:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

sorts/bitonic_sort.py
|  10| ••••"""Compare•the•value•at•given•index1•and•index2•of•the•array•and•swap•them•as•per
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

sorts/bitonic_sort.py
|  14| ••••DESCENDING(0);•if•(a[i]•>•a[j])•agrees•with•the•direction,•then•a[i]•and•a[j]•are
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

sorts/bitonic_sort.py
|  40| def•bitonic_merge(array:•list[int],•low:•int,•length:•int,•direction:•int)•->•None:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

sorts/bitonic_sort.py
|  42| ••••It•recursively•sorts•a•bitonic•sequence•in•ascending•order,•if•direction•=•1,•and•in
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

sorts/bitonic_sort.py
|  44| ••••The•sequence•to•be•sorted•starts•at•index•position•low,•the•parameter•length•is•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

sorts/bitonic_sort.py
|  64| def•bitonic_sort(array:•list[int],•low:•int,•length:•int,•direction:•int)•->•None:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

sorts/bitonic_sort.py
|  66| ••••This•function•first•produces•a•bitonic•sequence•by•recursively•sorting•its•two
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

sorts/bitonic_sort.py
|  67| ••••halves•in•opposite•sorting•orders,•and•then•calls•bitonic_merge•to•make•them•in•the
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

boolean_algebra/quine_mc_cluskey.py
|  51| def•decimal_to_binary(no_of_variable:•int,•minterms:•Sequence[float])•->•list[str]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

boolean_algebra/quine_mc_cluskey.py
|  83| def•selection(chart:•list[list[int]],•prime_implicants:•list[str])•->•list[str]:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

boolean_algebra/quine_mc_cluskey.py
| 137| ••••chart•=•[[0•for•x•in•range(len(binary))]•for•x•in•range(len(prime_implicants))]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

data_structures/hashing/double_hash.py
|  24| ••••••••return•(increment•*•self.__hash_function_2(key,•data))•%•self.size_table
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

sorts/iterative_merge_sort.py
|  21| ••••left,•right•=•input_list[low:mid],•input_list[mid•:•high•+•1]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

sorts/iterative_merge_sort.py
|  24| ••••input_list[low•:•high•+•1]•=•result•+•left•+•right
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

project_euler/problem_042/solution42.py
|   8| alphabetical•position•and•adding•these•values•we•form•a•word•value.•For•example,
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_042/solution42.py
|  36| ••••words•=•list(map(lambda•word:•word.strip('"'),•words.strip("\r\n").split(",")))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

digital_image_processing/morphological_operations/erosion_operation.py
|  48| ••••••••(image.shape[0]•+•kernel.shape[0]•-•1,•image.shape[1]•+•kernel.shape[1]•-•1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

digital_image_processing/morphological_operations/erosion_operation.py
|  52| ••••image_padded[kernel.shape[0]•-•2•:•-1•:,•kernel.shape[1]•-•2•:•-1•:]•=•image
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/morphological_operations/erosion_operation.py
|  52| ••••image_padded[kernel.shape[0]•-•2•:•-1•:,•kernel.shape[1]•-•2•:•-1•:]•=•image
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/morphological_operations/erosion_operation.py
|  52| ••••image_padded[kernel.shape[0]•-•2•:•-1•:,•kernel.shape[1]•-•2•:•-1•:]•=•image
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/morphological_operations/erosion_operation.py
|  52| ••••image_padded[kernel.shape[0]•-•2•:•-1•:,•kernel.shape[1]•-•2•:•-1•:]•=•image
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/morphological_operations/erosion_operation.py
|  52| ••••image_padded[kernel.shape[0]•-•2•:•-1•:,•kernel.shape[1]•-•2•:•-1•:]•=•image
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

digital_image_processing/morphological_operations/erosion_operation.py
|  58| ••••••••••••••••kernel•*•image_padded[y•:•y•+•kernel.shape[0],•x•:•x•+•kernel.shape[1]]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/morphological_operations/erosion_operation.py
|  58| ••••••••••••••••kernel•*•image_padded[y•:•y•+•kernel.shape[0],•x•:•x•+•kernel.shape[1]]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

digital_image_processing/morphological_operations/erosion_operation.py
|  58| ••••••••••••••••kernel•*•image_padded[y•:•y•+•kernel.shape[0],•x•:•x•+•kernel.shape[1]]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

strings/credit_card_validator.py
|  40| ••••••••#•then•add•the•digits•of•the•product•(e.g.,•12:•1•+•2•=•3,•15:•1•+•5•=•6),
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

strings/credit_card_validator.py
|  45| ••••••••cc_number•=•cc_number[:i]•+•str(digit)•+•cc_number[i•+•1•:]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

strings/credit_card_validator.py
|  62| ••••helloworld$•is•an•invalid•credit•card•number•because•it•has•nonnumerical•characters.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (88 > 79 characters)'

strings/credit_card_validator.py
|  68| ••••32323323233232332323•is•an•invalid•credit•card•number•because•of•its•length.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

strings/credit_card_validator.py
|  71| ••••36111111111111•is•an•invalid•credit•card•number•because•of•its•first•two•digits.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

strings/credit_card_validator.py
|  74| ••••41111111111111•is•an•invalid•credit•card•number•because•it•fails•the•Luhn•check.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

strings/credit_card_validator.py
|  77| ••••error_message•=•f"{credit_card_number}•is•an•invalid•credit•card•number•because"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/finding_bridges.py
|   2| An•edge•is•a•bridge•if,•after•removing•it•count•of•connected•components•in•graph•will
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/finding_bridges.py
|   3| be•increased•by•one.•Bridges•represent•vulnerabilities•in•a•connected•network•and•are
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

graphs/finding_bridges.py
|   4| useful•for•designing•reliable•networks.•For•example,•in•a•wired•computer•network,•an
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

graphs/finding_bridges.py
|   5| articulation•point•indicates•the•critical•computers•and•a•bridge•indicates•the•critical
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

graphs/finding_bridges.py
|  62| ••••Return•the•list•of•undirected•graph•bridges•[(a1,•b1),•...,•(ak,•bk)];•ai•<=•bi
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

graphs/finding_bridges.py
|  96| ••••bridges:•list[tuple[int,•int]]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

financial/interest.py
|  70| ••••••••raise•ValueError("nominal_annual_interest_rate_percentage•must•be•>=•0")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

financial/interest.py
|  75| ••••••••(1•+•nominal_annual_interest_rate_percentage)•**•number_of_compounding_periods
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_174/sol1.py
|   4| We•shall•define•a•square•lamina•to•be•a•square•outline•with•a•square•"hole"•so•that
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

project_euler/problem_174/sol1.py
|   7| Given•eight•tiles•it•is•possible•to•form•a•lamina•in•only•one•way:•3x3•square•with•a
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

project_euler/problem_174/sol1.py
|   8| 1x1•hole•in•the•middle.•However,•using•thirty-two•tiles•it•is•possible•to•form•two
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_174/sol1.py
|  11| If•t•represents•the•number•of•tiles•used,•we•shall•say•that•t•=•8•is•type•L(1)•and
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_174/sol1.py
|  33| ••••count:•defaultdict•=•defaultdict(int)
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

data_structures/heap/binomial_heap.py
|  30| ••••••••assert•self.left_tree_size•==•other.left_tree_size,•"Unequal•Sizes•of•Blocks"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

data_structures/heap/binomial_heap.py
|  54| ••••••••-•Insert•element•in•a•heap•with•n•elements:•Guaranteed•logn,•amoratized•1
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/heap/binomial_heap.py
|  61| ••••Create•a•random•permutation•of•30•integers•to•be•inserted•and•19•of•them•deleted
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

data_structures/heap/binomial_heap.py
|  80| ••••0•1•2•3•4•5•6•7•8•9•10•11•12•13•14•15•16•17•18•19•20•21•22•23•24•
|    | [NORMAL] PycodestyleBear (W291):
|    | W291 trailing whitespace'

data_structures/heap/binomial_heap.py
| 101| ••••[(17,•0),•('#',•1),•(31,•1),•(20,•2),•('#',•3),•('#',•3),•(34,•2),•('#',•3),•('#',•3)]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (90 > 79 characters)'

data_structures/heap/binomial_heap.py
| 123| ••••17•20•25•26•27•28•29•31•34•
|    | [NORMAL] PycodestyleBear (W291):
|    | W291 trailing whitespace'

data_structures/heap/binomial_heap.py
| 166| ••••••••••••••••combined_roots_list[i][0].parent•=•combined_roots_list[i•+•1][0]
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

data_structures/heap/binomial_heap.py
| 172| ••••••••••••••••(i.left_tree_size•==•i.parent.left_tree_size)•and•(not•i.parent.parent)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/heap/binomial_heap.py
| 241| ••••••••••••••••self.bottom_root•=•self.bottom_root.mergeTrees(self.bottom_root.parent)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

data_structures/heap/binomial_heap.py
| 321| ••••••••••••bottom_root=bottom_of_new,•min_node=min_of_new,•heap_size=size_of_new
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

data_structures/heap/binomial_heap.py
| 396| ••••••••return•"\n".join(("-"•*•level•+•str(value))•for•value,•level•in•preorder_heap)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

maths/bisection.py
|   2| Given•a•function•on•floating•number•f(x)•and•two•floating•numbers•‘a’•and•‘b’•such•that
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (87 > 79 characters)'

maths/bisection.py
|   5| Find•root•of•function•in•interval•[a,•b]•(Or•find•a•value•of•x•such•that•f(x)•is•0)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

dynamic_programming/edit_distance.py
|   5| This•is•a•pure•Python•implementation•of•Dynamic•Programming•solution•to•the•edit
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

dynamic_programming/edit_distance.py
|   9| Given•two•strings•A•and•B.•Find•the•minimum•number•of•operations•to•string•B•such•that
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

dynamic_programming/edit_distance.py
|  95| ••••print("******************•Testing•Edit•Distance•DP•Algorithm•******************")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

dynamic_programming/edit_distance.py
| 103| ••••print("The•minimum•Edit•Distance•is:•%d"•%•(min_distance_bottom_up(S1,•S2)))
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

dynamic_programming/edit_distance.py
| 105| ••••print("***************•End•of•Testing•Edit•Distance•DP•Algorithm•***************")
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

project_euler/problem_031/sol2.py
|  17| ••••>•There•are•coins(in•pence)•are•available:•1,•2,•5,•10,•20,•50,•100•and•200.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

project_euler/problem_031/sol2.py
|  36| ••••"""Returns•the•number•of•different•ways•to•make•X•pence•using•any•number•of•coins.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

project_euler/problem_031/sol2.py
|  37| ••••The•solution•is•based•on•dynamic•programming•paradigm•in•a•bottom-up•fashion.
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (81 > 79 characters)'

fractals/julia_sets.py
|  40| def•eval_exponential(c_parameter:•complex,•z_values:•numpy.ndarray)•->•numpy.ndarray:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

fractals/julia_sets.py
| 101| ••••>>>•iterate_function(eval_quadratic_polynomial,•0,•3,•numpy.array([0,1,2])).shape
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

fractals/julia_sets.py
| 157| ••••••••"ignore",•category=RuntimeWarning,•message="overflow•encountered•in•multiply"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

fractals/julia_sets.py
| 165| ••••••••"ignore",•category=RuntimeWarning,•message="overflow•encountered•in•absolute"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

fractals/julia_sets.py
| 168| ••••••••"ignore",•category=RuntimeWarning,•message="overflow•encountered•in•exp"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

maths/line_length.py
|  45| ••••••••#•Approximates•curve•as•a•sequence•of•linear•lines•and•sums•their•length
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

strings/split.py
|  27| ••••••••••••split_words.append(string[last_index•:•index•+•1])
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

web_programming/emails_from_url.py
|  11| import•re
|    | [NORMAL] PycodestyleBear (E402):
|    | E402 module level import not at top of file'

web_programming/emails_from_url.py
|  12| from•html.parser•import•HTMLParser
|    | [NORMAL] PycodestyleBear (E402):
|    | E402 module level import not at top of file'

web_programming/emails_from_url.py
|  13| from•urllib•import•parse
|    | [NORMAL] PycodestyleBear (E402):
|    | E402 module level import not at top of file'

web_programming/emails_from_url.py
|  15| import•requests
|    | [NORMAL] PycodestyleBear (E402):
|    | E402 module level import not at top of file'

web_programming/emails_from_url.py
|  21| ••••••••self.urls:•list[str]•=•[]
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

web_programming/emails_from_url.py
|  24| ••••def•handle_starttag(self,•tag:•str,•attrs:•list[tuple[str,•str•|•None]])•->•None:
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_008/sol2.py
|  74| ••••••••int(reduce(lambda•x,•y:•str(int(x)•*•int(y)),•n[i•:•i•+•13]))
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

conversions/roman_numerals.py
|   7| ••••>>>•tests•=•{"III":•3,•"CLIV":•154,•"MIX":•1009,•"MMD":•2500,•"MMMCMXCIX":•3999}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

conversions/roman_numerals.py
|  15| ••••••••if•(place•+•1•<•len(roman))•and•(vals[roman[place]]•<•vals[roman[place•+•1]]):
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

conversions/roman_numerals.py
|  28| ••••>>>•tests•=•{"III":•3,•"CLIV":•154,•"MIX":•1009,•"MMD":•2500,•"MMMCMXCIX":•3999}
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

conversions/volume_conversions.py
|  65| ••••••••••••f"Invalid•'from_type'•value:•{from_type!r}••Supported•values•are:\n"
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

conversions/volume_conversions.py
|  73| ••••return•value•*•METRIC_CONVERSION[from_type].from_•*•METRIC_CONVERSION[to_type].to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

project_euler/problem_008/sol3.py
|  88| ••••••••••••substr•=•n[cur_index•:•cur_index•+•13]
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

maths/kadanes.py
|   6| test_data:•tuple•=•([-2,•-8,•-9],•[2,•8,•9],•[-1,•0,•1],•[0,•0],•[])
|    | [NORMAL] PycodestyleBear (E701):
|    | E701 multiple statements on one line (colon)'

maths/kadanes.py
|  32| ••••••••Initially•we•set•value•of•max_sum•to•0•and•max_till_element•to•0•than•when
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (82 > 79 characters)'

maths/kadanes.py
|  33| ••••••••max_sum•is•less•than•max_till•particular•element•it•will•assign•that•value•to
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (85 > 79 characters)'

maths/kadanes.py
|  34| ••••••••max_sum•and•when•value•of•max_till_sum•is•less•than•0•it•will•assign•0•to•i
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

strings/rabin_karp.py
|  10| ••••with•complexity•O(nm),•most•efficient•when•it•is•used•with•multiple•patterns
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (80 > 79 characters)'

strings/rabin_karp.py
|  11| ••••as•it•is•able•to•check•if•any•of•a•set•of•patterns•match•a•section•of•text•in•o(1)
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (86 > 79 characters)'

strings/rabin_karp.py
|  14| ••••This•will•be•the•simple•version•which•only•assumes•one•pattern•is•being•searched
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

strings/rabin_karp.py
|  19| ••••2)•Step•through•the•text•one•character•at•a•time•passing•a•window•with•the•same
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

strings/rabin_karp.py
|  21| ••••••••calculating•the•hash•of•the•text•within•the•window•compare•it•with•the•hash
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'

strings/rabin_karp.py
|  42| ••••••••if•text_hash•==•p_hash•and•text[i•:•i•+•p_len]•==•pattern:
|    | [NORMAL] PycodestyleBear (E203):
|    | E203 whitespace before ':''

maths/lucas_lehmer_primality_test.py
|   2| ••••••••In•mathematics,•the•Lucas–Lehmer•test•(LLT)•is•a•primality•test•for•Mersenne
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (84 > 79 characters)'

maths/lucas_lehmer_primality_test.py
|   3| ••••••••numbers.••https://en.wikipedia.org/wiki/Lucas%E2%80%93Lehmer_primality_test
|    | [NORMAL] PycodestyleBear (E501):
|    | E501 line too long (83 > 79 characters)'
Executing section markdown...
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/compression/README.md
|    |++++| /app/compression/README.md
|   5|   5| 
|   6|   6| Lossless compression is mainly used for archive purpose as it allow storing data without losing information about the file archived. On the other hand, lossy compression is used for transfer of file where quality isn't necessarily what is required (i.e: images on Twitter).
|   7|   7| 
|   8|    |-* <https://www.sciencedirect.com/topics/computer-science/compression-algorithm>
|   9|    |-* <https://en.wikipedia.org/wiki/Data_compression>
|  10|    |-* <https://en.wikipedia.org/wiki/Pigeonhole_principle>
|    |   8|+- <https://www.sciencedirect.com/topics/computer-science/compression-algorithm>
|    |   9|+- <https://en.wikipedia.org/wiki/Data_compression>
|    |  10|+- <https://en.wikipedia.org/wiki/Pigeonhole_principle>

compression/README.md
|   3| Data•compression•is•everywhere,•you•need•it•to•store•data•without•taking•too•much•space.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (88 > 79)

compression/README.md
|   4| Either•the•compression•lose•some•data•(then•we•talk•about•lossy•compression,•such•as•.jpg)•or•it•does•not•(and•then•it•is•lossless•compression,•such•as•.png)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (157 > 79)

compression/README.md
|   6| Lossless•compression•is•mainly•used•for•archive•purpose•as•it•allow•storing•data•without•losing•information•about•the•file•archived.•On•the•other•hand,•lossy•compression•is•used•for•transfer•of•file•where•quality•isn't•necessarily•what•is•required•(i.e:•images•on•Twitter).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (273 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/boolean_algebra/README.md
|    |++++| /app/boolean_algebra/README.md
|   3|   3| Boolean algebra is used to do arithmetic with bits of values True (1) or False (0).
|   4|   4| There are three basic operations: 'and', 'or' and 'not'.
|   5|   5| 
|   6|    |-* <https://en.wikipedia.org/wiki/Boolean_algebra>
|   7|    |-* <https://plato.stanford.edu/entries/boolalg-math/>
|    |   6|+- <https://en.wikipedia.org/wiki/Boolean_algebra>
|    |   7|+- <https://plato.stanford.edu/entries/boolalg-math/>

boolean_algebra/README.md
|   3| Boolean•algebra•is•used•to•do•arithmetic•with•bits•of•values•True•(1)•or•False•(0).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (83 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/knapsack/README.md
|    |++++| /app/knapsack/README.md
|   2|   2| 
|   3|   3| This overview is taken from:
|   4|   4| 
|   5|    |-    https://en.wikipedia.org/wiki/Knapsack_problem
|    |   5|+```
|    |   6|+https://en.wikipedia.org/wiki/Knapsack_problem
|    |   7|+```
|   6|   8| 
|----|    | 
|    |   9|+***
|   7|  10| 
|   8|  11| ## Overview
|   9|  12| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/knapsack/README.md
|    |++++| /app/knapsack/README.md
|  12|  12| 
|  13|  13| The knapsack problem has been studied for more than a century, with early works dating as far back as 1897 The name "knapsack problem" dates back to the early works of mathematician Tobias Dantzig (1884–1956), and refers to the commonplace problem of packing the most valuable or useful items without overloading the luggage.
|  14|  14| 
|----|    | 
|    |  15|+***
|  15|  16| 
|  16|  17| ## Documentation
|  17|  18| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/knapsack/README.md
|    |++++| /app/knapsack/README.md
|  19|  19| This module uses docstrings to enable the use of Python's in-built `help(...)` function.
|  20|  20| For instance, try `help(Vector)`, `help(unit_basis_vector)`, and `help(CLASSNAME.METHODNAME)`.
|  21|  21| 
|----|    | 
|    |  22|+***
|  22|  23| 
|  23|  24| ## Usage
|  24|  25| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/knapsack/README.md
|    |++++| /app/knapsack/README.md
|  25|  25| 
|  26|  26| Import the module `knapsack.py` from the **.** directory into your project.
|  27|  27| 
|----|    | 
|    |  28|+***
|  28|  29| 
|  29|  30| ## Tests
|  30|  31| 

knapsack/README.md
|  11| The•knapsack•problem•is•a•problem•in•combinatorial•optimization:•Given•a•set•of•items,•each•with•a•weight•and•a•value,•determine•the•number•of•each•item•to•include•in•a•collection•so•that•the•total•weight•is•less•than•or•equal•to•a•given•limit•and•the•total•value•is•as•large•as•possible.•It•derives•its•name•from•the•problem•faced•by•someone•who•is•constrained•by•a•fixed-size•knapsack•and•must•fill•it•with•the•most•valuable•items.•The•problem•often•arises•in•resource•allocation•where•the•decision•makers•have•to•choose•from•a•set•of•non-divisible•projects•or•tasks•under•a•fixed•budget•or•time•constraint,•respectively.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (623 > 79)

knapsack/README.md
|  13| The•knapsack•problem•has•been•studied•for•more•than•a•century,•with•early•works•dating•as•far•back•as•1897•The•name•"knapsack•problem"•dates•back•to•the•early•works•of•mathematician•Tobias•Dantzig•(1884–1956),•and•refers•to•the•commonplace•problem•of•packing•the•most•valuable•or•useful•items•without•overloading•the•luggage.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (325 > 79)

knapsack/README.md
|  19| This•module•uses•docstrings•to•enable•the•use•of•Python's•in-built•`help(...)`•function.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (88 > 79)

knapsack/README.md
|  20| For•instance,•try•`help(Vector)`,•`help(unit_basis_vector)`,•and•`help(CLASSNAME.METHODNAME)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (94 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/.github/pull_request_template.md
|    |++++| /app/.github/pull_request_template.md
|   1|   1| ### Describe your change:
|   2|   2| 
|   3|    |-
|   4|    |-
|   5|    |-* [ ] Add an algorithm?
|   6|    |-* [ ] Fix a bug or typo in an existing algorithm?
|   7|    |-* [ ] Documentation change?
|    |   3|+- [ ] Add an algorithm?
|    |   4|+- [ ] Fix a bug or typo in an existing algorithm?
|    |   5|+- [ ] Documentation change?
|   8|   6| 
|   9|   7| ### Checklist:
|  10|   8| * [ ] I have read [CONTRIBUTING.md](https://github.com/TheAlgorithms/Python/blob/master/CONTRIBUTING.md).
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/.github/pull_request_template.md
|    |++++| /app/.github/pull_request_template.md
|   7|   7| * [ ] Documentation change?
|   8|   8| 
|   9|   9| ### Checklist:
|  10|    |-* [ ] I have read [CONTRIBUTING.md](https://github.com/TheAlgorithms/Python/blob/master/CONTRIBUTING.md).
|  11|    |-* [ ] This pull request is all my own work -- I have not plagiarized.
|  12|    |-* [ ] I know that pull requests will not be merged if they fail the automated tests.
|  13|    |-* [ ] This PR only changes one algorithm file.  To ease review, please open separate PRs for separate algorithms.
|  14|    |-* [ ] All new Python files are placed inside an existing directory.
|  15|    |-* [ ] All filenames are in all lowercase characters with no spaces or dashes.
|  16|    |-* [ ] All functions and variable names follow Python naming conventions.
|  17|    |-* [ ] All function parameters and return values are annotated with Python [type hints](https://docs.python.org/3/library/typing.html).
|  18|    |-* [ ] All functions have [doctests](https://docs.python.org/3/library/doctest.html) that pass the automated testing.
|  19|    |-* [ ] All new algorithms have a URL in its comments that points to Wikipedia or other similar explanation.
|  20|    |-* [ ] If this pull request resolves one or more open issues then the commit message contains `Fixes: #{$ISSUE_NO}`.
|    |  10|+
|    |  11|+- [ ] I have read [CONTRIBUTING.md](https://github.com/TheAlgorithms/Python/blob/master/CONTRIBUTING.md).
|    |  12|+- [ ] This pull request is all my own work -- I have not plagiarized.
|    |  13|+- [ ] I know that pull requests will not be merged if they fail the automated tests.
|    |  14|+- [ ] This PR only changes one algorithm file.  To ease review, please open separate PRs for separate algorithms.
|    |  15|+- [ ] All new Python files are placed inside an existing directory.
|    |  16|+- [ ] All filenames are in all lowercase characters with no spaces or dashes.
|    |  17|+- [ ] All functions and variable names follow Python naming conventions.
|    |  18|+- [ ] All function parameters and return values are annotated with Python [type hints](https://docs.python.org/3/library/typing.html).
|    |  19|+- [ ] All functions have [doctests](https://docs.python.org/3/library/doctest.html) that pass the automated testing.
|    |  20|+- [ ] All new algorithms have a URL in its comments that points to Wikipedia or other similar explanation.
|    |  21|+- [ ] If this pull request resolves one or more open issues then the commit message contains `Fixes: #{$ISSUE_NO}`.

.github/pull_request_template.md
|  10| *•[•]•I•have•read•[CONTRIBUTING.md](https://github.com/TheAlgorithms/Python/blob/master/CONTRIBUTING.md).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (105 > 79)

.github/pull_request_template.md
|  12| *•[•]•I•know•that•pull•requests•will•not•be•merged•if•they•fail•the•automated•tests.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (84 > 79)

.github/pull_request_template.md
|  13| *•[•]•This•PR•only•changes•one•algorithm•file.••To•ease•review,•please•open•separate•PRs•for•separate•algorithms.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (113 > 79)

.github/pull_request_template.md
|  17| *•[•]•All•function•parameters•and•return•values•are•annotated•with•Python•[type•hints](https://docs.python.org/3/library/typing.html).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (134 > 79)

.github/pull_request_template.md
|  18| *•[•]•All•functions•have•[doctests](https://docs.python.org/3/library/doctest.html)•that•pass•the•automated•testing.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (116 > 79)

.github/pull_request_template.md
|  19| *•[•]•All•new•algorithms•have•a•URL•in•its•comments•that•points•to•Wikipedia•or•other•similar•explanation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (106 > 79)

.github/pull_request_template.md
|  20| *•[•]•If•this•pull•request•resolves•one•or•more•open•issues•then•the•commit•message•contains•`Fixes:•#{$ISSUE_NO}`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (115 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/ciphers/README.md
|    |++++| /app/ciphers/README.md
|   2|   2| 
|   3|   3| Ciphers are used to protect data from people that are not allowed to have it. They are everywhere on the internet to protect your connections.
|   4|   4| 
|   5|    |-* <https://en.wikipedia.org/wiki/Cipher>
|   6|    |-* <http://practicalcryptography.com/ciphers/>
|   7|    |-* <https://practicalcryptography.com/ciphers/classical-era/>
|    |   5|+- <https://en.wikipedia.org/wiki/Cipher>
|    |   6|+- <http://practicalcryptography.com/ciphers/>
|    |   7|+- <https://practicalcryptography.com/ciphers/classical-era/>

ciphers/README.md
|   3| Ciphers•are•used•to•protect•data•from•people•that•are•not•allowed•to•have•it.•They•are•everywhere•on•the•internet•to•protect•your•connections.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (142 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/arithmetic_analysis/README.md
|    |++++| /app/arithmetic_analysis/README.md
|   2|   2| 
|   3|   3| Arithmetic analysis is a branch of mathematics that deals with solving linear equations.
|   4|   4| 
|   5|    |-* <https://en.wikipedia.org/wiki/System_of_linear_equations>
|   6|    |-* <https://en.wikipedia.org/wiki/Gaussian_elimination>
|   7|    |-* <https://en.wikipedia.org/wiki/Root-finding_algorithms>
|    |   5|+- <https://en.wikipedia.org/wiki/System_of_linear_equations>
|    |   6|+- <https://en.wikipedia.org/wiki/Gaussian_elimination>
|    |   7|+- <https://en.wikipedia.org/wiki/Root-finding_algorithms>

arithmetic_analysis/README.md
|   3| Arithmetic•analysis•is•a•branch•of•mathematics•that•deals•with•solving•linear•equations.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (88 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/conversions/README.md
|    |++++| /app/conversions/README.md
|   2|   2| 
|   3|   3| Conversion programs convert a type of data, a number from a numerical base or unit into one of another type, base or unit, e.g. binary to decimal, integer to string or foot to meters.
|   4|   4| 
|   5|    |-* <https://en.wikipedia.org/wiki/Data_conversion>
|   6|    |-* <https://en.wikipedia.org/wiki/Transcoding>
|    |   5|+- <https://en.wikipedia.org/wiki/Data_conversion>
|    |   6|+- <https://en.wikipedia.org/wiki/Transcoding>

conversions/README.md
|   3| Conversion•programs•convert•a•type•of•data,•a•number•from•a•numerical•base•or•unit•into•one•of•another•type,•base•or•unit,•e.g.•binary•to•decimal,•integer•to•string•or•foot•to•meters.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (183 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/sorts/normal_distribution_quick_sort.md
|    |++++| /app/sorts/normal_distribution_quick_sort.md
|   9|   9| ### The code
|  10|  10| 
|  11|  11| ```python
|  12|    |-
|  13|  12| >>> import numpy as np
|  14|  13| >>> from tempfile import TemporaryFile
|  15|  14| >>> outfile = TemporaryFile()
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/sorts/normal_distribution_quick_sort.md
|    |++++| /app/sorts/normal_distribution_quick_sort.md
|  19|  19| >>> np.save(outfile, X)
|  20|  20| >>> print('The array is')
|  21|  21| >>> print(X)
|  22|    |-
|  23|  22| ```
|  24|  23| 
|  25|  24| ------
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/sorts/normal_distribution_quick_sort.md
|    |++++| /app/sorts/normal_distribution_quick_sort.md
|  22|  22| 
|  23|  23| ```
|  24|  24| 
|----|    | ---
|    |  25|+***
|  25|  26| 
|  26|  27| #### The distribution of the array elements
|  27|  28| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/sorts/normal_distribution_quick_sort.md
|    |++++| /app/sorts/normal_distribution_quick_sort.md
|  34|  34| >>> plt.show()
|  35|  35| ```
|  36|  36| 
|----|    | ---
|    |  37|+***
|    |  38|+
|  37|  39| ![normal distribution large](https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/The_Normal_Distribution.svg/1280px-The_Normal_Distribution.svg.png)
|  38|  40| 
|  39|  41| ------
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/sorts/normal_distribution_quick_sort.md
|    |++++| /app/sorts/normal_distribution_quick_sort.md
|  37|  37| ------
|  38|  38| ![normal distribution large](https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/The_Normal_Distribution.svg/1280px-The_Normal_Distribution.svg.png)
|  39|  39| 
|----|    | ---
|    |  40|+***
|  40|  41| 
|  41|  42| ## Comparing the numbers of comparisons
|  42|  43| 

sorts/normal_distribution_quick_sort.md
|   3| QuickSort•Algorithm•where•the•pivot•element•is•chosen•randomly•between•first•and•last•elements•of•the•array,•and•the•array•elements•are•taken•from•Standard•Normal•Distribution.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (176 > 79)

sorts/normal_distribution_quick_sort.md
|   7| The•array•elements•are•taken•from•a•Standard•Normal•Distribution,•having•mean•=•0•and•standard•deviation•=•1.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (109 > 79)

sorts/normal_distribution_quick_sort.md
|  33| >>>•plt.plot(bins•,•1/(sigma•*•np.sqrt(2•*•np.pi))•*np.exp(•-•(bins•-•mu)**2•/•(2•*•sigma**2)•),linewidth=2,•color='r')
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (119 > 79)

sorts/normal_distribution_quick_sort.md
|  38| ![normal•distribution•large](https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/The_Normal_Distribution.svg/1280px-The_Normal_Distribution.svg.png)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (154 > 79)

sorts/normal_distribution_quick_sort.md
|  44| We•can•plot•the•function•for•Checking•'The•Number•of•Comparisons'•taking•place•between•Normal•Distribution•QuickSort•and•Ordinary•QuickSort:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (140 > 79)

sorts/normal_distribution_quick_sort.md
|  50| >>>•plt.plot([1,2,4,16,32,64,128,256,512,1024,2048],[1,1,6,15,43,136,340,800,2156,6821,16325],linewidth=2,•color='r')
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (117 > 79)

sorts/normal_distribution_quick_sort.md
|  53| >>>•plt.plot([1,2,4,16,32,64,128,256,512,1024,2048],[1,1,4,16,67,122,362,949,2131,5086,12866],linewidth=2,•color='g')
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (117 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/computer_vision/README.md
|    |++++| /app/computer_vision/README.md
|   7|   7| 
|   8|   8| While computer vision comes from modelling image processing using the techniques of machine learning, computer vision applies machine learning to recognize patterns for interpretation of images (much like the process of visual reasoning of human vision).
|   9|   9| 
|  10|    |-* <https://en.wikipedia.org/wiki/Computer_vision>
|  11|    |-* <https://www.algorithmia.com/blog/introduction-to-computer-vision>
|    |  10|+- <https://en.wikipedia.org/wiki/Computer_vision>
|    |  11|+- <https://www.algorithmia.com/blog/introduction-to-computer-vision>

computer_vision/README.md
|   3| Computer•vision•is•a•field•of•computer•science•that•works•on•enabling•computers•to•see,•identify•and•process•images•in•the•same•way•that•human•does,•and•provide•appropriate•output.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (180 > 79)

computer_vision/README.md
|   6| Image•processing•and•computer•vision•are•a•little•different•from•each•other.•Image•processing•means•applying•some•algorithms•for•transforming•image•from•one•form•to•the•other•like•smoothing,•contrasting,•stretching,•etc.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (220 > 79)

computer_vision/README.md
|   8| While•computer•vision•comes•from•modelling•image•processing•using•the•techniques•of•machine•learning,•computer•vision•applies•machine•learning•to•recognize•patterns•for•interpretation•of•images•(much•like•the•process•of•visual•reasoning•of•human•vision).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (254 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/bit_manipulation/README.md
|    |++++| /app/bit_manipulation/README.md
|   2|   2| 
|   3|   3| Bit manipulation is the act of manipulating bits to detect errors (hamming code), encrypts and decrypts messages (more on that in the 'ciphers' folder) or just do anything at the lowest level of your computer.
|   4|   4| 
|   5|    |-* <https://en.wikipedia.org/wiki/Bit_manipulation>
|   6|    |-* <https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations>
|   7|    |-* <https://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations>
|   8|    |-* <https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types>
|   9|    |-* <https://wiki.python.org/moin/BitManipulation>
|  10|    |-* <https://wiki.python.org/moin/BitwiseOperators>
|  11|    |-* <https://www.tutorialspoint.com/python3/bitwise_operators_example.htm>
|    |   5|+- <https://en.wikipedia.org/wiki/Bit_manipulation>
|    |   6|+- <https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations>
|    |   7|+- <https://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations>
|    |   8|+- <https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types>
|    |   9|+- <https://wiki.python.org/moin/BitManipulation>
|    |  10|+- <https://wiki.python.org/moin/BitwiseOperators>
|    |  11|+- <https://www.tutorialspoint.com/python3/bitwise_operators_example.htm>

bit_manipulation/README.md
|   3| Bit•manipulation•is•the•act•of•manipulating•bits•to•detect•errors•(hamming•code),•encrypts•and•decrypts•messages•(more•on•that•in•the•'ciphers'•folder)•or•just•do•anything•at•the•lowest•level•of•your•computer.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (209 > 79)

bit_manipulation/README.md
|   6| *•<https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations>
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (82 > 79)

bit_manipulation/README.md
|   7| *•<https://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations>
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (96 > 79)

bit_manipulation/README.md
|   8| *•<https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types>
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (87 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|    |++++| /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|   1|   1| # Locally Weighted Linear Regression
|   2|    |-It is a non-parametric ML algorithm that does not learn on a fixed set of parameters such as **linear regression**. \
|   3|    |-So, here comes a question of what is *linear regression*? \
|   4|    |-**Linear regression** is a supervised learning algorithm used for computing linear relationships between input (X) and output (Y). \
|    |   2|+
|    |   3|+It is a non-parametric ML algorithm that does not learn on a fixed set of parameters such as **linear regression**. \\
|    |   4|+So, here comes a question of what is *linear regression*? \\
|    |   5|+**Linear regression** is a supervised learning algorithm used for computing linear relationships between input (X) and output (Y). \\
|   5|   6| 
|   6|   7| ### Terminology Involved
|   7|   8| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|    |++++| /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|   5|   5| 
|   6|   6| ### Terminology Involved
|   7|   7| 
|   8|    |-number_of_features(i) = Number of features involved. \
|   9|    |-number_of_training_examples(m) = Number of training examples. \
|  10|    |-output_sequence(y) = Output Sequence. \
|  11|    |-$\theta$ $^T$ x = predicted point. \
|  12|    |-J($\theta$) = COst function of point.
|    |   8|+number_of_features(i) = Number of features involved. \\
|    |   9|+number_of_training_examples(m) = Number of training examples. \\
|    |  10|+output_sequence(y) = Output Sequence. \\
|    |  11|+$\\theta$ $^T$ x = predicted point. \\
|    |  12|+J($\\theta$) = COst function of point.
|  13|  13| 
|  14|  14| The steps involved in ordinary linear regression are:
|  15|  15| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|    |++++| /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|  13|  13| 
|  14|  14| The steps involved in ordinary linear regression are:
|  15|  15| 
|  16|    |-Training phase: Compute \theta to minimize the cost. \
|  17|    |-J($\theta$) = $\sum_{i=1}^m$ (($\theta$)$^T$ $x^i$ - $y^i$)$^2$
|    |  16|+Training phase: Compute \\theta to minimize the cost. \\
|    |  17|+J($\\theta$) = $\\sum\_{i=1}^m$ (($\\theta$)$^T$ $x^i$ - $y^i$)$^2$
|  18|  18| 
|  19|    |-Predict output: for given query point x, \
|  20|    |- return:  ($\theta$)$^T$ x
|    |  19|+Predict output: for given query point x, \\
|    |  20|+ return:  ($\\theta$)$^T$ x
|  21|  21| 
|  22|  22| <img src="https://miro.medium.com/max/700/1*FZsLp8yTULf77qrp0Qd91g.png" alt="Linear Regression">
|  23|  23| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|    |++++| /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|  26|  26| <img src="https://miro.medium.com/max/700/1*DHYvJg55uN-Kj8jHaxDKvQ.png" alt="Non-linear Data">
|  27|  27| <br />
|  28|  28| <br />
|  29|    |-So, here comes the role of non-parametric algorithm which doesn't compute predictions based on fixed set of params. Rather parameters $\theta$ are computed individually for each query point/data point x.
|    |  29|+So, here comes the role of non-parametric algorithm which doesn't compute predictions based on fixed set of params. Rather parameters $\\theta$ are computed individually for each query point/data point x.
|  30|  30| <br />
|  31|  31| <br />
|  32|  32| While Computing $\theta$ , a higher "preferance" is given to points in the vicinity of x than points farther from x.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|    |++++| /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|  29|  29| So, here comes the role of non-parametric algorithm which doesn't compute predictions based on fixed set of params. Rather parameters $\theta$ are computed individually for each query point/data point x.
|  30|  30| <br />
|  31|  31| <br />
|  32|    |-While Computing $\theta$ , a higher "preferance" is given to points in the vicinity of x than points farther from x.
|    |  32|+While Computing $\\theta$ , a higher "preferance" is given to points in the vicinity of x than points farther from x.
|  33|  33| 
|  34|    |-Cost Function J($\theta$) = $\sum_{i=1}^m$ $w^i$ (($\theta$)$^T$ $x^i$ - $y^i$)$^2$
|    |  34|+Cost Function J($\\theta$) = $\\sum\_{i=1}^m$ $w^i$ (($\\theta$)$^T$ $x^i$ - $y^i$)$^2$
|  35|  35| 
|  36|    |-$w^i$ is non-negative weight associated to training point $x^i$. \
|  37|    |-$w^i$ is large fr $x^i$'s lying closer to query point $x_i$. \
|    |  36|+$w^i$ is non-negative weight associated to training point $x^i$. \\
|    |  37|+$w^i$ is large fr $x^i$'s lying closer to query point $x_i$. \\
|  38|  38| $w^i$ is small for $x^i$'s lying farther to query point $x_i$.
|  39|  39| 
|  40|  40| A Typical weight can be computed using \
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|    |++++| /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|  37|  37| $w^i$ is large fr $x^i$'s lying closer to query point $x_i$. \
|  38|  38| $w^i$ is small for $x^i$'s lying farther to query point $x_i$.
|  39|  39| 
|  40|    |-A Typical weight can be computed using \
|    |  40|+A Typical weight can be computed using \\
|  41|  41| 
|  42|    |-$w^i$ = $\exp$(-$\frac{(x^i-x)(x^i-x)^T}{2\tau^2}$)
|    |  42|+$w^i$ = $\\exp$(-$\\frac{(x^i-x)(x^i-x)^T}{2\\tau^2}$)
|  43|  43| 
|  44|    |-Where $\tau$ is the bandwidth parameter that controls $w^i$ distance from x.
|    |  44|+Where $\\tau$ is the bandwidth parameter that controls $w^i$ distance from x.
|  45|  45| 
|  46|  46| Let's look at a example :
|  47|  47| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|    |++++| /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|  47|  47| 
|  48|  48| Suppose, we had a query point x=5.0 and training points $x^1$=4.9 and $x^2$=5.0 than we can calculate weights as :
|  49|  49| 
|  50|    |-$w^i$ = $\exp$(-$\frac{(x^i-x)(x^i-x)^T}{2\tau^2}$) with $\tau$=0.5
|    |  50|+$w^i$ = $\\exp$(-$\\frac{(x^i-x)(x^i-x)^T}{2\\tau^2}$) with $\\tau$=0.5
|  51|  51| 
|  52|    |-$w^1$ = $\exp$(-$\frac{(4.9-5)^2}{2(0.5)^2}$) = 0.9802
|    |  52|+$w^1$ = $\\exp$(-$\\frac{(4.9-5)^2}{2(0.5)^2}$) = 0.9802
|  53|  53| 
|  54|    |-$w^2$ = $\exp$(-$\frac{(3-5)^2}{2(0.5)^2}$) = 0.000335
|    |  54|+$w^2$ = $\\exp$(-$\\frac{(3-5)^2}{2(0.5)^2}$) = 0.000335
|  55|  55| 
|  56|    |-So, J($\theta$) = 0.9802*($\theta$ $^T$ $x^1$ - $y^1$) + 0.000335*($\theta$ $^T$ $x^2$ - $y^2$)
|    |  56|+So, J($\\theta$) = 0.9802*($\\theta$ $^T$ $x^1$ - $y^1$) + 0.000335*($\\theta$ $^T$ $x^2$ - $y^2$)
|  57|  57| 
|  58|  58| So, here by we can conclude that the weight fall exponentially as the distance between x & $x^i$ increases and So, does the contribution of error in prediction for $x^i$ to the cost.
|  59|  59| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|    |++++| /app/machine_learning/local_weighted_learning/local_weighted_learning.md
|  57|  57| 
|  58|  58| So, here by we can conclude that the weight fall exponentially as the distance between x & $x^i$ increases and So, does the contribution of error in prediction for $x^i$ to the cost.
|  59|  59| 
|  60|    |-Steps involved in LWL are : \
|  61|    |-Compute \theta to minimize the cost.
|  62|    |-J($\theta$) = $\sum_{i=1}^m$ $w^i$ (($\theta$)$^T$ $x^i$ - $y^i$)$^2$ \
|  63|    |-Predict Output: for given query point x, \
|  64|    |-return : $\theta$ $^T$ x
|    |  60|+Steps involved in LWL are : \\
|    |  61|+Compute \\theta to minimize the cost.
|    |  62|+J($\\theta$) = $\\sum\_{i=1}^m$ $w^i$ (($\\theta$)$^T$ $x^i$ - $y^i$)$^2$ \\
|    |  63|+Predict Output: for given query point x, \\
|    |  64|+return : $\\theta$ $^T$ x
|  65|  65| 
|  66|  66| <img src="https://miro.medium.com/max/700/1*H3QS05Q1GJtY-tiBL00iug.png" alt="LWL">

machine_learning/local_weighted_learning/local_weighted_learning.md
|   2| It•is•a•non-parametric•ML•algorithm•that•does•not•learn•on•a•fixed•set•of•parameters•such•as•**linear•regression**.•\
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (117 > 79)

machine_learning/local_weighted_learning/local_weighted_learning.md
|   4| **Linear•regression**•is•a•supervised•learning•algorithm•used•for•computing•linear•relationships•between•input•(X)•and•output•(Y).•\
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (132 > 79)

machine_learning/local_weighted_learning/local_weighted_learning.md
|  22| <img•src="https://miro.medium.com/max/700/1*FZsLp8yTULf77qrp0Qd91g.png"•alt="Linear•Regression">
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (96 > 79)

machine_learning/local_weighted_learning/local_weighted_learning.md
|  24| This•training•phase•is•possible•when•data•points•are•linear,•but•there•again•comes•a•question•can•we•predict•non-linear•relationship•between•x•and•y•?•as•shown•below
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (165 > 79)

machine_learning/local_weighted_learning/local_weighted_learning.md
|  26| <img•src="https://miro.medium.com/max/700/1*DHYvJg55uN-Kj8jHaxDKvQ.png"•alt="Non-linear•Data">
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (94 > 79)

machine_learning/local_weighted_learning/local_weighted_learning.md
|  29| So,•here•comes•the•role•of•non-parametric•algorithm•which•doesn't•compute•predictions•based•on•fixed•set•of•params.•Rather•parameters•$\theta$•are•computed•individually•for•each•query•point/data•point•x.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (203 > 79)

machine_learning/local_weighted_learning/local_weighted_learning.md
|  32| While•Computing•$\theta$•,•a•higher•"preferance"•is•given•to•points•in•the•vicinity•of•x•than•points•farther•from•x.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (116 > 79)

machine_learning/local_weighted_learning/local_weighted_learning.md
|  34| Cost•Function•J($\theta$)•=•$\sum_{i=1}^m$•$w^i$•(($\theta$)$^T$•$x^i$•-•$y^i$)$^2$
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (83 > 79)

machine_learning/local_weighted_learning/local_weighted_learning.md
|  48| Suppose,•we•had•a•query•point•x=5.0•and•training•points•$x^1$=4.9•and•$x^2$=5.0•than•we•can•calculate•weights•as•:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (114 > 79)

machine_learning/local_weighted_learning/local_weighted_learning.md
|  56| So,•J($\theta$)•=•0.9802*($\theta$•$^T$•$x^1$•-•$y^1$)•+•0.000335*($\theta$•$^T$•$x^2$•-•$y^2$)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (95 > 79)

machine_learning/local_weighted_learning/local_weighted_learning.md
|  58| So,•here•by•we•can•conclude•that•the•weight•fall•exponentially•as•the•distance•between•x•&•$x^i$•increases•and•So,•does•the•contribution•of•error•in•prediction•for•$x^i$•to•the•cost.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (182 > 79)

machine_learning/local_weighted_learning/local_weighted_learning.md
|  66| <img•src="https://miro.medium.com/max/700/1*H3QS05Q1GJtY-tiBL00iug.png"•alt="LWL">
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (82 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/quantum/README.md
|    |++++| /app/quantum/README.md
|   1|   1| # Welcome to Quantum Algorithms
|   2|   2| 
|   3|    |-Started at https://github.com/TheAlgorithms/Python/issues/1831
|    |   3|+Started at <https://github.com/TheAlgorithms/Python/issues/1831>
|   4|   4| 
|   5|    |-* D-Wave: https://www.dwavesys.com and https://github.com/dwavesystems
|   6|    |-* Google: https://research.google/teams/applied-science/quantum
|   7|    |-* IBM: https://qiskit.org and https://github.com/Qiskit
|   8|    |-* Rigetti: https://rigetti.com and https://github.com/rigetti
|    |   5|+- D-Wave: <https://www.dwavesys.com> and <https://github.com/dwavesystems>
|    |   6|+- Google: <https://research.google/teams/applied-science/quantum>
|    |   7|+- IBM: <https://qiskit.org> and <https://github.com/Qiskit>
|    |   8|+- Rigetti: <https://rigetti.com> and <https://github.com/rigetti>
|   9|   9| 
|  10|  10| ## IBM Qiskit
|    |  11|+
|  11|  12| - Start using by installing `pip install qiskit`, refer the [docs](https://qiskit.org/documentation/install.html) for more info.
|  12|  13| - Tutorials & References
|  13|  14|   - https://github.com/Qiskit/qiskit-tutorials
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/quantum/README.md
|    |++++| /app/quantum/README.md
|  10|  10| ## IBM Qiskit
|  11|  11| - Start using by installing `pip install qiskit`, refer the [docs](https://qiskit.org/documentation/install.html) for more info.
|  12|  12| - Tutorials & References
|  13|    |-  - https://github.com/Qiskit/qiskit-tutorials
|  14|    |-  - https://quantum-computing.ibm.com/docs/iql/first-circuit
|  15|    |-  - https://medium.com/qiskit/how-to-program-a-quantum-computer-982a9329ed02
|    |  13|+  - <https://github.com/Qiskit/qiskit-tutorials>
|    |  14|+  - <https://quantum-computing.ibm.com/docs/iql/first-circuit>
|    |  15|+  - <https://medium.com/qiskit/how-to-program-a-quantum-computer-982a9329ed02>

quantum/README.md
|  11| -•Start•using•by•installing•`pip•install•qiskit`,•refer•the•[docs](https://qiskit.org/documentation/install.html)•for•more•info.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (128 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/backtracking/README.md
|    |++++| /app/backtracking/README.md
|   2|   2| 
|   3|   3| Backtracking is a way to speed up the search process by removing candidates when they can't be the solution of a problem.
|   4|   4| 
|   5|    |-* <https://en.wikipedia.org/wiki/Backtracking>
|   6|    |-* <https://en.wikipedia.org/wiki/Decision_tree_pruning>
|   7|    |-* <https://medium.com/@priyankmistry1999/backtracking-sudoku-6e4439e4825c>
|   8|    |-* <https://www.geeksforgeeks.org/sudoku-backtracking-7/>
|    |   5|+- <https://en.wikipedia.org/wiki/Backtracking>
|    |   6|+- <https://en.wikipedia.org/wiki/Decision_tree_pruning>
|    |   7|+- <https://medium.com/@priyankmistry1999/backtracking-sudoku-6e4439e4825c>
|    |   8|+- <https://www.geeksforgeeks.org/sudoku-backtracking-7/>

backtracking/README.md
|   3| Backtracking•is•a•way•to•speed•up•the•search•process•by•removing•candidates•when•they•can't•be•the•solution•of•a•problem.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (121 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/data_structures/binary_tree/binary_tree_traversals.md
|    |++++| /app/data_structures/binary_tree/binary_tree_traversals.md
|  50|  50| 
|  51|  51| 2. If there is a left child node, push it into the stack. Repeat this process until a leaf node reached.
|  52|  52| 
|  53|    |-    > At this point the root node and all the left nodes are in the stack.
|    |  53|+   > At this point the root node and all the left nodes are in the stack.
|  54|  54| 
|  55|  55| 3. Start popping nodes from the stack. If a node has a right child node, push the child node into the stack. Repeat step 2.
|  56|  56| 

data_structures/binary_tree/binary_tree_traversals.md
|   5| The•combination•of•binary•trees•being•data•structures•and•traversal•being•an•algorithm•relates•to•classic•problems,•either•directly•or•indirectly.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (146 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|   7| >•If•you•can•grasp•the•traversal•of•binary•trees,•the•traversal•of•other•complicated•trees•will•be•easy•for•you.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (112 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  17| Stack•can•be•used•to•simplify•the•process•of•DFS•traversal.•Besides,•since•tree•is•a•recursive•data•structure,•recursion•and•stack•are•two•key•points•for•DFS.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (158 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  21| ![binary-tree-traversal-dfs](https://tva1.sinaimg.cn/large/007S8ZIlly1ghluhzhynsg30dw0dw3yl.gif)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (96 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  23| The•key•point•of•BFS•is•how•to•determine•whether•the•traversal•of•each•level•has•been•completed.•The•answer•is•to•use•a•variable•as•a•flag•to•represent•the•end•of•the•traversal•of•current•level.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (194 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  33| 2.•Pop•a•node•from•the•stack,•and•push•its•right•and•left•child•node•into•the•stack•respectively.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (97 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  37| Conclusion:•This•problem•involves•the•classic•recursive•data•structure•(i.e.•a•binary•tree),•and•the•algorithm•above•demonstrates•how•a•simplified•solution•can•be•reached•by•using•a•stack.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (188 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  39| If•you•look•at•the•bigger•picture,•you'll•find•that•the•process•of•traversal•is•as•followed.•`Visit•the•left•subtrees•respectively•from•top•to•bottom,•and•visit•the•right•subtrees•respectively•from•bottom•to•top`.•If•we•are•to•implement•it•from•this•perspective,•things•will•be•somewhat•different.•For•the•`top•to•bottom`•part•we•can•simply•use•recursion,•and•for•the•`bottom•to•top`•part•we•can•turn•to•stack.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (410 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  45| So•the•root•node•is•not•printed•first.•Things•are•getting•a•bit•complicated•here.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (81 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  51| 2.•If•there•is•a•left•child•node,•push•it•into•the•stack.•Repeat•this•process•until•a•leaf•node•reached.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (104 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  55| 3.•Start•popping•nodes•from•the•stack.•If•a•node•has•a•right•child•node,•push•the•child•node•into•the•stack.•Repeat•step•2.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (123 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  57| It's•worth•pointing•out•that•the•in-order•traversal•of•a•binary•search•tree•(BST)•is•a•sorted•array,•which•is•helpful•for•coming•up•simplified•solutions•for•some•problems.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (171 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  65| In•this•case,•the•root•node•is•printed•not•as•the•first•but•the•last•one.•A•cunning•way•to•do•it•is•to:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (103 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  67| Record•whether•the•current•node•has•been•visited.•If•1)•it's•a•leaf•node•or•2)•both•its•left•and•right•subtrees•have•been•traversed,•then•it•can•be•popped•from•the•stack.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (170 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  69| As•for•`1)•it's•a•leaf•node`,•you•can•easily•tell•whether•a•node•is•a•leaf•if•both•its•left•and•right•are•`null`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (113 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  71| As•for•`2)•both•its•left•and•right•subtrees•have•been•traversed`,•we•only•need•a•variable•to•record•whether•a•node•has•been•visited•or•not.•In•the•worst•case,•we•need•to•record•the•status•for•every•single•node•and•the•space•complexity•is•`O(n)`.•But•if•you•come•to•think•about•it,•as•we•are•using•a•stack•and•start•printing•the•result•from•the•leaf•nodes,•it•makes•sense•that•we•only•record•the•status•for•the•current•node•popping•from•the•stack,•reducing•the•space•complexity•to•`O(1)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (487 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  75| The•key•point•of•level•order•traversal•is•how•do•we•know•whether•the•traversal•of•each•level•is•done.•The•answer•is•that•we•use•a•variable•as•a•flag•representing•the•end•of•the•traversal•of•the•current•level.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (208 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  77| ![binary-tree-traversal-bfs](https://tva1.sinaimg.cn/large/007S8ZIlly1ghlui1tpoug30dw0dw3yl.gif)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (96 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  81| 1.•Visit•the•root•node,•put•it•in•a•FIFO•queue,•put•in•the•queue•a•special•flag•(we•are•using•`null`•here).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (107 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  85| 3.•If•the•node•equals•`null`,•it•means•that•all•nodes•of•the•current•level•have•been•visited.•If•the•queue•is•empty,•we•do•nothing.•Or•else•we•put•in•another•`null`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (165 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  87| 4.•If•the•node•is•not•`null`,•meaning•the•traversal•of•current•level•has•not•finished•yet,•we•enqueue•its•left•subtree•and•right•subtree•respectively.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (150 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  91| We•know•that•there•is•a•tri-color•marking•in•garbage•collection•algorithm,•which•works•as•described•below.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (106 > 79)

data_structures/binary_tree/binary_tree_traversals.md
|  99| Enlightened•by•tri-color•marking,•a•bi-color•marking•method•can•be•invented•to•solve•all•three•traversal•problems•with•one•solution.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (132 > 79)

data_structures/binary_tree/binary_tree_traversals.md
| 103| -•Use•a•color•to•mark•whether•a•node•has•been•visited•or•not.•Nodes•yet•to•be•visited•are•marked•as•white•and•visited•nodes•are•marked•as•gray.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (143 > 79)

data_structures/binary_tree/binary_tree_traversals.md
| 105| -•If•we•are•visiting•a•white•node,•turn•it•into•gray,•and•push•its•right•child•node,•itself,•and•it's•left•child•node•into•the•stack•respectively.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (146 > 79)

data_structures/binary_tree/binary_tree_traversals.md
| 109| Implementation•of•pre-order•and•post-order•traversal•algorithms•can•be•easily•done•by•changing•the•order•of•pushing•the•child•nodes•into•the•stack.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (147 > 79)

data_structures/binary_tree/binary_tree_traversals.md
| 111| Reference:•[LeetCode](https://github.com/azl397985856/leetcode/blob/master/thinkings/binary-tree-traversal.en.md)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (113 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
|   1|    |-
|   2|   1| ## Arithmetic Analysis
|   3|    |-  * [Bisection](arithmetic_analysis/bisection.py)
|   4|    |-  * [Gaussian Elimination](arithmetic_analysis/gaussian_elimination.py)
|   5|    |-  * [In Static Equilibrium](arithmetic_analysis/in_static_equilibrium.py)
|   6|    |-  * [Intersection](arithmetic_analysis/intersection.py)
|   7|    |-  * [Jacobi Iteration Method](arithmetic_analysis/jacobi_iteration_method.py)
|   8|    |-  * [Lu Decomposition](arithmetic_analysis/lu_decomposition.py)
|   9|    |-  * [Newton Forward Interpolation](arithmetic_analysis/newton_forward_interpolation.py)
|  10|    |-  * [Newton Method](arithmetic_analysis/newton_method.py)
|  11|    |-  * [Newton Raphson](arithmetic_analysis/newton_raphson.py)
|  12|    |-  * [Secant Method](arithmetic_analysis/secant_method.py)
|    |   2|+
|    |   3|+- [Bisection](arithmetic_analysis/bisection.py)
|    |   4|+- [Gaussian Elimination](arithmetic_analysis/gaussian_elimination.py)
|    |   5|+- [In Static Equilibrium](arithmetic_analysis/in_static_equilibrium.py)
|    |   6|+- [Intersection](arithmetic_analysis/intersection.py)
|    |   7|+- [Jacobi Iteration Method](arithmetic_analysis/jacobi_iteration_method.py)
|    |   8|+- [Lu Decomposition](arithmetic_analysis/lu_decomposition.py)
|    |   9|+- [Newton Forward Interpolation](arithmetic_analysis/newton_forward_interpolation.py)
|    |  10|+- [Newton Method](arithmetic_analysis/newton_method.py)
|    |  11|+- [Newton Raphson](arithmetic_analysis/newton_raphson.py)
|    |  12|+- [Secant Method](arithmetic_analysis/secant_method.py)
|  13|  13| 
|  14|  14| ## Audio Filters
|  15|  15|   * [Butterworth Filter](audio_filters/butterworth_filter.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
|  12|  12|   * [Secant Method](arithmetic_analysis/secant_method.py)
|  13|  13| 
|  14|  14| ## Audio Filters
|  15|    |-  * [Butterworth Filter](audio_filters/butterworth_filter.py)
|  16|    |-  * [Iir Filter](audio_filters/iir_filter.py)
|  17|    |-  * [Show Response](audio_filters/show_response.py)
|    |  15|+
|    |  16|+- [Butterworth Filter](audio_filters/butterworth_filter.py)
|    |  17|+- [Iir Filter](audio_filters/iir_filter.py)
|    |  18|+- [Show Response](audio_filters/show_response.py)
|  18|  19| 
|  19|  20| ## Backtracking
|  20|  21|   * [All Combinations](backtracking/all_combinations.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
|  17|  17|   * [Show Response](audio_filters/show_response.py)
|  18|  18| 
|  19|  19| ## Backtracking
|  20|    |-  * [All Combinations](backtracking/all_combinations.py)
|  21|    |-  * [All Permutations](backtracking/all_permutations.py)
|  22|    |-  * [All Subsequences](backtracking/all_subsequences.py)
|  23|    |-  * [Coloring](backtracking/coloring.py)
|  24|    |-  * [Hamiltonian Cycle](backtracking/hamiltonian_cycle.py)
|  25|    |-  * [Knight Tour](backtracking/knight_tour.py)
|  26|    |-  * [Minimax](backtracking/minimax.py)
|  27|    |-  * [N Queens](backtracking/n_queens.py)
|  28|    |-  * [N Queens Math](backtracking/n_queens_math.py)
|  29|    |-  * [Rat In Maze](backtracking/rat_in_maze.py)
|  30|    |-  * [Sudoku](backtracking/sudoku.py)
|  31|    |-  * [Sum Of Subsets](backtracking/sum_of_subsets.py)
|    |  20|+
|    |  21|+- [All Combinations](backtracking/all_combinations.py)
|    |  22|+- [All Permutations](backtracking/all_permutations.py)
|    |  23|+- [All Subsequences](backtracking/all_subsequences.py)
|    |  24|+- [Coloring](backtracking/coloring.py)
|    |  25|+- [Hamiltonian Cycle](backtracking/hamiltonian_cycle.py)
|    |  26|+- [Knight Tour](backtracking/knight_tour.py)
|    |  27|+- [Minimax](backtracking/minimax.py)
|    |  28|+- [N Queens](backtracking/n_queens.py)
|    |  29|+- [N Queens Math](backtracking/n_queens_math.py)
|    |  30|+- [Rat In Maze](backtracking/rat_in_maze.py)
|    |  31|+- [Sudoku](backtracking/sudoku.py)
|    |  32|+- [Sum Of Subsets](backtracking/sum_of_subsets.py)
|  32|  33| 
|  33|  34| ## Bit Manipulation
|  34|  35|   * [Binary And Operator](bit_manipulation/binary_and_operator.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
|  31|  31|   * [Sum Of Subsets](backtracking/sum_of_subsets.py)
|  32|  32| 
|  33|  33| ## Bit Manipulation
|  34|    |-  * [Binary And Operator](bit_manipulation/binary_and_operator.py)
|  35|    |-  * [Binary Count Setbits](bit_manipulation/binary_count_setbits.py)
|  36|    |-  * [Binary Count Trailing Zeros](bit_manipulation/binary_count_trailing_zeros.py)
|  37|    |-  * [Binary Or Operator](bit_manipulation/binary_or_operator.py)
|  38|    |-  * [Binary Shifts](bit_manipulation/binary_shifts.py)
|  39|    |-  * [Binary Twos Complement](bit_manipulation/binary_twos_complement.py)
|  40|    |-  * [Binary Xor Operator](bit_manipulation/binary_xor_operator.py)
|  41|    |-  * [Count 1S Brian Kernighan Method](bit_manipulation/count_1s_brian_kernighan_method.py)
|  42|    |-  * [Count Number Of One Bits](bit_manipulation/count_number_of_one_bits.py)
|  43|    |-  * [Gray Code Sequence](bit_manipulation/gray_code_sequence.py)
|  44|    |-  * [Reverse Bits](bit_manipulation/reverse_bits.py)
|  45|    |-  * [Single Bit Manipulation Operations](bit_manipulation/single_bit_manipulation_operations.py)
|    |  34|+
|    |  35|+- [Binary And Operator](bit_manipulation/binary_and_operator.py)
|    |  36|+- [Binary Count Setbits](bit_manipulation/binary_count_setbits.py)
|    |  37|+- [Binary Count Trailing Zeros](bit_manipulation/binary_count_trailing_zeros.py)
|    |  38|+- [Binary Or Operator](bit_manipulation/binary_or_operator.py)
|    |  39|+- [Binary Shifts](bit_manipulation/binary_shifts.py)
|    |  40|+- [Binary Twos Complement](bit_manipulation/binary_twos_complement.py)
|    |  41|+- [Binary Xor Operator](bit_manipulation/binary_xor_operator.py)
|    |  42|+- [Count 1S Brian Kernighan Method](bit_manipulation/count_1s_brian_kernighan_method.py)
|    |  43|+- [Count Number Of One Bits](bit_manipulation/count_number_of_one_bits.py)
|    |  44|+- [Gray Code Sequence](bit_manipulation/gray_code_sequence.py)
|    |  45|+- [Reverse Bits](bit_manipulation/reverse_bits.py)
|    |  46|+- [Single Bit Manipulation Operations](bit_manipulation/single_bit_manipulation_operations.py)
|  46|  47| 
|  47|  48| ## Blockchain
|  48|  49|   * [Chinese Remainder Theorem](blockchain/chinese_remainder_theorem.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
|  45|  45|   * [Single Bit Manipulation Operations](bit_manipulation/single_bit_manipulation_operations.py)
|  46|  46| 
|  47|  47| ## Blockchain
|  48|    |-  * [Chinese Remainder Theorem](blockchain/chinese_remainder_theorem.py)
|  49|    |-  * [Diophantine Equation](blockchain/diophantine_equation.py)
|  50|    |-  * [Modular Division](blockchain/modular_division.py)
|    |  48|+
|    |  49|+- [Chinese Remainder Theorem](blockchain/chinese_remainder_theorem.py)
|    |  50|+- [Diophantine Equation](blockchain/diophantine_equation.py)
|    |  51|+- [Modular Division](blockchain/modular_division.py)
|  51|  52| 
|  52|  53| ## Boolean Algebra
|  53|  54|   * [Quine Mc Cluskey](boolean_algebra/quine_mc_cluskey.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
|  50|  50|   * [Modular Division](blockchain/modular_division.py)
|  51|  51| 
|  52|  52| ## Boolean Algebra
|  53|    |-  * [Quine Mc Cluskey](boolean_algebra/quine_mc_cluskey.py)
|    |  53|+
|    |  54|+- [Quine Mc Cluskey](boolean_algebra/quine_mc_cluskey.py)
|  54|  55| 
|  55|  56| ## Cellular Automata
|  56|  57|   * [Conways Game Of Life](cellular_automata/conways_game_of_life.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
|  53|  53|   * [Quine Mc Cluskey](boolean_algebra/quine_mc_cluskey.py)
|  54|  54| 
|  55|  55| ## Cellular Automata
|  56|    |-  * [Conways Game Of Life](cellular_automata/conways_game_of_life.py)
|  57|    |-  * [Game Of Life](cellular_automata/game_of_life.py)
|  58|    |-  * [Nagel Schrekenberg](cellular_automata/nagel_schrekenberg.py)
|  59|    |-  * [One Dimensional](cellular_automata/one_dimensional.py)
|    |  56|+
|    |  57|+- [Conways Game Of Life](cellular_automata/conways_game_of_life.py)
|    |  58|+- [Game Of Life](cellular_automata/game_of_life.py)
|    |  59|+- [Nagel Schrekenberg](cellular_automata/nagel_schrekenberg.py)
|    |  60|+- [One Dimensional](cellular_automata/one_dimensional.py)
|  60|  61| 
|  61|  62| ## Ciphers
|  62|  63|   * [A1Z26](ciphers/a1z26.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
|  59|  59|   * [One Dimensional](cellular_automata/one_dimensional.py)
|  60|  60| 
|  61|  61| ## Ciphers
|  62|    |-  * [A1Z26](ciphers/a1z26.py)
|  63|    |-  * [Affine Cipher](ciphers/affine_cipher.py)
|  64|    |-  * [Atbash](ciphers/atbash.py)
|  65|    |-  * [Baconian Cipher](ciphers/baconian_cipher.py)
|  66|    |-  * [Base16](ciphers/base16.py)
|  67|    |-  * [Base32](ciphers/base32.py)
|  68|    |-  * [Base64](ciphers/base64.py)
|  69|    |-  * [Base85](ciphers/base85.py)
|  70|    |-  * [Beaufort Cipher](ciphers/beaufort_cipher.py)
|  71|    |-  * [Bifid](ciphers/bifid.py)
|  72|    |-  * [Brute Force Caesar Cipher](ciphers/brute_force_caesar_cipher.py)
|  73|    |-  * [Caesar Cipher](ciphers/caesar_cipher.py)
|  74|    |-  * [Cryptomath Module](ciphers/cryptomath_module.py)
|  75|    |-  * [Decrypt Caesar With Chi Squared](ciphers/decrypt_caesar_with_chi_squared.py)
|  76|    |-  * [Deterministic Miller Rabin](ciphers/deterministic_miller_rabin.py)
|  77|    |-  * [Diffie](ciphers/diffie.py)
|  78|    |-  * [Diffie Hellman](ciphers/diffie_hellman.py)
|  79|    |-  * [Elgamal Key Generator](ciphers/elgamal_key_generator.py)
|  80|    |-  * [Enigma Machine2](ciphers/enigma_machine2.py)
|  81|    |-  * [Hill Cipher](ciphers/hill_cipher.py)
|  82|    |-  * [Mixed Keyword Cypher](ciphers/mixed_keyword_cypher.py)
|  83|    |-  * [Mono Alphabetic Ciphers](ciphers/mono_alphabetic_ciphers.py)
|  84|    |-  * [Morse Code](ciphers/morse_code.py)
|  85|    |-  * [Onepad Cipher](ciphers/onepad_cipher.py)
|  86|    |-  * [Playfair Cipher](ciphers/playfair_cipher.py)
|  87|    |-  * [Polybius](ciphers/polybius.py)
|  88|    |-  * [Porta Cipher](ciphers/porta_cipher.py)
|  89|    |-  * [Rabin Miller](ciphers/rabin_miller.py)
|  90|    |-  * [Rail Fence Cipher](ciphers/rail_fence_cipher.py)
|  91|    |-  * [Rot13](ciphers/rot13.py)
|  92|    |-  * [Rsa Cipher](ciphers/rsa_cipher.py)
|  93|    |-  * [Rsa Factorization](ciphers/rsa_factorization.py)
|  94|    |-  * [Rsa Key Generator](ciphers/rsa_key_generator.py)
|  95|    |-  * [Shuffled Shift Cipher](ciphers/shuffled_shift_cipher.py)
|  96|    |-  * [Simple Keyword Cypher](ciphers/simple_keyword_cypher.py)
|  97|    |-  * [Simple Substitution Cipher](ciphers/simple_substitution_cipher.py)
|  98|    |-  * [Trafid Cipher](ciphers/trafid_cipher.py)
|  99|    |-  * [Transposition Cipher](ciphers/transposition_cipher.py)
| 100|    |-  * [Transposition Cipher Encrypt Decrypt File](ciphers/transposition_cipher_encrypt_decrypt_file.py)
| 101|    |-  * [Vigenere Cipher](ciphers/vigenere_cipher.py)
| 102|    |-  * [Xor Cipher](ciphers/xor_cipher.py)
|    |  62|+
|    |  63|+- [A1Z26](ciphers/a1z26.py)
|    |  64|+- [Affine Cipher](ciphers/affine_cipher.py)
|    |  65|+- [Atbash](ciphers/atbash.py)
|    |  66|+- [Baconian Cipher](ciphers/baconian_cipher.py)
|    |  67|+- [Base16](ciphers/base16.py)
|    |  68|+- [Base32](ciphers/base32.py)
|    |  69|+- [Base64](ciphers/base64.py)
|    |  70|+- [Base85](ciphers/base85.py)
|    |  71|+- [Beaufort Cipher](ciphers/beaufort_cipher.py)
|    |  72|+- [Bifid](ciphers/bifid.py)
|    |  73|+- [Brute Force Caesar Cipher](ciphers/brute_force_caesar_cipher.py)
|    |  74|+- [Caesar Cipher](ciphers/caesar_cipher.py)
|    |  75|+- [Cryptomath Module](ciphers/cryptomath_module.py)
|    |  76|+- [Decrypt Caesar With Chi Squared](ciphers/decrypt_caesar_with_chi_squared.py)
|    |  77|+- [Deterministic Miller Rabin](ciphers/deterministic_miller_rabin.py)
|    |  78|+- [Diffie](ciphers/diffie.py)
|    |  79|+- [Diffie Hellman](ciphers/diffie_hellman.py)
|    |  80|+- [Elgamal Key Generator](ciphers/elgamal_key_generator.py)
|    |  81|+- [Enigma Machine2](ciphers/enigma_machine2.py)
|    |  82|+- [Hill Cipher](ciphers/hill_cipher.py)
|    |  83|+- [Mixed Keyword Cypher](ciphers/mixed_keyword_cypher.py)
|    |  84|+- [Mono Alphabetic Ciphers](ciphers/mono_alphabetic_ciphers.py)
|    |  85|+- [Morse Code](ciphers/morse_code.py)
|    |  86|+- [Onepad Cipher](ciphers/onepad_cipher.py)
|    |  87|+- [Playfair Cipher](ciphers/playfair_cipher.py)
|    |  88|+- [Polybius](ciphers/polybius.py)
|    |  89|+- [Porta Cipher](ciphers/porta_cipher.py)
|    |  90|+- [Rabin Miller](ciphers/rabin_miller.py)
|    |  91|+- [Rail Fence Cipher](ciphers/rail_fence_cipher.py)
|    |  92|+- [Rot13](ciphers/rot13.py)
|    |  93|+- [Rsa Cipher](ciphers/rsa_cipher.py)
|    |  94|+- [Rsa Factorization](ciphers/rsa_factorization.py)
|    |  95|+- [Rsa Key Generator](ciphers/rsa_key_generator.py)
|    |  96|+- [Shuffled Shift Cipher](ciphers/shuffled_shift_cipher.py)
|    |  97|+- [Simple Keyword Cypher](ciphers/simple_keyword_cypher.py)
|    |  98|+- [Simple Substitution Cipher](ciphers/simple_substitution_cipher.py)
|    |  99|+- [Trafid Cipher](ciphers/trafid_cipher.py)
|    | 100|+- [Transposition Cipher](ciphers/transposition_cipher.py)
|    | 101|+- [Transposition Cipher Encrypt Decrypt File](ciphers/transposition_cipher_encrypt_decrypt_file.py)
|    | 102|+- [Vigenere Cipher](ciphers/vigenere_cipher.py)
|    | 103|+- [Xor Cipher](ciphers/xor_cipher.py)
| 103| 104| 
| 104| 105| ## Compression
| 105| 106|   * [Burrows Wheeler](compression/burrows_wheeler.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 102| 102|   * [Xor Cipher](ciphers/xor_cipher.py)
| 103| 103| 
| 104| 104| ## Compression
| 105|    |-  * [Burrows Wheeler](compression/burrows_wheeler.py)
| 106|    |-  * [Huffman](compression/huffman.py)
| 107|    |-  * [Lempel Ziv](compression/lempel_ziv.py)
| 108|    |-  * [Lempel Ziv Decompress](compression/lempel_ziv_decompress.py)
| 109|    |-  * [Peak Signal To Noise Ratio](compression/peak_signal_to_noise_ratio.py)
|    | 105|+
|    | 106|+- [Burrows Wheeler](compression/burrows_wheeler.py)
|    | 107|+- [Huffman](compression/huffman.py)
|    | 108|+- [Lempel Ziv](compression/lempel_ziv.py)
|    | 109|+- [Lempel Ziv Decompress](compression/lempel_ziv_decompress.py)
|    | 110|+- [Peak Signal To Noise Ratio](compression/peak_signal_to_noise_ratio.py)
| 110| 111| 
| 111| 112| ## Computer Vision
| 112| 113|   * [Cnn Classification](computer_vision/cnn_classification.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 109| 109|   * [Peak Signal To Noise Ratio](compression/peak_signal_to_noise_ratio.py)
| 110| 110| 
| 111| 111| ## Computer Vision
| 112|    |-  * [Cnn Classification](computer_vision/cnn_classification.py)
| 113|    |-  * [Flip Augmentation](computer_vision/flip_augmentation.py)
| 114|    |-  * [Harris Corner](computer_vision/harris_corner.py)
| 115|    |-  * [Horn Schunck](computer_vision/horn_schunck.py)
| 116|    |-  * [Mean Threshold](computer_vision/mean_threshold.py)
| 117|    |-  * [Mosaic Augmentation](computer_vision/mosaic_augmentation.py)
| 118|    |-  * [Pooling Functions](computer_vision/pooling_functions.py)
|    | 112|+
|    | 113|+- [Cnn Classification](computer_vision/cnn_classification.py)
|    | 114|+- [Flip Augmentation](computer_vision/flip_augmentation.py)
|    | 115|+- [Harris Corner](computer_vision/harris_corner.py)
|    | 116|+- [Horn Schunck](computer_vision/horn_schunck.py)
|    | 117|+- [Mean Threshold](computer_vision/mean_threshold.py)
|    | 118|+- [Mosaic Augmentation](computer_vision/mosaic_augmentation.py)
|    | 119|+- [Pooling Functions](computer_vision/pooling_functions.py)
| 119| 120| 
| 120| 121| ## Conversions
| 121| 122|   * [Binary To Decimal](conversions/binary_to_decimal.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 118| 118|   * [Pooling Functions](computer_vision/pooling_functions.py)
| 119| 119| 
| 120| 120| ## Conversions
| 121|    |-  * [Binary To Decimal](conversions/binary_to_decimal.py)
| 122|    |-  * [Binary To Hexadecimal](conversions/binary_to_hexadecimal.py)
| 123|    |-  * [Binary To Octal](conversions/binary_to_octal.py)
| 124|    |-  * [Decimal To Any](conversions/decimal_to_any.py)
| 125|    |-  * [Decimal To Binary](conversions/decimal_to_binary.py)
| 126|    |-  * [Decimal To Binary Recursion](conversions/decimal_to_binary_recursion.py)
| 127|    |-  * [Decimal To Hexadecimal](conversions/decimal_to_hexadecimal.py)
| 128|    |-  * [Decimal To Octal](conversions/decimal_to_octal.py)
| 129|    |-  * [Excel Title To Column](conversions/excel_title_to_column.py)
| 130|    |-  * [Hex To Bin](conversions/hex_to_bin.py)
| 131|    |-  * [Hexadecimal To Decimal](conversions/hexadecimal_to_decimal.py)
| 132|    |-  * [Length Conversion](conversions/length_conversion.py)
| 133|    |-  * [Molecular Chemistry](conversions/molecular_chemistry.py)
| 134|    |-  * [Octal To Decimal](conversions/octal_to_decimal.py)
| 135|    |-  * [Prefix Conversions](conversions/prefix_conversions.py)
| 136|    |-  * [Prefix Conversions String](conversions/prefix_conversions_string.py)
| 137|    |-  * [Pressure Conversions](conversions/pressure_conversions.py)
| 138|    |-  * [Rgb Hsv Conversion](conversions/rgb_hsv_conversion.py)
| 139|    |-  * [Roman Numerals](conversions/roman_numerals.py)
| 140|    |-  * [Temperature Conversions](conversions/temperature_conversions.py)
| 141|    |-  * [Volume Conversions](conversions/volume_conversions.py)
| 142|    |-  * [Weight Conversion](conversions/weight_conversion.py)
|    | 121|+
|    | 122|+- [Binary To Decimal](conversions/binary_to_decimal.py)
|    | 123|+- [Binary To Hexadecimal](conversions/binary_to_hexadecimal.py)
|    | 124|+- [Binary To Octal](conversions/binary_to_octal.py)
|    | 125|+- [Decimal To Any](conversions/decimal_to_any.py)
|    | 126|+- [Decimal To Binary](conversions/decimal_to_binary.py)
|    | 127|+- [Decimal To Binary Recursion](conversions/decimal_to_binary_recursion.py)
|    | 128|+- [Decimal To Hexadecimal](conversions/decimal_to_hexadecimal.py)
|    | 129|+- [Decimal To Octal](conversions/decimal_to_octal.py)
|    | 130|+- [Excel Title To Column](conversions/excel_title_to_column.py)
|    | 131|+- [Hex To Bin](conversions/hex_to_bin.py)
|    | 132|+- [Hexadecimal To Decimal](conversions/hexadecimal_to_decimal.py)
|    | 133|+- [Length Conversion](conversions/length_conversion.py)
|    | 134|+- [Molecular Chemistry](conversions/molecular_chemistry.py)
|    | 135|+- [Octal To Decimal](conversions/octal_to_decimal.py)
|    | 136|+- [Prefix Conversions](conversions/prefix_conversions.py)
|    | 137|+- [Prefix Conversions String](conversions/prefix_conversions_string.py)
|    | 138|+- [Pressure Conversions](conversions/pressure_conversions.py)
|    | 139|+- [Rgb Hsv Conversion](conversions/rgb_hsv_conversion.py)
|    | 140|+- [Roman Numerals](conversions/roman_numerals.py)
|    | 141|+- [Temperature Conversions](conversions/temperature_conversions.py)
|    | 142|+- [Volume Conversions](conversions/volume_conversions.py)
|    | 143|+- [Weight Conversion](conversions/weight_conversion.py)
| 143| 144| 
| 144| 145| ## Data Structures
| 145| 146|   * Binary Tree
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 142| 142|   * [Weight Conversion](conversions/weight_conversion.py)
| 143| 143| 
| 144| 144| ## Data Structures
| 145|    |-  * Binary Tree
| 146|    |-    * [Avl Tree](data_structures/binary_tree/avl_tree.py)
| 147|    |-    * [Basic Binary Tree](data_structures/binary_tree/basic_binary_tree.py)
| 148|    |-    * [Binary Search Tree](data_structures/binary_tree/binary_search_tree.py)
| 149|    |-    * [Binary Search Tree Recursive](data_structures/binary_tree/binary_search_tree_recursive.py)
| 150|    |-    * [Binary Tree Mirror](data_structures/binary_tree/binary_tree_mirror.py)
| 151|    |-    * [Binary Tree Traversals](data_structures/binary_tree/binary_tree_traversals.py)
| 152|    |-    * [Fenwick Tree](data_structures/binary_tree/fenwick_tree.py)
| 153|    |-    * [Lazy Segment Tree](data_structures/binary_tree/lazy_segment_tree.py)
| 154|    |-    * [Lowest Common Ancestor](data_structures/binary_tree/lowest_common_ancestor.py)
| 155|    |-    * [Merge Two Binary Trees](data_structures/binary_tree/merge_two_binary_trees.py)
| 156|    |-    * [Non Recursive Segment Tree](data_structures/binary_tree/non_recursive_segment_tree.py)
| 157|    |-    * [Number Of Possible Binary Trees](data_structures/binary_tree/number_of_possible_binary_trees.py)
| 158|    |-    * [Red Black Tree](data_structures/binary_tree/red_black_tree.py)
| 159|    |-    * [Segment Tree](data_structures/binary_tree/segment_tree.py)
| 160|    |-    * [Segment Tree Other](data_structures/binary_tree/segment_tree_other.py)
| 161|    |-    * [Treap](data_structures/binary_tree/treap.py)
| 162|    |-    * [Wavelet Tree](data_structures/binary_tree/wavelet_tree.py)
| 163|    |-  * Disjoint Set
| 164|    |-    * [Alternate Disjoint Set](data_structures/disjoint_set/alternate_disjoint_set.py)
| 165|    |-    * [Disjoint Set](data_structures/disjoint_set/disjoint_set.py)
| 166|    |-  * Hashing
| 167|    |-    * [Double Hash](data_structures/hashing/double_hash.py)
| 168|    |-    * [Hash Table](data_structures/hashing/hash_table.py)
| 169|    |-    * [Hash Table With Linked List](data_structures/hashing/hash_table_with_linked_list.py)
| 170|    |-    * Number Theory
| 171|    |-      * [Prime Numbers](data_structures/hashing/number_theory/prime_numbers.py)
| 172|    |-    * [Quadratic Probing](data_structures/hashing/quadratic_probing.py)
| 173|    |-  * Heap
| 174|    |-    * [Binomial Heap](data_structures/heap/binomial_heap.py)
| 175|    |-    * [Heap](data_structures/heap/heap.py)
| 176|    |-    * [Heap Generic](data_structures/heap/heap_generic.py)
| 177|    |-    * [Max Heap](data_structures/heap/max_heap.py)
| 178|    |-    * [Min Heap](data_structures/heap/min_heap.py)
| 179|    |-    * [Randomized Heap](data_structures/heap/randomized_heap.py)
| 180|    |-    * [Skew Heap](data_structures/heap/skew_heap.py)
| 181|    |-  * Linked List
| 182|    |-    * [Circular Linked List](data_structures/linked_list/circular_linked_list.py)
| 183|    |-    * [Deque Doubly](data_structures/linked_list/deque_doubly.py)
| 184|    |-    * [Doubly Linked List](data_structures/linked_list/doubly_linked_list.py)
| 185|    |-    * [Doubly Linked List Two](data_structures/linked_list/doubly_linked_list_two.py)
| 186|    |-    * [From Sequence](data_structures/linked_list/from_sequence.py)
| 187|    |-    * [Has Loop](data_structures/linked_list/has_loop.py)
| 188|    |-    * [Is Palindrome](data_structures/linked_list/is_palindrome.py)
| 189|    |-    * [Merge Two Lists](data_structures/linked_list/merge_two_lists.py)
| 190|    |-    * [Middle Element Of Linked List](data_structures/linked_list/middle_element_of_linked_list.py)
| 191|    |-    * [Print Reverse](data_structures/linked_list/print_reverse.py)
| 192|    |-    * [Singly Linked List](data_structures/linked_list/singly_linked_list.py)
| 193|    |-    * [Skip List](data_structures/linked_list/skip_list.py)
| 194|    |-    * [Swap Nodes](data_structures/linked_list/swap_nodes.py)
| 195|    |-  * Queue
| 196|    |-    * [Circular Queue](data_structures/queue/circular_queue.py)
| 197|    |-    * [Circular Queue Linked List](data_structures/queue/circular_queue_linked_list.py)
| 198|    |-    * [Double Ended Queue](data_structures/queue/double_ended_queue.py)
| 199|    |-    * [Linked Queue](data_structures/queue/linked_queue.py)
| 200|    |-    * [Priority Queue Using List](data_structures/queue/priority_queue_using_list.py)
| 201|    |-    * [Queue On List](data_structures/queue/queue_on_list.py)
| 202|    |-    * [Queue On Pseudo Stack](data_structures/queue/queue_on_pseudo_stack.py)
| 203|    |-  * Stacks
| 204|    |-    * [Balanced Parentheses](data_structures/stacks/balanced_parentheses.py)
| 205|    |-    * [Dijkstras Two Stack Algorithm](data_structures/stacks/dijkstras_two_stack_algorithm.py)
| 206|    |-    * [Evaluate Postfix Notations](data_structures/stacks/evaluate_postfix_notations.py)
| 207|    |-    * [Infix To Postfix Conversion](data_structures/stacks/infix_to_postfix_conversion.py)
| 208|    |-    * [Infix To Prefix Conversion](data_structures/stacks/infix_to_prefix_conversion.py)
| 209|    |-    * [Next Greater Element](data_structures/stacks/next_greater_element.py)
| 210|    |-    * [Postfix Evaluation](data_structures/stacks/postfix_evaluation.py)
| 211|    |-    * [Prefix Evaluation](data_structures/stacks/prefix_evaluation.py)
| 212|    |-    * [Stack](data_structures/stacks/stack.py)
| 213|    |-    * [Stack With Doubly Linked List](data_structures/stacks/stack_with_doubly_linked_list.py)
| 214|    |-    * [Stack With Singly Linked List](data_structures/stacks/stack_with_singly_linked_list.py)
| 215|    |-    * [Stock Span Problem](data_structures/stacks/stock_span_problem.py)
| 216|    |-  * Trie
| 217|    |-    * [Trie](data_structures/trie/trie.py)
|    | 145|+
|    | 146|+- Binary Tree
|    | 147|+  - [Avl Tree](data_structures/binary_tree/avl_tree.py)
|    | 148|+  - [Basic Binary Tree](data_structures/binary_tree/basic_binary_tree.py)
|    | 149|+  - [Binary Search Tree](data_structures/binary_tree/binary_search_tree.py)
|    | 150|+  - [Binary Search Tree Recursive](data_structures/binary_tree/binary_search_tree_recursive.py)
|    | 151|+  - [Binary Tree Mirror](data_structures/binary_tree/binary_tree_mirror.py)
|    | 152|+  - [Binary Tree Traversals](data_structures/binary_tree/binary_tree_traversals.py)
|    | 153|+  - [Fenwick Tree](data_structures/binary_tree/fenwick_tree.py)
|    | 154|+  - [Lazy Segment Tree](data_structures/binary_tree/lazy_segment_tree.py)
|    | 155|+  - [Lowest Common Ancestor](data_structures/binary_tree/lowest_common_ancestor.py)
|    | 156|+  - [Merge Two Binary Trees](data_structures/binary_tree/merge_two_binary_trees.py)
|    | 157|+  - [Non Recursive Segment Tree](data_structures/binary_tree/non_recursive_segment_tree.py)
|    | 158|+  - [Number Of Possible Binary Trees](data_structures/binary_tree/number_of_possible_binary_trees.py)
|    | 159|+  - [Red Black Tree](data_structures/binary_tree/red_black_tree.py)
|    | 160|+  - [Segment Tree](data_structures/binary_tree/segment_tree.py)
|    | 161|+  - [Segment Tree Other](data_structures/binary_tree/segment_tree_other.py)
|    | 162|+  - [Treap](data_structures/binary_tree/treap.py)
|    | 163|+  - [Wavelet Tree](data_structures/binary_tree/wavelet_tree.py)
|    | 164|+- Disjoint Set
|    | 165|+  - [Alternate Disjoint Set](data_structures/disjoint_set/alternate_disjoint_set.py)
|    | 166|+  - [Disjoint Set](data_structures/disjoint_set/disjoint_set.py)
|    | 167|+- Hashing
|    | 168|+  - [Double Hash](data_structures/hashing/double_hash.py)
|    | 169|+  - [Hash Table](data_structures/hashing/hash_table.py)
|    | 170|+  - [Hash Table With Linked List](data_structures/hashing/hash_table_with_linked_list.py)
|    | 171|+  - Number Theory
|    | 172|+    - [Prime Numbers](data_structures/hashing/number_theory/prime_numbers.py)
|    | 173|+  - [Quadratic Probing](data_structures/hashing/quadratic_probing.py)
|    | 174|+- Heap
|    | 175|+  - [Binomial Heap](data_structures/heap/binomial_heap.py)
|    | 176|+  - [Heap](data_structures/heap/heap.py)
|    | 177|+  - [Heap Generic](data_structures/heap/heap_generic.py)
|    | 178|+  - [Max Heap](data_structures/heap/max_heap.py)
|    | 179|+  - [Min Heap](data_structures/heap/min_heap.py)
|    | 180|+  - [Randomized Heap](data_structures/heap/randomized_heap.py)
|    | 181|+  - [Skew Heap](data_structures/heap/skew_heap.py)
|    | 182|+- Linked List
|    | 183|+  - [Circular Linked List](data_structures/linked_list/circular_linked_list.py)
|    | 184|+  - [Deque Doubly](data_structures/linked_list/deque_doubly.py)
|    | 185|+  - [Doubly Linked List](data_structures/linked_list/doubly_linked_list.py)
|    | 186|+  - [Doubly Linked List Two](data_structures/linked_list/doubly_linked_list_two.py)
|    | 187|+  - [From Sequence](data_structures/linked_list/from_sequence.py)
|    | 188|+  - [Has Loop](data_structures/linked_list/has_loop.py)
|    | 189|+  - [Is Palindrome](data_structures/linked_list/is_palindrome.py)
|    | 190|+  - [Merge Two Lists](data_structures/linked_list/merge_two_lists.py)
|    | 191|+  - [Middle Element Of Linked List](data_structures/linked_list/middle_element_of_linked_list.py)
|    | 192|+  - [Print Reverse](data_structures/linked_list/print_reverse.py)
|    | 193|+  - [Singly Linked List](data_structures/linked_list/singly_linked_list.py)
|    | 194|+  - [Skip List](data_structures/linked_list/skip_list.py)
|    | 195|+  - [Swap Nodes](data_structures/linked_list/swap_nodes.py)
|    | 196|+- Queue
|    | 197|+  - [Circular Queue](data_structures/queue/circular_queue.py)
|    | 198|+  - [Circular Queue Linked List](data_structures/queue/circular_queue_linked_list.py)
|    | 199|+  - [Double Ended Queue](data_structures/queue/double_ended_queue.py)
|    | 200|+  - [Linked Queue](data_structures/queue/linked_queue.py)
|    | 201|+  - [Priority Queue Using List](data_structures/queue/priority_queue_using_list.py)
|    | 202|+  - [Queue On List](data_structures/queue/queue_on_list.py)
|    | 203|+  - [Queue On Pseudo Stack](data_structures/queue/queue_on_pseudo_stack.py)
|    | 204|+- Stacks
|    | 205|+  - [Balanced Parentheses](data_structures/stacks/balanced_parentheses.py)
|    | 206|+  - [Dijkstras Two Stack Algorithm](data_structures/stacks/dijkstras_two_stack_algorithm.py)
|    | 207|+  - [Evaluate Postfix Notations](data_structures/stacks/evaluate_postfix_notations.py)
|    | 208|+  - [Infix To Postfix Conversion](data_structures/stacks/infix_to_postfix_conversion.py)
|    | 209|+  - [Infix To Prefix Conversion](data_structures/stacks/infix_to_prefix_conversion.py)
|    | 210|+  - [Next Greater Element](data_structures/stacks/next_greater_element.py)
|    | 211|+  - [Postfix Evaluation](data_structures/stacks/postfix_evaluation.py)
|    | 212|+  - [Prefix Evaluation](data_structures/stacks/prefix_evaluation.py)
|    | 213|+  - [Stack](data_structures/stacks/stack.py)
|    | 214|+  - [Stack With Doubly Linked List](data_structures/stacks/stack_with_doubly_linked_list.py)
|    | 215|+  - [Stack With Singly Linked List](data_structures/stacks/stack_with_singly_linked_list.py)
|    | 216|+  - [Stock Span Problem](data_structures/stacks/stock_span_problem.py)
|    | 217|+- Trie
|    | 218|+  - [Trie](data_structures/trie/trie.py)
| 218| 219| 
| 219| 220| ## Digital Image Processing
| 220| 221|   * [Change Brightness](digital_image_processing/change_brightness.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 217| 217|     * [Trie](data_structures/trie/trie.py)
| 218| 218| 
| 219| 219| ## Digital Image Processing
| 220|    |-  * [Change Brightness](digital_image_processing/change_brightness.py)
| 221|    |-  * [Change Contrast](digital_image_processing/change_contrast.py)
| 222|    |-  * [Convert To Negative](digital_image_processing/convert_to_negative.py)
| 223|    |-  * Dithering
| 224|    |-    * [Burkes](digital_image_processing/dithering/burkes.py)
| 225|    |-  * Edge Detection
| 226|    |-    * [Canny](digital_image_processing/edge_detection/canny.py)
| 227|    |-  * Filters
| 228|    |-    * [Bilateral Filter](digital_image_processing/filters/bilateral_filter.py)
| 229|    |-    * [Convolve](digital_image_processing/filters/convolve.py)
| 230|    |-    * [Gabor Filter](digital_image_processing/filters/gabor_filter.py)
| 231|    |-    * [Gaussian Filter](digital_image_processing/filters/gaussian_filter.py)
| 232|    |-    * [Median Filter](digital_image_processing/filters/median_filter.py)
| 233|    |-    * [Sobel Filter](digital_image_processing/filters/sobel_filter.py)
| 234|    |-  * Histogram Equalization
| 235|    |-    * [Histogram Stretch](digital_image_processing/histogram_equalization/histogram_stretch.py)
| 236|    |-  * [Index Calculation](digital_image_processing/index_calculation.py)
| 237|    |-  * Morphological Operations
| 238|    |-    * [Dilation Operation](digital_image_processing/morphological_operations/dilation_operation.py)
| 239|    |-    * [Erosion Operation](digital_image_processing/morphological_operations/erosion_operation.py)
| 240|    |-  * Resize
| 241|    |-    * [Resize](digital_image_processing/resize/resize.py)
| 242|    |-  * Rotation
| 243|    |-    * [Rotation](digital_image_processing/rotation/rotation.py)
| 244|    |-  * [Sepia](digital_image_processing/sepia.py)
| 245|    |-  * [Test Digital Image Processing](digital_image_processing/test_digital_image_processing.py)
|    | 220|+
|    | 221|+- [Change Brightness](digital_image_processing/change_brightness.py)
|    | 222|+- [Change Contrast](digital_image_processing/change_contrast.py)
|    | 223|+- [Convert To Negative](digital_image_processing/convert_to_negative.py)
|    | 224|+- Dithering
|    | 225|+  - [Burkes](digital_image_processing/dithering/burkes.py)
|    | 226|+- Edge Detection
|    | 227|+  - [Canny](digital_image_processing/edge_detection/canny.py)
|    | 228|+- Filters
|    | 229|+  - [Bilateral Filter](digital_image_processing/filters/bilateral_filter.py)
|    | 230|+  - [Convolve](digital_image_processing/filters/convolve.py)
|    | 231|+  - [Gabor Filter](digital_image_processing/filters/gabor_filter.py)
|    | 232|+  - [Gaussian Filter](digital_image_processing/filters/gaussian_filter.py)
|    | 233|+  - [Median Filter](digital_image_processing/filters/median_filter.py)
|    | 234|+  - [Sobel Filter](digital_image_processing/filters/sobel_filter.py)
|    | 235|+- Histogram Equalization
|    | 236|+  - [Histogram Stretch](digital_image_processing/histogram_equalization/histogram_stretch.py)
|    | 237|+- [Index Calculation](digital_image_processing/index_calculation.py)
|    | 238|+- Morphological Operations
|    | 239|+  - [Dilation Operation](digital_image_processing/morphological_operations/dilation_operation.py)
|    | 240|+  - [Erosion Operation](digital_image_processing/morphological_operations/erosion_operation.py)
|    | 241|+- Resize
|    | 242|+  - [Resize](digital_image_processing/resize/resize.py)
|    | 243|+- Rotation
|    | 244|+  - [Rotation](digital_image_processing/rotation/rotation.py)
|    | 245|+- [Sepia](digital_image_processing/sepia.py)
|    | 246|+- [Test Digital Image Processing](digital_image_processing/test_digital_image_processing.py)
| 246| 247| 
| 247| 248| ## Divide And Conquer
| 248| 249|   * [Closest Pair Of Points](divide_and_conquer/closest_pair_of_points.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 245| 245|   * [Test Digital Image Processing](digital_image_processing/test_digital_image_processing.py)
| 246| 246| 
| 247| 247| ## Divide And Conquer
| 248|    |-  * [Closest Pair Of Points](divide_and_conquer/closest_pair_of_points.py)
| 249|    |-  * [Convex Hull](divide_and_conquer/convex_hull.py)
| 250|    |-  * [Heaps Algorithm](divide_and_conquer/heaps_algorithm.py)
| 251|    |-  * [Heaps Algorithm Iterative](divide_and_conquer/heaps_algorithm_iterative.py)
| 252|    |-  * [Inversions](divide_and_conquer/inversions.py)
| 253|    |-  * [Kth Order Statistic](divide_and_conquer/kth_order_statistic.py)
| 254|    |-  * [Max Difference Pair](divide_and_conquer/max_difference_pair.py)
| 255|    |-  * [Max Subarray Sum](divide_and_conquer/max_subarray_sum.py)
| 256|    |-  * [Mergesort](divide_and_conquer/mergesort.py)
| 257|    |-  * [Peak](divide_and_conquer/peak.py)
| 258|    |-  * [Power](divide_and_conquer/power.py)
| 259|    |-  * [Strassen Matrix Multiplication](divide_and_conquer/strassen_matrix_multiplication.py)
|    | 248|+
|    | 249|+- [Closest Pair Of Points](divide_and_conquer/closest_pair_of_points.py)
|    | 250|+- [Convex Hull](divide_and_conquer/convex_hull.py)
|    | 251|+- [Heaps Algorithm](divide_and_conquer/heaps_algorithm.py)
|    | 252|+- [Heaps Algorithm Iterative](divide_and_conquer/heaps_algorithm_iterative.py)
|    | 253|+- [Inversions](divide_and_conquer/inversions.py)
|    | 254|+- [Kth Order Statistic](divide_and_conquer/kth_order_statistic.py)
|    | 255|+- [Max Difference Pair](divide_and_conquer/max_difference_pair.py)
|    | 256|+- [Max Subarray Sum](divide_and_conquer/max_subarray_sum.py)
|    | 257|+- [Mergesort](divide_and_conquer/mergesort.py)
|    | 258|+- [Peak](divide_and_conquer/peak.py)
|    | 259|+- [Power](divide_and_conquer/power.py)
|    | 260|+- [Strassen Matrix Multiplication](divide_and_conquer/strassen_matrix_multiplication.py)
| 260| 261| 
| 261| 262| ## Dynamic Programming
| 262| 263|   * [Abbreviation](dynamic_programming/abbreviation.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 259| 259|   * [Strassen Matrix Multiplication](divide_and_conquer/strassen_matrix_multiplication.py)
| 260| 260| 
| 261| 261| ## Dynamic Programming
| 262|    |-  * [Abbreviation](dynamic_programming/abbreviation.py)
| 263|    |-  * [All Construct](dynamic_programming/all_construct.py)
| 264|    |-  * [Bitmask](dynamic_programming/bitmask.py)
| 265|    |-  * [Catalan Numbers](dynamic_programming/catalan_numbers.py)
| 266|    |-  * [Climbing Stairs](dynamic_programming/climbing_stairs.py)
| 267|    |-  * [Edit Distance](dynamic_programming/edit_distance.py)
| 268|    |-  * [Factorial](dynamic_programming/factorial.py)
| 269|    |-  * [Fast Fibonacci](dynamic_programming/fast_fibonacci.py)
| 270|    |-  * [Fibonacci](dynamic_programming/fibonacci.py)
| 271|    |-  * [Floyd Warshall](dynamic_programming/floyd_warshall.py)
| 272|    |-  * [Fractional Knapsack](dynamic_programming/fractional_knapsack.py)
| 273|    |-  * [Fractional Knapsack 2](dynamic_programming/fractional_knapsack_2.py)
| 274|    |-  * [Integer Partition](dynamic_programming/integer_partition.py)
| 275|    |-  * [Iterating Through Submasks](dynamic_programming/iterating_through_submasks.py)
| 276|    |-  * [Knapsack](dynamic_programming/knapsack.py)
| 277|    |-  * [Longest Common Subsequence](dynamic_programming/longest_common_subsequence.py)
| 278|    |-  * [Longest Increasing Subsequence](dynamic_programming/longest_increasing_subsequence.py)
| 279|    |-  * [Longest Increasing Subsequence O(Nlogn)](dynamic_programming/longest_increasing_subsequence_o(nlogn).py)
| 280|    |-  * [Longest Sub Array](dynamic_programming/longest_sub_array.py)
| 281|    |-  * [Matrix Chain Order](dynamic_programming/matrix_chain_order.py)
| 282|    |-  * [Max Non Adjacent Sum](dynamic_programming/max_non_adjacent_sum.py)
| 283|    |-  * [Max Sub Array](dynamic_programming/max_sub_array.py)
| 284|    |-  * [Max Sum Contiguous Subsequence](dynamic_programming/max_sum_contiguous_subsequence.py)
| 285|    |-  * [Minimum Coin Change](dynamic_programming/minimum_coin_change.py)
| 286|    |-  * [Minimum Cost Path](dynamic_programming/minimum_cost_path.py)
| 287|    |-  * [Minimum Partition](dynamic_programming/minimum_partition.py)
| 288|    |-  * [Minimum Steps To One](dynamic_programming/minimum_steps_to_one.py)
| 289|    |-  * [Optimal Binary Search Tree](dynamic_programming/optimal_binary_search_tree.py)
| 290|    |-  * [Rod Cutting](dynamic_programming/rod_cutting.py)
| 291|    |-  * [Subset Generation](dynamic_programming/subset_generation.py)
| 292|    |-  * [Sum Of Subset](dynamic_programming/sum_of_subset.py)
|    | 262|+
|    | 263|+- [Abbreviation](dynamic_programming/abbreviation.py)
|    | 264|+- [All Construct](dynamic_programming/all_construct.py)
|    | 265|+- [Bitmask](dynamic_programming/bitmask.py)
|    | 266|+- [Catalan Numbers](dynamic_programming/catalan_numbers.py)
|    | 267|+- [Climbing Stairs](dynamic_programming/climbing_stairs.py)
|    | 268|+- [Edit Distance](dynamic_programming/edit_distance.py)
|    | 269|+- [Factorial](dynamic_programming/factorial.py)
|    | 270|+- [Fast Fibonacci](dynamic_programming/fast_fibonacci.py)
|    | 271|+- [Fibonacci](dynamic_programming/fibonacci.py)
|    | 272|+- [Floyd Warshall](dynamic_programming/floyd_warshall.py)
|    | 273|+- [Fractional Knapsack](dynamic_programming/fractional_knapsack.py)
|    | 274|+- [Fractional Knapsack 2](dynamic_programming/fractional_knapsack_2.py)
|    | 275|+- [Integer Partition](dynamic_programming/integer_partition.py)
|    | 276|+- [Iterating Through Submasks](dynamic_programming/iterating_through_submasks.py)
|    | 277|+- [Knapsack](dynamic_programming/knapsack.py)
|    | 278|+- [Longest Common Subsequence](dynamic_programming/longest_common_subsequence.py)
|    | 279|+- [Longest Increasing Subsequence](dynamic_programming/longest_increasing_subsequence.py)
|    | 280|+- [Longest Increasing Subsequence O(Nlogn)](dynamic_programming/longest_increasing_subsequence_o(nlogn).py)
|    | 281|+- [Longest Sub Array](dynamic_programming/longest_sub_array.py)
|    | 282|+- [Matrix Chain Order](dynamic_programming/matrix_chain_order.py)
|    | 283|+- [Max Non Adjacent Sum](dynamic_programming/max_non_adjacent_sum.py)
|    | 284|+- [Max Sub Array](dynamic_programming/max_sub_array.py)
|    | 285|+- [Max Sum Contiguous Subsequence](dynamic_programming/max_sum_contiguous_subsequence.py)
|    | 286|+- [Minimum Coin Change](dynamic_programming/minimum_coin_change.py)
|    | 287|+- [Minimum Cost Path](dynamic_programming/minimum_cost_path.py)
|    | 288|+- [Minimum Partition](dynamic_programming/minimum_partition.py)
|    | 289|+- [Minimum Steps To One](dynamic_programming/minimum_steps_to_one.py)
|    | 290|+- [Optimal Binary Search Tree](dynamic_programming/optimal_binary_search_tree.py)
|    | 291|+- [Rod Cutting](dynamic_programming/rod_cutting.py)
|    | 292|+- [Subset Generation](dynamic_programming/subset_generation.py)
|    | 293|+- [Sum Of Subset](dynamic_programming/sum_of_subset.py)
| 293| 294| 
| 294| 295| ## Electronics
| 295| 296|   * [Carrier Concentration](electronics/carrier_concentration.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 292| 292|   * [Sum Of Subset](dynamic_programming/sum_of_subset.py)
| 293| 293| 
| 294| 294| ## Electronics
| 295|    |-  * [Carrier Concentration](electronics/carrier_concentration.py)
| 296|    |-  * [Coulombs Law](electronics/coulombs_law.py)
| 297|    |-  * [Electric Power](electronics/electric_power.py)
| 298|    |-  * [Ohms Law](electronics/ohms_law.py)
|    | 295|+
|    | 296|+- [Carrier Concentration](electronics/carrier_concentration.py)
|    | 297|+- [Coulombs Law](electronics/coulombs_law.py)
|    | 298|+- [Electric Power](electronics/electric_power.py)
|    | 299|+- [Ohms Law](electronics/ohms_law.py)
| 299| 300| 
| 300| 301| ## File Transfer
| 301| 302|   * [Receive File](file_transfer/receive_file.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 298| 298|   * [Ohms Law](electronics/ohms_law.py)
| 299| 299| 
| 300| 300| ## File Transfer
| 301|    |-  * [Receive File](file_transfer/receive_file.py)
| 302|    |-  * [Send File](file_transfer/send_file.py)
| 303|    |-  * Tests
| 304|    |-    * [Test Send File](file_transfer/tests/test_send_file.py)
|    | 301|+
|    | 302|+- [Receive File](file_transfer/receive_file.py)
|    | 303|+- [Send File](file_transfer/send_file.py)
|    | 304|+- Tests
|    | 305|+  - [Test Send File](file_transfer/tests/test_send_file.py)
| 305| 306| 
| 306| 307| ## Financial
| 307| 308|   * [Equated Monthly Installments](financial/equated_monthly_installments.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 304| 304|     * [Test Send File](file_transfer/tests/test_send_file.py)
| 305| 305| 
| 306| 306| ## Financial
| 307|    |-  * [Equated Monthly Installments](financial/equated_monthly_installments.py)
| 308|    |-  * [Interest](financial/interest.py)
|    | 307|+
|    | 308|+- [Equated Monthly Installments](financial/equated_monthly_installments.py)
|    | 309|+- [Interest](financial/interest.py)
| 309| 310| 
| 310| 311| ## Fractals
| 311| 312|   * [Julia Sets](fractals/julia_sets.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 308| 308|   * [Interest](financial/interest.py)
| 309| 309| 
| 310| 310| ## Fractals
| 311|    |-  * [Julia Sets](fractals/julia_sets.py)
| 312|    |-  * [Koch Snowflake](fractals/koch_snowflake.py)
| 313|    |-  * [Mandelbrot](fractals/mandelbrot.py)
| 314|    |-  * [Sierpinski Triangle](fractals/sierpinski_triangle.py)
|    | 311|+
|    | 312|+- [Julia Sets](fractals/julia_sets.py)
|    | 313|+- [Koch Snowflake](fractals/koch_snowflake.py)
|    | 314|+- [Mandelbrot](fractals/mandelbrot.py)
|    | 315|+- [Sierpinski Triangle](fractals/sierpinski_triangle.py)
| 315| 316| 
| 316| 317| ## Fuzzy Logic
| 317| 318|   * [Fuzzy Operations](fuzzy_logic/fuzzy_operations.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 314| 314|   * [Sierpinski Triangle](fractals/sierpinski_triangle.py)
| 315| 315| 
| 316| 316| ## Fuzzy Logic
| 317|    |-  * [Fuzzy Operations](fuzzy_logic/fuzzy_operations.py)
|    | 317|+
|    | 318|+- [Fuzzy Operations](fuzzy_logic/fuzzy_operations.py)
| 318| 319| 
| 319| 320| ## Genetic Algorithm
| 320| 321|   * [Basic String](genetic_algorithm/basic_string.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 317| 317|   * [Fuzzy Operations](fuzzy_logic/fuzzy_operations.py)
| 318| 318| 
| 319| 319| ## Genetic Algorithm
| 320|    |-  * [Basic String](genetic_algorithm/basic_string.py)
|    | 320|+
|    | 321|+- [Basic String](genetic_algorithm/basic_string.py)
| 321| 322| 
| 322| 323| ## Geodesy
| 323| 324|   * [Haversine Distance](geodesy/haversine_distance.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 320| 320|   * [Basic String](genetic_algorithm/basic_string.py)
| 321| 321| 
| 322| 322| ## Geodesy
| 323|    |-  * [Haversine Distance](geodesy/haversine_distance.py)
| 324|    |-  * [Lamberts Ellipsoidal Distance](geodesy/lamberts_ellipsoidal_distance.py)
|    | 323|+
|    | 324|+- [Haversine Distance](geodesy/haversine_distance.py)
|    | 325|+- [Lamberts Ellipsoidal Distance](geodesy/lamberts_ellipsoidal_distance.py)
| 325| 326| 
| 326| 327| ## Graphics
| 327| 328|   * [Bezier Curve](graphics/bezier_curve.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 324| 324|   * [Lamberts Ellipsoidal Distance](geodesy/lamberts_ellipsoidal_distance.py)
| 325| 325| 
| 326| 326| ## Graphics
| 327|    |-  * [Bezier Curve](graphics/bezier_curve.py)
| 328|    |-  * [Vector3 For 2D Rendering](graphics/vector3_for_2d_rendering.py)
|    | 327|+
|    | 328|+- [Bezier Curve](graphics/bezier_curve.py)
|    | 329|+- [Vector3 For 2D Rendering](graphics/vector3_for_2d_rendering.py)
| 329| 330| 
| 330| 331| ## Graphs
| 331| 332|   * [A Star](graphs/a_star.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 328| 328|   * [Vector3 For 2D Rendering](graphics/vector3_for_2d_rendering.py)
| 329| 329| 
| 330| 330| ## Graphs
| 331|    |-  * [A Star](graphs/a_star.py)
| 332|    |-  * [Articulation Points](graphs/articulation_points.py)
| 333|    |-  * [Basic Graphs](graphs/basic_graphs.py)
| 334|    |-  * [Bellman Ford](graphs/bellman_ford.py)
| 335|    |-  * [Bfs Shortest Path](graphs/bfs_shortest_path.py)
| 336|    |-  * [Bfs Zero One Shortest Path](graphs/bfs_zero_one_shortest_path.py)
| 337|    |-  * [Bidirectional A Star](graphs/bidirectional_a_star.py)
| 338|    |-  * [Bidirectional Breadth First Search](graphs/bidirectional_breadth_first_search.py)
| 339|    |-  * [Boruvka](graphs/boruvka.py)
| 340|    |-  * [Breadth First Search](graphs/breadth_first_search.py)
| 341|    |-  * [Breadth First Search 2](graphs/breadth_first_search_2.py)
| 342|    |-  * [Breadth First Search Shortest Path](graphs/breadth_first_search_shortest_path.py)
| 343|    |-  * [Check Bipartite Graph Bfs](graphs/check_bipartite_graph_bfs.py)
| 344|    |-  * [Check Bipartite Graph Dfs](graphs/check_bipartite_graph_dfs.py)
| 345|    |-  * [Check Cycle](graphs/check_cycle.py)
| 346|    |-  * [Connected Components](graphs/connected_components.py)
| 347|    |-  * [Depth First Search](graphs/depth_first_search.py)
| 348|    |-  * [Depth First Search 2](graphs/depth_first_search_2.py)
| 349|    |-  * [Dijkstra](graphs/dijkstra.py)
| 350|    |-  * [Dijkstra 2](graphs/dijkstra_2.py)
| 351|    |-  * [Dijkstra Algorithm](graphs/dijkstra_algorithm.py)
| 352|    |-  * [Dinic](graphs/dinic.py)
| 353|    |-  * [Directed And Undirected (Weighted) Graph](graphs/directed_and_undirected_(weighted)_graph.py)
| 354|    |-  * [Edmonds Karp Multiple Source And Sink](graphs/edmonds_karp_multiple_source_and_sink.py)
| 355|    |-  * [Eulerian Path And Circuit For Undirected Graph](graphs/eulerian_path_and_circuit_for_undirected_graph.py)
| 356|    |-  * [Even Tree](graphs/even_tree.py)
| 357|    |-  * [Finding Bridges](graphs/finding_bridges.py)
| 358|    |-  * [Frequent Pattern Graph Miner](graphs/frequent_pattern_graph_miner.py)
| 359|    |-  * [G Topological Sort](graphs/g_topological_sort.py)
| 360|    |-  * [Gale Shapley Bigraph](graphs/gale_shapley_bigraph.py)
| 361|    |-  * [Graph List](graphs/graph_list.py)
| 362|    |-  * [Graph Matrix](graphs/graph_matrix.py)
| 363|    |-  * [Graphs Floyd Warshall](graphs/graphs_floyd_warshall.py)
| 364|    |-  * [Greedy Best First](graphs/greedy_best_first.py)
| 365|    |-  * [Greedy Min Vertex Cover](graphs/greedy_min_vertex_cover.py)
| 366|    |-  * [Kahns Algorithm Long](graphs/kahns_algorithm_long.py)
| 367|    |-  * [Kahns Algorithm Topo](graphs/kahns_algorithm_topo.py)
| 368|    |-  * [Karger](graphs/karger.py)
| 369|    |-  * [Markov Chain](graphs/markov_chain.py)
| 370|    |-  * [Matching Min Vertex Cover](graphs/matching_min_vertex_cover.py)
| 371|    |-  * [Minimum Path Sum](graphs/minimum_path_sum.py)
| 372|    |-  * [Minimum Spanning Tree Boruvka](graphs/minimum_spanning_tree_boruvka.py)
| 373|    |-  * [Minimum Spanning Tree Kruskal](graphs/minimum_spanning_tree_kruskal.py)
| 374|    |-  * [Minimum Spanning Tree Kruskal2](graphs/minimum_spanning_tree_kruskal2.py)
| 375|    |-  * [Minimum Spanning Tree Prims](graphs/minimum_spanning_tree_prims.py)
| 376|    |-  * [Minimum Spanning Tree Prims2](graphs/minimum_spanning_tree_prims2.py)
| 377|    |-  * [Multi Heuristic Astar](graphs/multi_heuristic_astar.py)
| 378|    |-  * [Page Rank](graphs/page_rank.py)
| 379|    |-  * [Prim](graphs/prim.py)
| 380|    |-  * [Random Graph Generator](graphs/random_graph_generator.py)
| 381|    |-  * [Scc Kosaraju](graphs/scc_kosaraju.py)
| 382|    |-  * [Strongly Connected Components](graphs/strongly_connected_components.py)
| 383|    |-  * [Tarjans Scc](graphs/tarjans_scc.py)
| 384|    |-  * Tests
| 385|    |-    * [Test Min Spanning Tree Kruskal](graphs/tests/test_min_spanning_tree_kruskal.py)
| 386|    |-    * [Test Min Spanning Tree Prim](graphs/tests/test_min_spanning_tree_prim.py)
|    | 331|+
|    | 332|+- [A Star](graphs/a_star.py)
|    | 333|+- [Articulation Points](graphs/articulation_points.py)
|    | 334|+- [Basic Graphs](graphs/basic_graphs.py)
|    | 335|+- [Bellman Ford](graphs/bellman_ford.py)
|    | 336|+- [Bfs Shortest Path](graphs/bfs_shortest_path.py)
|    | 337|+- [Bfs Zero One Shortest Path](graphs/bfs_zero_one_shortest_path.py)
|    | 338|+- [Bidirectional A Star](graphs/bidirectional_a_star.py)
|    | 339|+- [Bidirectional Breadth First Search](graphs/bidirectional_breadth_first_search.py)
|    | 340|+- [Boruvka](graphs/boruvka.py)
|    | 341|+- [Breadth First Search](graphs/breadth_first_search.py)
|    | 342|+- [Breadth First Search 2](graphs/breadth_first_search_2.py)
|    | 343|+- [Breadth First Search Shortest Path](graphs/breadth_first_search_shortest_path.py)
|    | 344|+- [Check Bipartite Graph Bfs](graphs/check_bipartite_graph_bfs.py)
|    | 345|+- [Check Bipartite Graph Dfs](graphs/check_bipartite_graph_dfs.py)
|    | 346|+- [Check Cycle](graphs/check_cycle.py)
|    | 347|+- [Connected Components](graphs/connected_components.py)
|    | 348|+- [Depth First Search](graphs/depth_first_search.py)
|    | 349|+- [Depth First Search 2](graphs/depth_first_search_2.py)
|    | 350|+- [Dijkstra](graphs/dijkstra.py)
|    | 351|+- [Dijkstra 2](graphs/dijkstra_2.py)
|    | 352|+- [Dijkstra Algorithm](graphs/dijkstra_algorithm.py)
|    | 353|+- [Dinic](graphs/dinic.py)
|    | 354|+- [Directed And Undirected (Weighted) Graph](graphs/directed_and_undirected_(weighted)_graph.py)
|    | 355|+- [Edmonds Karp Multiple Source And Sink](graphs/edmonds_karp_multiple_source_and_sink.py)
|    | 356|+- [Eulerian Path And Circuit For Undirected Graph](graphs/eulerian_path_and_circuit_for_undirected_graph.py)
|    | 357|+- [Even Tree](graphs/even_tree.py)
|    | 358|+- [Finding Bridges](graphs/finding_bridges.py)
|    | 359|+- [Frequent Pattern Graph Miner](graphs/frequent_pattern_graph_miner.py)
|    | 360|+- [G Topological Sort](graphs/g_topological_sort.py)
|    | 361|+- [Gale Shapley Bigraph](graphs/gale_shapley_bigraph.py)
|    | 362|+- [Graph List](graphs/graph_list.py)
|    | 363|+- [Graph Matrix](graphs/graph_matrix.py)
|    | 364|+- [Graphs Floyd Warshall](graphs/graphs_floyd_warshall.py)
|    | 365|+- [Greedy Best First](graphs/greedy_best_first.py)
|    | 366|+- [Greedy Min Vertex Cover](graphs/greedy_min_vertex_cover.py)
|    | 367|+- [Kahns Algorithm Long](graphs/kahns_algorithm_long.py)
|    | 368|+- [Kahns Algorithm Topo](graphs/kahns_algorithm_topo.py)
|    | 369|+- [Karger](graphs/karger.py)
|    | 370|+- [Markov Chain](graphs/markov_chain.py)
|    | 371|+- [Matching Min Vertex Cover](graphs/matching_min_vertex_cover.py)
|    | 372|+- [Minimum Path Sum](graphs/minimum_path_sum.py)
|    | 373|+- [Minimum Spanning Tree Boruvka](graphs/minimum_spanning_tree_boruvka.py)
|    | 374|+- [Minimum Spanning Tree Kruskal](graphs/minimum_spanning_tree_kruskal.py)
|    | 375|+- [Minimum Spanning Tree Kruskal2](graphs/minimum_spanning_tree_kruskal2.py)
|    | 376|+- [Minimum Spanning Tree Prims](graphs/minimum_spanning_tree_prims.py)
|    | 377|+- [Minimum Spanning Tree Prims2](graphs/minimum_spanning_tree_prims2.py)
|    | 378|+- [Multi Heuristic Astar](graphs/multi_heuristic_astar.py)
|    | 379|+- [Page Rank](graphs/page_rank.py)
|    | 380|+- [Prim](graphs/prim.py)
|    | 381|+- [Random Graph Generator](graphs/random_graph_generator.py)
|    | 382|+- [Scc Kosaraju](graphs/scc_kosaraju.py)
|    | 383|+- [Strongly Connected Components](graphs/strongly_connected_components.py)
|    | 384|+- [Tarjans Scc](graphs/tarjans_scc.py)
|    | 385|+- Tests
|    | 386|+  - [Test Min Spanning Tree Kruskal](graphs/tests/test_min_spanning_tree_kruskal.py)
|    | 387|+  - [Test Min Spanning Tree Prim](graphs/tests/test_min_spanning_tree_prim.py)
| 387| 388| 
| 388| 389| ## Greedy Methods
| 389| 390|   * [Optimal Merge Pattern](greedy_methods/optimal_merge_pattern.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 386| 386|     * [Test Min Spanning Tree Prim](graphs/tests/test_min_spanning_tree_prim.py)
| 387| 387| 
| 388| 388| ## Greedy Methods
| 389|    |-  * [Optimal Merge Pattern](greedy_methods/optimal_merge_pattern.py)
|    | 389|+
|    | 390|+- [Optimal Merge Pattern](greedy_methods/optimal_merge_pattern.py)
| 390| 391| 
| 391| 392| ## Hashes
| 392| 393|   * [Adler32](hashes/adler32.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 389| 389|   * [Optimal Merge Pattern](greedy_methods/optimal_merge_pattern.py)
| 390| 390| 
| 391| 391| ## Hashes
| 392|    |-  * [Adler32](hashes/adler32.py)
| 393|    |-  * [Chaos Machine](hashes/chaos_machine.py)
| 394|    |-  * [Djb2](hashes/djb2.py)
| 395|    |-  * [Enigma Machine](hashes/enigma_machine.py)
| 396|    |-  * [Hamming Code](hashes/hamming_code.py)
| 397|    |-  * [Luhn](hashes/luhn.py)
| 398|    |-  * [Md5](hashes/md5.py)
| 399|    |-  * [Sdbm](hashes/sdbm.py)
| 400|    |-  * [Sha1](hashes/sha1.py)
| 401|    |-  * [Sha256](hashes/sha256.py)
|    | 392|+
|    | 393|+- [Adler32](hashes/adler32.py)
|    | 394|+- [Chaos Machine](hashes/chaos_machine.py)
|    | 395|+- [Djb2](hashes/djb2.py)
|    | 396|+- [Enigma Machine](hashes/enigma_machine.py)
|    | 397|+- [Hamming Code](hashes/hamming_code.py)
|    | 398|+- [Luhn](hashes/luhn.py)
|    | 399|+- [Md5](hashes/md5.py)
|    | 400|+- [Sdbm](hashes/sdbm.py)
|    | 401|+- [Sha1](hashes/sha1.py)
|    | 402|+- [Sha256](hashes/sha256.py)
| 402| 403| 
| 403| 404| ## Knapsack
| 404| 405|   * [Greedy Knapsack](knapsack/greedy_knapsack.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 401| 401|   * [Sha256](hashes/sha256.py)
| 402| 402| 
| 403| 403| ## Knapsack
| 404|    |-  * [Greedy Knapsack](knapsack/greedy_knapsack.py)
| 405|    |-  * [Knapsack](knapsack/knapsack.py)
| 406|    |-  * Tests
| 407|    |-    * [Test Greedy Knapsack](knapsack/tests/test_greedy_knapsack.py)
| 408|    |-    * [Test Knapsack](knapsack/tests/test_knapsack.py)
|    | 404|+
|    | 405|+- [Greedy Knapsack](knapsack/greedy_knapsack.py)
|    | 406|+- [Knapsack](knapsack/knapsack.py)
|    | 407|+- Tests
|    | 408|+  - [Test Greedy Knapsack](knapsack/tests/test_greedy_knapsack.py)
|    | 409|+  - [Test Knapsack](knapsack/tests/test_knapsack.py)
| 409| 410| 
| 410| 411| ## Linear Algebra
| 411| 412|   * Src
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 408| 408|     * [Test Knapsack](knapsack/tests/test_knapsack.py)
| 409| 409| 
| 410| 410| ## Linear Algebra
| 411|    |-  * Src
| 412|    |-    * [Conjugate Gradient](linear_algebra/src/conjugate_gradient.py)
| 413|    |-    * [Lib](linear_algebra/src/lib.py)
| 414|    |-    * [Polynom For Points](linear_algebra/src/polynom_for_points.py)
| 415|    |-    * [Power Iteration](linear_algebra/src/power_iteration.py)
| 416|    |-    * [Rayleigh Quotient](linear_algebra/src/rayleigh_quotient.py)
| 417|    |-    * [Schur Complement](linear_algebra/src/schur_complement.py)
| 418|    |-    * [Test Linear Algebra](linear_algebra/src/test_linear_algebra.py)
| 419|    |-    * [Transformations 2D](linear_algebra/src/transformations_2d.py)
|    | 411|+
|    | 412|+- Src
|    | 413|+  - [Conjugate Gradient](linear_algebra/src/conjugate_gradient.py)
|    | 414|+  - [Lib](linear_algebra/src/lib.py)
|    | 415|+  - [Polynom For Points](linear_algebra/src/polynom_for_points.py)
|    | 416|+  - [Power Iteration](linear_algebra/src/power_iteration.py)
|    | 417|+  - [Rayleigh Quotient](linear_algebra/src/rayleigh_quotient.py)
|    | 418|+  - [Schur Complement](linear_algebra/src/schur_complement.py)
|    | 419|+  - [Test Linear Algebra](linear_algebra/src/test_linear_algebra.py)
|    | 420|+  - [Transformations 2D](linear_algebra/src/transformations_2d.py)
| 420| 421| 
| 421| 422| ## Machine Learning
| 422| 423|   * [Astar](machine_learning/astar.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 419| 419|     * [Transformations 2D](linear_algebra/src/transformations_2d.py)
| 420| 420| 
| 421| 421| ## Machine Learning
| 422|    |-  * [Astar](machine_learning/astar.py)
| 423|    |-  * [Data Transformations](machine_learning/data_transformations.py)
| 424|    |-  * [Decision Tree](machine_learning/decision_tree.py)
| 425|    |-  * Forecasting
| 426|    |-    * [Run](machine_learning/forecasting/run.py)
| 427|    |-  * [Gaussian Naive Bayes](machine_learning/gaussian_naive_bayes.py)
| 428|    |-  * [Gradient Boosting Regressor](machine_learning/gradient_boosting_regressor.py)
| 429|    |-  * [Gradient Descent](machine_learning/gradient_descent.py)
| 430|    |-  * [K Means Clust](machine_learning/k_means_clust.py)
| 431|    |-  * [K Nearest Neighbours](machine_learning/k_nearest_neighbours.py)
| 432|    |-  * [Knn Sklearn](machine_learning/knn_sklearn.py)
| 433|    |-  * [Linear Discriminant Analysis](machine_learning/linear_discriminant_analysis.py)
| 434|    |-  * [Linear Regression](machine_learning/linear_regression.py)
| 435|    |-  * Local Weighted Learning
| 436|    |-    * [Local Weighted Learning](machine_learning/local_weighted_learning/local_weighted_learning.py)
| 437|    |-  * [Logistic Regression](machine_learning/logistic_regression.py)
| 438|    |-  * Lstm
| 439|    |-    * [Lstm Prediction](machine_learning/lstm/lstm_prediction.py)
| 440|    |-  * [Multilayer Perceptron Classifier](machine_learning/multilayer_perceptron_classifier.py)
| 441|    |-  * [Polymonial Regression](machine_learning/polymonial_regression.py)
| 442|    |-  * [Random Forest Classifier](machine_learning/random_forest_classifier.py)
| 443|    |-  * [Random Forest Regressor](machine_learning/random_forest_regressor.py)
| 444|    |-  * [Scoring Functions](machine_learning/scoring_functions.py)
| 445|    |-  * [Sequential Minimum Optimization](machine_learning/sequential_minimum_optimization.py)
| 446|    |-  * [Similarity Search](machine_learning/similarity_search.py)
| 447|    |-  * [Support Vector Machines](machine_learning/support_vector_machines.py)
| 448|    |-  * [Word Frequency Functions](machine_learning/word_frequency_functions.py)
|    | 422|+
|    | 423|+- [Astar](machine_learning/astar.py)
|    | 424|+- [Data Transformations](machine_learning/data_transformations.py)
|    | 425|+- [Decision Tree](machine_learning/decision_tree.py)
|    | 426|+- Forecasting
|    | 427|+  - [Run](machine_learning/forecasting/run.py)
|    | 428|+- [Gaussian Naive Bayes](machine_learning/gaussian_naive_bayes.py)
|    | 429|+- [Gradient Boosting Regressor](machine_learning/gradient_boosting_regressor.py)
|    | 430|+- [Gradient Descent](machine_learning/gradient_descent.py)
|    | 431|+- [K Means Clust](machine_learning/k_means_clust.py)
|    | 432|+- [K Nearest Neighbours](machine_learning/k_nearest_neighbours.py)
|    | 433|+- [Knn Sklearn](machine_learning/knn_sklearn.py)
|    | 434|+- [Linear Discriminant Analysis](machine_learning/linear_discriminant_analysis.py)
|    | 435|+- [Linear Regression](machine_learning/linear_regression.py)
|    | 436|+- Local Weighted Learning
|    | 437|+  - [Local Weighted Learning](machine_learning/local_weighted_learning/local_weighted_learning.py)
|    | 438|+- [Logistic Regression](machine_learning/logistic_regression.py)
|    | 439|+- Lstm
|    | 440|+  - [Lstm Prediction](machine_learning/lstm/lstm_prediction.py)
|    | 441|+- [Multilayer Perceptron Classifier](machine_learning/multilayer_perceptron_classifier.py)
|    | 442|+- [Polymonial Regression](machine_learning/polymonial_regression.py)
|    | 443|+- [Random Forest Classifier](machine_learning/random_forest_classifier.py)
|    | 444|+- [Random Forest Regressor](machine_learning/random_forest_regressor.py)
|    | 445|+- [Scoring Functions](machine_learning/scoring_functions.py)
|    | 446|+- [Sequential Minimum Optimization](machine_learning/sequential_minimum_optimization.py)
|    | 447|+- [Similarity Search](machine_learning/similarity_search.py)
|    | 448|+- [Support Vector Machines](machine_learning/support_vector_machines.py)
|    | 449|+- [Word Frequency Functions](machine_learning/word_frequency_functions.py)
| 449| 450| 
| 450| 451| ## Maths
| 451| 452|   * [3N Plus 1](maths/3n_plus_1.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 448| 448|   * [Word Frequency Functions](machine_learning/word_frequency_functions.py)
| 449| 449| 
| 450| 450| ## Maths
| 451|    |-  * [3N Plus 1](maths/3n_plus_1.py)
| 452|    |-  * [Abs](maths/abs.py)
| 453|    |-  * [Abs Max](maths/abs_max.py)
| 454|    |-  * [Abs Min](maths/abs_min.py)
| 455|    |-  * [Add](maths/add.py)
| 456|    |-  * [Aliquot Sum](maths/aliquot_sum.py)
| 457|    |-  * [Allocation Number](maths/allocation_number.py)
| 458|    |-  * [Area](maths/area.py)
| 459|    |-  * [Area Under Curve](maths/area_under_curve.py)
| 460|    |-  * [Armstrong Numbers](maths/armstrong_numbers.py)
| 461|    |-  * [Average Absolute Deviation](maths/average_absolute_deviation.py)
| 462|    |-  * [Average Mean](maths/average_mean.py)
| 463|    |-  * [Average Median](maths/average_median.py)
| 464|    |-  * [Average Mode](maths/average_mode.py)
| 465|    |-  * [Bailey Borwein Plouffe](maths/bailey_borwein_plouffe.py)
| 466|    |-  * [Basic Maths](maths/basic_maths.py)
| 467|    |-  * [Binary Exp Mod](maths/binary_exp_mod.py)
| 468|    |-  * [Binary Exponentiation](maths/binary_exponentiation.py)
| 469|    |-  * [Binary Exponentiation 2](maths/binary_exponentiation_2.py)
| 470|    |-  * [Binary Exponentiation 3](maths/binary_exponentiation_3.py)
| 471|    |-  * [Binomial Coefficient](maths/binomial_coefficient.py)
| 472|    |-  * [Binomial Distribution](maths/binomial_distribution.py)
| 473|    |-  * [Bisection](maths/bisection.py)
| 474|    |-  * [Ceil](maths/ceil.py)
| 475|    |-  * [Check Polygon](maths/check_polygon.py)
| 476|    |-  * [Chudnovsky Algorithm](maths/chudnovsky_algorithm.py)
| 477|    |-  * [Collatz Sequence](maths/collatz_sequence.py)
| 478|    |-  * [Combinations](maths/combinations.py)
| 479|    |-  * [Decimal Isolate](maths/decimal_isolate.py)
| 480|    |-  * [Double Factorial Iterative](maths/double_factorial_iterative.py)
| 481|    |-  * [Double Factorial Recursive](maths/double_factorial_recursive.py)
| 482|    |-  * [Entropy](maths/entropy.py)
| 483|    |-  * [Euclidean Distance](maths/euclidean_distance.py)
| 484|    |-  * [Euclidean Gcd](maths/euclidean_gcd.py)
| 485|    |-  * [Euler Method](maths/euler_method.py)
| 486|    |-  * [Euler Modified](maths/euler_modified.py)
| 487|    |-  * [Eulers Totient](maths/eulers_totient.py)
| 488|    |-  * [Extended Euclidean Algorithm](maths/extended_euclidean_algorithm.py)
| 489|    |-  * [Factorial Iterative](maths/factorial_iterative.py)
| 490|    |-  * [Factorial Recursive](maths/factorial_recursive.py)
| 491|    |-  * [Factors](maths/factors.py)
| 492|    |-  * [Fermat Little Theorem](maths/fermat_little_theorem.py)
| 493|    |-  * [Fibonacci](maths/fibonacci.py)
| 494|    |-  * [Find Max](maths/find_max.py)
| 495|    |-  * [Find Max Recursion](maths/find_max_recursion.py)
| 496|    |-  * [Find Min](maths/find_min.py)
| 497|    |-  * [Find Min Recursion](maths/find_min_recursion.py)
| 498|    |-  * [Floor](maths/floor.py)
| 499|    |-  * [Gamma](maths/gamma.py)
| 500|    |-  * [Gamma Recursive](maths/gamma_recursive.py)
| 501|    |-  * [Gaussian](maths/gaussian.py)
| 502|    |-  * [Greatest Common Divisor](maths/greatest_common_divisor.py)
| 503|    |-  * [Greedy Coin Change](maths/greedy_coin_change.py)
| 504|    |-  * [Hamming Numbers](maths/hamming_numbers.py)
| 505|    |-  * [Hardy Ramanujanalgo](maths/hardy_ramanujanalgo.py)
| 506|    |-  * [Integration By Simpson Approx](maths/integration_by_simpson_approx.py)
| 507|    |-  * [Is Ip V4 Address Valid](maths/is_ip_v4_address_valid.py)
| 508|    |-  * [Is Square Free](maths/is_square_free.py)
| 509|    |-  * [Jaccard Similarity](maths/jaccard_similarity.py)
| 510|    |-  * [Kadanes](maths/kadanes.py)
| 511|    |-  * [Karatsuba](maths/karatsuba.py)
| 512|    |-  * [Krishnamurthy Number](maths/krishnamurthy_number.py)
| 513|    |-  * [Kth Lexicographic Permutation](maths/kth_lexicographic_permutation.py)
| 514|    |-  * [Largest Of Very Large Numbers](maths/largest_of_very_large_numbers.py)
| 515|    |-  * [Largest Subarray Sum](maths/largest_subarray_sum.py)
| 516|    |-  * [Least Common Multiple](maths/least_common_multiple.py)
| 517|    |-  * [Line Length](maths/line_length.py)
| 518|    |-  * [Lucas Lehmer Primality Test](maths/lucas_lehmer_primality_test.py)
| 519|    |-  * [Lucas Series](maths/lucas_series.py)
| 520|    |-  * [Matrix Exponentiation](maths/matrix_exponentiation.py)
| 521|    |-  * [Max Sum Sliding Window](maths/max_sum_sliding_window.py)
| 522|    |-  * [Median Of Two Arrays](maths/median_of_two_arrays.py)
| 523|    |-  * [Miller Rabin](maths/miller_rabin.py)
| 524|    |-  * [Mobius Function](maths/mobius_function.py)
| 525|    |-  * [Modular Exponential](maths/modular_exponential.py)
| 526|    |-  * [Monte Carlo](maths/monte_carlo.py)
| 527|    |-  * [Monte Carlo Dice](maths/monte_carlo_dice.py)
| 528|    |-  * [Nevilles Method](maths/nevilles_method.py)
| 529|    |-  * [Newton Raphson](maths/newton_raphson.py)
| 530|    |-  * [Number Of Digits](maths/number_of_digits.py)
| 531|    |-  * [Numerical Integration](maths/numerical_integration.py)
| 532|    |-  * [Perfect Cube](maths/perfect_cube.py)
| 533|    |-  * [Perfect Number](maths/perfect_number.py)
| 534|    |-  * [Perfect Square](maths/perfect_square.py)
| 535|    |-  * [Persistence](maths/persistence.py)
| 536|    |-  * [Pi Monte Carlo Estimation](maths/pi_monte_carlo_estimation.py)
| 537|    |-  * [Points Are Collinear 3D](maths/points_are_collinear_3d.py)
| 538|    |-  * [Pollard Rho](maths/pollard_rho.py)
| 539|    |-  * [Polynomial Evaluation](maths/polynomial_evaluation.py)
| 540|    |-  * [Power Using Recursion](maths/power_using_recursion.py)
| 541|    |-  * [Prime Check](maths/prime_check.py)
| 542|    |-  * [Prime Factors](maths/prime_factors.py)
| 543|    |-  * [Prime Numbers](maths/prime_numbers.py)
| 544|    |-  * [Prime Sieve Eratosthenes](maths/prime_sieve_eratosthenes.py)
| 545|    |-  * [Primelib](maths/primelib.py)
| 546|    |-  * [Proth Number](maths/proth_number.py)
| 547|    |-  * [Pythagoras](maths/pythagoras.py)
| 548|    |-  * [Qr Decomposition](maths/qr_decomposition.py)
| 549|    |-  * [Quadratic Equations Complex Numbers](maths/quadratic_equations_complex_numbers.py)
| 550|    |-  * [Radians](maths/radians.py)
| 551|    |-  * [Radix2 Fft](maths/radix2_fft.py)
| 552|    |-  * [Relu](maths/relu.py)
| 553|    |-  * [Runge Kutta](maths/runge_kutta.py)
| 554|    |-  * [Segmented Sieve](maths/segmented_sieve.py)
| 555|    |-  * Series
| 556|    |-    * [Arithmetic](maths/series/arithmetic.py)
| 557|    |-    * [Geometric](maths/series/geometric.py)
| 558|    |-    * [Geometric Series](maths/series/geometric_series.py)
| 559|    |-    * [Harmonic](maths/series/harmonic.py)
| 560|    |-    * [Harmonic Series](maths/series/harmonic_series.py)
| 561|    |-    * [Hexagonal Numbers](maths/series/hexagonal_numbers.py)
| 562|    |-    * [P Series](maths/series/p_series.py)
| 563|    |-  * [Sieve Of Eratosthenes](maths/sieve_of_eratosthenes.py)
| 564|    |-  * [Sigmoid](maths/sigmoid.py)
| 565|    |-  * [Simpson Rule](maths/simpson_rule.py)
| 566|    |-  * [Sin](maths/sin.py)
| 567|    |-  * [Sock Merchant](maths/sock_merchant.py)
| 568|    |-  * [Softmax](maths/softmax.py)
| 569|    |-  * [Square Root](maths/square_root.py)
| 570|    |-  * [Sum Of Arithmetic Series](maths/sum_of_arithmetic_series.py)
| 571|    |-  * [Sum Of Digits](maths/sum_of_digits.py)
| 572|    |-  * [Sum Of Geometric Progression](maths/sum_of_geometric_progression.py)
| 573|    |-  * [Sylvester Sequence](maths/sylvester_sequence.py)
| 574|    |-  * [Test Prime Check](maths/test_prime_check.py)
| 575|    |-  * [Trapezoidal Rule](maths/trapezoidal_rule.py)
| 576|    |-  * [Triplet Sum](maths/triplet_sum.py)
| 577|    |-  * [Two Pointer](maths/two_pointer.py)
| 578|    |-  * [Two Sum](maths/two_sum.py)
| 579|    |-  * [Ugly Numbers](maths/ugly_numbers.py)
| 580|    |-  * [Volume](maths/volume.py)
| 581|    |-  * [Zellers Congruence](maths/zellers_congruence.py)
|    | 451|+
|    | 452|+- [3N Plus 1](maths/3n_plus_1.py)
|    | 453|+- [Abs](maths/abs.py)
|    | 454|+- [Abs Max](maths/abs_max.py)
|    | 455|+- [Abs Min](maths/abs_min.py)
|    | 456|+- [Add](maths/add.py)
|    | 457|+- [Aliquot Sum](maths/aliquot_sum.py)
|    | 458|+- [Allocation Number](maths/allocation_number.py)
|    | 459|+- [Area](maths/area.py)
|    | 460|+- [Area Under Curve](maths/area_under_curve.py)
|    | 461|+- [Armstrong Numbers](maths/armstrong_numbers.py)
|    | 462|+- [Average Absolute Deviation](maths/average_absolute_deviation.py)
|    | 463|+- [Average Mean](maths/average_mean.py)
|    | 464|+- [Average Median](maths/average_median.py)
|    | 465|+- [Average Mode](maths/average_mode.py)
|    | 466|+- [Bailey Borwein Plouffe](maths/bailey_borwein_plouffe.py)
|    | 467|+- [Basic Maths](maths/basic_maths.py)
|    | 468|+- [Binary Exp Mod](maths/binary_exp_mod.py)
|    | 469|+- [Binary Exponentiation](maths/binary_exponentiation.py)
|    | 470|+- [Binary Exponentiation 2](maths/binary_exponentiation_2.py)
|    | 471|+- [Binary Exponentiation 3](maths/binary_exponentiation_3.py)
|    | 472|+- [Binomial Coefficient](maths/binomial_coefficient.py)
|    | 473|+- [Binomial Distribution](maths/binomial_distribution.py)
|    | 474|+- [Bisection](maths/bisection.py)
|    | 475|+- [Ceil](maths/ceil.py)
|    | 476|+- [Check Polygon](maths/check_polygon.py)
|    | 477|+- [Chudnovsky Algorithm](maths/chudnovsky_algorithm.py)
|    | 478|+- [Collatz Sequence](maths/collatz_sequence.py)
|    | 479|+- [Combinations](maths/combinations.py)
|    | 480|+- [Decimal Isolate](maths/decimal_isolate.py)
|    | 481|+- [Double Factorial Iterative](maths/double_factorial_iterative.py)
|    | 482|+- [Double Factorial Recursive](maths/double_factorial_recursive.py)
|    | 483|+- [Entropy](maths/entropy.py)
|    | 484|+- [Euclidean Distance](maths/euclidean_distance.py)
|    | 485|+- [Euclidean Gcd](maths/euclidean_gcd.py)
|    | 486|+- [Euler Method](maths/euler_method.py)
|    | 487|+- [Euler Modified](maths/euler_modified.py)
|    | 488|+- [Eulers Totient](maths/eulers_totient.py)
|    | 489|+- [Extended Euclidean Algorithm](maths/extended_euclidean_algorithm.py)
|    | 490|+- [Factorial Iterative](maths/factorial_iterative.py)
|    | 491|+- [Factorial Recursive](maths/factorial_recursive.py)
|    | 492|+- [Factors](maths/factors.py)
|    | 493|+- [Fermat Little Theorem](maths/fermat_little_theorem.py)
|    | 494|+- [Fibonacci](maths/fibonacci.py)
|    | 495|+- [Find Max](maths/find_max.py)
|    | 496|+- [Find Max Recursion](maths/find_max_recursion.py)
|    | 497|+- [Find Min](maths/find_min.py)
|    | 498|+- [Find Min Recursion](maths/find_min_recursion.py)
|    | 499|+- [Floor](maths/floor.py)
|    | 500|+- [Gamma](maths/gamma.py)
|    | 501|+- [Gamma Recursive](maths/gamma_recursive.py)
|    | 502|+- [Gaussian](maths/gaussian.py)
|    | 503|+- [Greatest Common Divisor](maths/greatest_common_divisor.py)
|    | 504|+- [Greedy Coin Change](maths/greedy_coin_change.py)
|    | 505|+- [Hamming Numbers](maths/hamming_numbers.py)
|    | 506|+- [Hardy Ramanujanalgo](maths/hardy_ramanujanalgo.py)
|    | 507|+- [Integration By Simpson Approx](maths/integration_by_simpson_approx.py)
|    | 508|+- [Is Ip V4 Address Valid](maths/is_ip_v4_address_valid.py)
|    | 509|+- [Is Square Free](maths/is_square_free.py)
|    | 510|+- [Jaccard Similarity](maths/jaccard_similarity.py)
|    | 511|+- [Kadanes](maths/kadanes.py)
|    | 512|+- [Karatsuba](maths/karatsuba.py)
|    | 513|+- [Krishnamurthy Number](maths/krishnamurthy_number.py)
|    | 514|+- [Kth Lexicographic Permutation](maths/kth_lexicographic_permutation.py)
|    | 515|+- [Largest Of Very Large Numbers](maths/largest_of_very_large_numbers.py)
|    | 516|+- [Largest Subarray Sum](maths/largest_subarray_sum.py)
|    | 517|+- [Least Common Multiple](maths/least_common_multiple.py)
|    | 518|+- [Line Length](maths/line_length.py)
|    | 519|+- [Lucas Lehmer Primality Test](maths/lucas_lehmer_primality_test.py)
|    | 520|+- [Lucas Series](maths/lucas_series.py)
|    | 521|+- [Matrix Exponentiation](maths/matrix_exponentiation.py)
|    | 522|+- [Max Sum Sliding Window](maths/max_sum_sliding_window.py)
|    | 523|+- [Median Of Two Arrays](maths/median_of_two_arrays.py)
|    | 524|+- [Miller Rabin](maths/miller_rabin.py)
|    | 525|+- [Mobius Function](maths/mobius_function.py)
|    | 526|+- [Modular Exponential](maths/modular_exponential.py)
|    | 527|+- [Monte Carlo](maths/monte_carlo.py)
|    | 528|+- [Monte Carlo Dice](maths/monte_carlo_dice.py)
|    | 529|+- [Nevilles Method](maths/nevilles_method.py)
|    | 530|+- [Newton Raphson](maths/newton_raphson.py)
|    | 531|+- [Number Of Digits](maths/number_of_digits.py)
|    | 532|+- [Numerical Integration](maths/numerical_integration.py)
|    | 533|+- [Perfect Cube](maths/perfect_cube.py)
|    | 534|+- [Perfect Number](maths/perfect_number.py)
|    | 535|+- [Perfect Square](maths/perfect_square.py)
|    | 536|+- [Persistence](maths/persistence.py)
|    | 537|+- [Pi Monte Carlo Estimation](maths/pi_monte_carlo_estimation.py)
|    | 538|+- [Points Are Collinear 3D](maths/points_are_collinear_3d.py)
|    | 539|+- [Pollard Rho](maths/pollard_rho.py)
|    | 540|+- [Polynomial Evaluation](maths/polynomial_evaluation.py)
|    | 541|+- [Power Using Recursion](maths/power_using_recursion.py)
|    | 542|+- [Prime Check](maths/prime_check.py)
|    | 543|+- [Prime Factors](maths/prime_factors.py)
|    | 544|+- [Prime Numbers](maths/prime_numbers.py)
|    | 545|+- [Prime Sieve Eratosthenes](maths/prime_sieve_eratosthenes.py)
|    | 546|+- [Primelib](maths/primelib.py)
|    | 547|+- [Proth Number](maths/proth_number.py)
|    | 548|+- [Pythagoras](maths/pythagoras.py)
|    | 549|+- [Qr Decomposition](maths/qr_decomposition.py)
|    | 550|+- [Quadratic Equations Complex Numbers](maths/quadratic_equations_complex_numbers.py)
|    | 551|+- [Radians](maths/radians.py)
|    | 552|+- [Radix2 Fft](maths/radix2_fft.py)
|    | 553|+- [Relu](maths/relu.py)
|    | 554|+- [Runge Kutta](maths/runge_kutta.py)
|    | 555|+- [Segmented Sieve](maths/segmented_sieve.py)
|    | 556|+- Series
|    | 557|+  - [Arithmetic](maths/series/arithmetic.py)
|    | 558|+  - [Geometric](maths/series/geometric.py)
|    | 559|+  - [Geometric Series](maths/series/geometric_series.py)
|    | 560|+  - [Harmonic](maths/series/harmonic.py)
|    | 561|+  - [Harmonic Series](maths/series/harmonic_series.py)
|    | 562|+  - [Hexagonal Numbers](maths/series/hexagonal_numbers.py)
|    | 563|+  - [P Series](maths/series/p_series.py)
|    | 564|+- [Sieve Of Eratosthenes](maths/sieve_of_eratosthenes.py)
|    | 565|+- [Sigmoid](maths/sigmoid.py)
|    | 566|+- [Simpson Rule](maths/simpson_rule.py)
|    | 567|+- [Sin](maths/sin.py)
|    | 568|+- [Sock Merchant](maths/sock_merchant.py)
|    | 569|+- [Softmax](maths/softmax.py)
|    | 570|+- [Square Root](maths/square_root.py)
|    | 571|+- [Sum Of Arithmetic Series](maths/sum_of_arithmetic_series.py)
|    | 572|+- [Sum Of Digits](maths/sum_of_digits.py)
|    | 573|+- [Sum Of Geometric Progression](maths/sum_of_geometric_progression.py)
|    | 574|+- [Sylvester Sequence](maths/sylvester_sequence.py)
|    | 575|+- [Test Prime Check](maths/test_prime_check.py)
|    | 576|+- [Trapezoidal Rule](maths/trapezoidal_rule.py)
|    | 577|+- [Triplet Sum](maths/triplet_sum.py)
|    | 578|+- [Two Pointer](maths/two_pointer.py)
|    | 579|+- [Two Sum](maths/two_sum.py)
|    | 580|+- [Ugly Numbers](maths/ugly_numbers.py)
|    | 581|+- [Volume](maths/volume.py)
|    | 582|+- [Zellers Congruence](maths/zellers_congruence.py)
| 582| 583| 
| 583| 584| ## Matrix
| 584| 585|   * [Count Islands In Matrix](matrix/count_islands_in_matrix.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 581| 581|   * [Zellers Congruence](maths/zellers_congruence.py)
| 582| 582| 
| 583| 583| ## Matrix
| 584|    |-  * [Count Islands In Matrix](matrix/count_islands_in_matrix.py)
| 585|    |-  * [Inverse Of Matrix](matrix/inverse_of_matrix.py)
| 586|    |-  * [Matrix Class](matrix/matrix_class.py)
| 587|    |-  * [Matrix Operation](matrix/matrix_operation.py)
| 588|    |-  * [Nth Fibonacci Using Matrix Exponentiation](matrix/nth_fibonacci_using_matrix_exponentiation.py)
| 589|    |-  * [Rotate Matrix](matrix/rotate_matrix.py)
| 590|    |-  * [Searching In Sorted Matrix](matrix/searching_in_sorted_matrix.py)
| 591|    |-  * [Sherman Morrison](matrix/sherman_morrison.py)
| 592|    |-  * [Spiral Print](matrix/spiral_print.py)
| 593|    |-  * Tests
| 594|    |-    * [Test Matrix Operation](matrix/tests/test_matrix_operation.py)
|    | 584|+
|    | 585|+- [Count Islands In Matrix](matrix/count_islands_in_matrix.py)
|    | 586|+- [Inverse Of Matrix](matrix/inverse_of_matrix.py)
|    | 587|+- [Matrix Class](matrix/matrix_class.py)
|    | 588|+- [Matrix Operation](matrix/matrix_operation.py)
|    | 589|+- [Nth Fibonacci Using Matrix Exponentiation](matrix/nth_fibonacci_using_matrix_exponentiation.py)
|    | 590|+- [Rotate Matrix](matrix/rotate_matrix.py)
|    | 591|+- [Searching In Sorted Matrix](matrix/searching_in_sorted_matrix.py)
|    | 592|+- [Sherman Morrison](matrix/sherman_morrison.py)
|    | 593|+- [Spiral Print](matrix/spiral_print.py)
|    | 594|+- Tests
|    | 595|+  - [Test Matrix Operation](matrix/tests/test_matrix_operation.py)
| 595| 596| 
| 596| 597| ## Networking Flow
| 597| 598|   * [Ford Fulkerson](networking_flow/ford_fulkerson.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 594| 594|     * [Test Matrix Operation](matrix/tests/test_matrix_operation.py)
| 595| 595| 
| 596| 596| ## Networking Flow
| 597|    |-  * [Ford Fulkerson](networking_flow/ford_fulkerson.py)
| 598|    |-  * [Minimum Cut](networking_flow/minimum_cut.py)
|    | 597|+
|    | 598|+- [Ford Fulkerson](networking_flow/ford_fulkerson.py)
|    | 599|+- [Minimum Cut](networking_flow/minimum_cut.py)
| 599| 600| 
| 600| 601| ## Neural Network
| 601| 602|   * [2 Hidden Layers Neural Network](neural_network/2_hidden_layers_neural_network.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 598| 598|   * [Minimum Cut](networking_flow/minimum_cut.py)
| 599| 599| 
| 600| 600| ## Neural Network
| 601|    |-  * [2 Hidden Layers Neural Network](neural_network/2_hidden_layers_neural_network.py)
| 602|    |-  * [Back Propagation Neural Network](neural_network/back_propagation_neural_network.py)
| 603|    |-  * [Convolution Neural Network](neural_network/convolution_neural_network.py)
| 604|    |-  * [Perceptron](neural_network/perceptron.py)
|    | 601|+
|    | 602|+- [2 Hidden Layers Neural Network](neural_network/2_hidden_layers_neural_network.py)
|    | 603|+- [Back Propagation Neural Network](neural_network/back_propagation_neural_network.py)
|    | 604|+- [Convolution Neural Network](neural_network/convolution_neural_network.py)
|    | 605|+- [Perceptron](neural_network/perceptron.py)
| 605| 606| 
| 606| 607| ## Other
| 607| 608|   * [Activity Selection](other/activity_selection.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 604| 604|   * [Perceptron](neural_network/perceptron.py)
| 605| 605| 
| 606| 606| ## Other
| 607|    |-  * [Activity Selection](other/activity_selection.py)
| 608|    |-  * [Alternative List Arrange](other/alternative_list_arrange.py)
| 609|    |-  * [Check Strong Password](other/check_strong_password.py)
| 610|    |-  * [Davisb Putnamb Logemannb Loveland](other/davisb_putnamb_logemannb_loveland.py)
| 611|    |-  * [Dijkstra Bankers Algorithm](other/dijkstra_bankers_algorithm.py)
| 612|    |-  * [Doomsday](other/doomsday.py)
| 613|    |-  * [Fischer Yates Shuffle](other/fischer_yates_shuffle.py)
| 614|    |-  * [Gauss Easter](other/gauss_easter.py)
| 615|    |-  * [Graham Scan](other/graham_scan.py)
| 616|    |-  * [Greedy](other/greedy.py)
| 617|    |-  * [Least Recently Used](other/least_recently_used.py)
| 618|    |-  * [Lfu Cache](other/lfu_cache.py)
| 619|    |-  * [Linear Congruential Generator](other/linear_congruential_generator.py)
| 620|    |-  * [Lru Cache](other/lru_cache.py)
| 621|    |-  * [Magicdiamondpattern](other/magicdiamondpattern.py)
| 622|    |-  * [Nested Brackets](other/nested_brackets.py)
| 623|    |-  * [Password Generator](other/password_generator.py)
| 624|    |-  * [Scoring Algorithm](other/scoring_algorithm.py)
| 625|    |-  * [Sdes](other/sdes.py)
| 626|    |-  * [Tower Of Hanoi](other/tower_of_hanoi.py)
|    | 607|+
|    | 608|+- [Activity Selection](other/activity_selection.py)
|    | 609|+- [Alternative List Arrange](other/alternative_list_arrange.py)
|    | 610|+- [Check Strong Password](other/check_strong_password.py)
|    | 611|+- [Davisb Putnamb Logemannb Loveland](other/davisb_putnamb_logemannb_loveland.py)
|    | 612|+- [Dijkstra Bankers Algorithm](other/dijkstra_bankers_algorithm.py)
|    | 613|+- [Doomsday](other/doomsday.py)
|    | 614|+- [Fischer Yates Shuffle](other/fischer_yates_shuffle.py)
|    | 615|+- [Gauss Easter](other/gauss_easter.py)
|    | 616|+- [Graham Scan](other/graham_scan.py)
|    | 617|+- [Greedy](other/greedy.py)
|    | 618|+- [Least Recently Used](other/least_recently_used.py)
|    | 619|+- [Lfu Cache](other/lfu_cache.py)
|    | 620|+- [Linear Congruential Generator](other/linear_congruential_generator.py)
|    | 621|+- [Lru Cache](other/lru_cache.py)
|    | 622|+- [Magicdiamondpattern](other/magicdiamondpattern.py)
|    | 623|+- [Nested Brackets](other/nested_brackets.py)
|    | 624|+- [Password Generator](other/password_generator.py)
|    | 625|+- [Scoring Algorithm](other/scoring_algorithm.py)
|    | 626|+- [Sdes](other/sdes.py)
|    | 627|+- [Tower Of Hanoi](other/tower_of_hanoi.py)
| 627| 628| 
| 628| 629| ## Physics
| 629| 630|   * [Horizontal Projectile Motion](physics/horizontal_projectile_motion.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 626| 626|   * [Tower Of Hanoi](other/tower_of_hanoi.py)
| 627| 627| 
| 628| 628| ## Physics
| 629|    |-  * [Horizontal Projectile Motion](physics/horizontal_projectile_motion.py)
| 630|    |-  * [Lorenz Transformation Four Vector](physics/lorenz_transformation_four_vector.py)
| 631|    |-  * [N Body Simulation](physics/n_body_simulation.py)
| 632|    |-  * [Newtons Second Law Of Motion](physics/newtons_second_law_of_motion.py)
|    | 629|+
|    | 630|+- [Horizontal Projectile Motion](physics/horizontal_projectile_motion.py)
|    | 631|+- [Lorenz Transformation Four Vector](physics/lorenz_transformation_four_vector.py)
|    | 632|+- [N Body Simulation](physics/n_body_simulation.py)
|    | 633|+- [Newtons Second Law Of Motion](physics/newtons_second_law_of_motion.py)
| 633| 634| 
| 634| 635| ## Project Euler
| 635| 636|   * Problem 001
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 632| 632|   * [Newtons Second Law Of Motion](physics/newtons_second_law_of_motion.py)
| 633| 633| 
| 634| 634| ## Project Euler
| 635|    |-  * Problem 001
| 636|    |-    * [Sol1](project_euler/problem_001/sol1.py)
| 637|    |-    * [Sol2](project_euler/problem_001/sol2.py)
| 638|    |-    * [Sol3](project_euler/problem_001/sol3.py)
| 639|    |-    * [Sol4](project_euler/problem_001/sol4.py)
| 640|    |-    * [Sol5](project_euler/problem_001/sol5.py)
| 641|    |-    * [Sol6](project_euler/problem_001/sol6.py)
| 642|    |-    * [Sol7](project_euler/problem_001/sol7.py)
| 643|    |-  * Problem 002
| 644|    |-    * [Sol1](project_euler/problem_002/sol1.py)
| 645|    |-    * [Sol2](project_euler/problem_002/sol2.py)
| 646|    |-    * [Sol3](project_euler/problem_002/sol3.py)
| 647|    |-    * [Sol4](project_euler/problem_002/sol4.py)
| 648|    |-    * [Sol5](project_euler/problem_002/sol5.py)
| 649|    |-  * Problem 003
| 650|    |-    * [Sol1](project_euler/problem_003/sol1.py)
| 651|    |-    * [Sol2](project_euler/problem_003/sol2.py)
| 652|    |-    * [Sol3](project_euler/problem_003/sol3.py)
| 653|    |-  * Problem 004
| 654|    |-    * [Sol1](project_euler/problem_004/sol1.py)
| 655|    |-    * [Sol2](project_euler/problem_004/sol2.py)
| 656|    |-  * Problem 005
| 657|    |-    * [Sol1](project_euler/problem_005/sol1.py)
| 658|    |-    * [Sol2](project_euler/problem_005/sol2.py)
| 659|    |-  * Problem 006
| 660|    |-    * [Sol1](project_euler/problem_006/sol1.py)
| 661|    |-    * [Sol2](project_euler/problem_006/sol2.py)
| 662|    |-    * [Sol3](project_euler/problem_006/sol3.py)
| 663|    |-    * [Sol4](project_euler/problem_006/sol4.py)
| 664|    |-  * Problem 007
| 665|    |-    * [Sol1](project_euler/problem_007/sol1.py)
| 666|    |-    * [Sol2](project_euler/problem_007/sol2.py)
| 667|    |-    * [Sol3](project_euler/problem_007/sol3.py)
| 668|    |-  * Problem 008
| 669|    |-    * [Sol1](project_euler/problem_008/sol1.py)
| 670|    |-    * [Sol2](project_euler/problem_008/sol2.py)
| 671|    |-    * [Sol3](project_euler/problem_008/sol3.py)
| 672|    |-  * Problem 009
| 673|    |-    * [Sol1](project_euler/problem_009/sol1.py)
| 674|    |-    * [Sol2](project_euler/problem_009/sol2.py)
| 675|    |-    * [Sol3](project_euler/problem_009/sol3.py)
| 676|    |-  * Problem 010
| 677|    |-    * [Sol1](project_euler/problem_010/sol1.py)
| 678|    |-    * [Sol2](project_euler/problem_010/sol2.py)
| 679|    |-    * [Sol3](project_euler/problem_010/sol3.py)
| 680|    |-  * Problem 011
| 681|    |-    * [Sol1](project_euler/problem_011/sol1.py)
| 682|    |-    * [Sol2](project_euler/problem_011/sol2.py)
| 683|    |-  * Problem 012
| 684|    |-    * [Sol1](project_euler/problem_012/sol1.py)
| 685|    |-    * [Sol2](project_euler/problem_012/sol2.py)
| 686|    |-  * Problem 013
| 687|    |-    * [Sol1](project_euler/problem_013/sol1.py)
| 688|    |-  * Problem 014
| 689|    |-    * [Sol1](project_euler/problem_014/sol1.py)
| 690|    |-    * [Sol2](project_euler/problem_014/sol2.py)
| 691|    |-  * Problem 015
| 692|    |-    * [Sol1](project_euler/problem_015/sol1.py)
| 693|    |-  * Problem 016
| 694|    |-    * [Sol1](project_euler/problem_016/sol1.py)
| 695|    |-    * [Sol2](project_euler/problem_016/sol2.py)
| 696|    |-  * Problem 017
| 697|    |-    * [Sol1](project_euler/problem_017/sol1.py)
| 698|    |-  * Problem 018
| 699|    |-    * [Solution](project_euler/problem_018/solution.py)
| 700|    |-  * Problem 019
| 701|    |-    * [Sol1](project_euler/problem_019/sol1.py)
| 702|    |-  * Problem 020
| 703|    |-    * [Sol1](project_euler/problem_020/sol1.py)
| 704|    |-    * [Sol2](project_euler/problem_020/sol2.py)
| 705|    |-    * [Sol3](project_euler/problem_020/sol3.py)
| 706|    |-    * [Sol4](project_euler/problem_020/sol4.py)
| 707|    |-  * Problem 021
| 708|    |-    * [Sol1](project_euler/problem_021/sol1.py)
| 709|    |-  * Problem 022
| 710|    |-    * [Sol1](project_euler/problem_022/sol1.py)
| 711|    |-    * [Sol2](project_euler/problem_022/sol2.py)
| 712|    |-  * Problem 023
| 713|    |-    * [Sol1](project_euler/problem_023/sol1.py)
| 714|    |-  * Problem 024
| 715|    |-    * [Sol1](project_euler/problem_024/sol1.py)
| 716|    |-  * Problem 025
| 717|    |-    * [Sol1](project_euler/problem_025/sol1.py)
| 718|    |-    * [Sol2](project_euler/problem_025/sol2.py)
| 719|    |-    * [Sol3](project_euler/problem_025/sol3.py)
| 720|    |-  * Problem 026
| 721|    |-    * [Sol1](project_euler/problem_026/sol1.py)
| 722|    |-  * Problem 027
| 723|    |-    * [Sol1](project_euler/problem_027/sol1.py)
| 724|    |-  * Problem 028
| 725|    |-    * [Sol1](project_euler/problem_028/sol1.py)
| 726|    |-  * Problem 029
| 727|    |-    * [Sol1](project_euler/problem_029/sol1.py)
| 728|    |-  * Problem 030
| 729|    |-    * [Sol1](project_euler/problem_030/sol1.py)
| 730|    |-  * Problem 031
| 731|    |-    * [Sol1](project_euler/problem_031/sol1.py)
| 732|    |-    * [Sol2](project_euler/problem_031/sol2.py)
| 733|    |-  * Problem 032
| 734|    |-    * [Sol32](project_euler/problem_032/sol32.py)
| 735|    |-  * Problem 033
| 736|    |-    * [Sol1](project_euler/problem_033/sol1.py)
| 737|    |-  * Problem 034
| 738|    |-    * [Sol1](project_euler/problem_034/sol1.py)
| 739|    |-  * Problem 035
| 740|    |-    * [Sol1](project_euler/problem_035/sol1.py)
| 741|    |-  * Problem 036
| 742|    |-    * [Sol1](project_euler/problem_036/sol1.py)
| 743|    |-  * Problem 037
| 744|    |-    * [Sol1](project_euler/problem_037/sol1.py)
| 745|    |-  * Problem 038
| 746|    |-    * [Sol1](project_euler/problem_038/sol1.py)
| 747|    |-  * Problem 039
| 748|    |-    * [Sol1](project_euler/problem_039/sol1.py)
| 749|    |-  * Problem 040
| 750|    |-    * [Sol1](project_euler/problem_040/sol1.py)
| 751|    |-  * Problem 041
| 752|    |-    * [Sol1](project_euler/problem_041/sol1.py)
| 753|    |-  * Problem 042
| 754|    |-    * [Solution42](project_euler/problem_042/solution42.py)
| 755|    |-  * Problem 043
| 756|    |-    * [Sol1](project_euler/problem_043/sol1.py)
| 757|    |-  * Problem 044
| 758|    |-    * [Sol1](project_euler/problem_044/sol1.py)
| 759|    |-  * Problem 045
| 760|    |-    * [Sol1](project_euler/problem_045/sol1.py)
| 761|    |-  * Problem 046
| 762|    |-    * [Sol1](project_euler/problem_046/sol1.py)
| 763|    |-  * Problem 047
| 764|    |-    * [Sol1](project_euler/problem_047/sol1.py)
| 765|    |-  * Problem 048
| 766|    |-    * [Sol1](project_euler/problem_048/sol1.py)
| 767|    |-  * Problem 049
| 768|    |-    * [Sol1](project_euler/problem_049/sol1.py)
| 769|    |-  * Problem 050
| 770|    |-    * [Sol1](project_euler/problem_050/sol1.py)
| 771|    |-  * Problem 051
| 772|    |-    * [Sol1](project_euler/problem_051/sol1.py)
| 773|    |-  * Problem 052
| 774|    |-    * [Sol1](project_euler/problem_052/sol1.py)
| 775|    |-  * Problem 053
| 776|    |-    * [Sol1](project_euler/problem_053/sol1.py)
| 777|    |-  * Problem 054
| 778|    |-    * [Sol1](project_euler/problem_054/sol1.py)
| 779|    |-    * [Test Poker Hand](project_euler/problem_054/test_poker_hand.py)
| 780|    |-  * Problem 055
| 781|    |-    * [Sol1](project_euler/problem_055/sol1.py)
| 782|    |-  * Problem 056
| 783|    |-    * [Sol1](project_euler/problem_056/sol1.py)
| 784|    |-  * Problem 057
| 785|    |-    * [Sol1](project_euler/problem_057/sol1.py)
| 786|    |-  * Problem 058
| 787|    |-    * [Sol1](project_euler/problem_058/sol1.py)
| 788|    |-  * Problem 059
| 789|    |-    * [Sol1](project_euler/problem_059/sol1.py)
| 790|    |-  * Problem 062
| 791|    |-    * [Sol1](project_euler/problem_062/sol1.py)
| 792|    |-  * Problem 063
| 793|    |-    * [Sol1](project_euler/problem_063/sol1.py)
| 794|    |-  * Problem 064
| 795|    |-    * [Sol1](project_euler/problem_064/sol1.py)
| 796|    |-  * Problem 065
| 797|    |-    * [Sol1](project_euler/problem_065/sol1.py)
| 798|    |-  * Problem 067
| 799|    |-    * [Sol1](project_euler/problem_067/sol1.py)
| 800|    |-    * [Sol2](project_euler/problem_067/sol2.py)
| 801|    |-  * Problem 068
| 802|    |-    * [Sol1](project_euler/problem_068/sol1.py)
| 803|    |-  * Problem 069
| 804|    |-    * [Sol1](project_euler/problem_069/sol1.py)
| 805|    |-  * Problem 070
| 806|    |-    * [Sol1](project_euler/problem_070/sol1.py)
| 807|    |-  * Problem 071
| 808|    |-    * [Sol1](project_euler/problem_071/sol1.py)
| 809|    |-  * Problem 072
| 810|    |-    * [Sol1](project_euler/problem_072/sol1.py)
| 811|    |-    * [Sol2](project_euler/problem_072/sol2.py)
| 812|    |-  * Problem 074
| 813|    |-    * [Sol1](project_euler/problem_074/sol1.py)
| 814|    |-    * [Sol2](project_euler/problem_074/sol2.py)
| 815|    |-  * Problem 075
| 816|    |-    * [Sol1](project_euler/problem_075/sol1.py)
| 817|    |-  * Problem 076
| 818|    |-    * [Sol1](project_euler/problem_076/sol1.py)
| 819|    |-  * Problem 077
| 820|    |-    * [Sol1](project_euler/problem_077/sol1.py)
| 821|    |-  * Problem 078
| 822|    |-    * [Sol1](project_euler/problem_078/sol1.py)
| 823|    |-  * Problem 080
| 824|    |-    * [Sol1](project_euler/problem_080/sol1.py)
| 825|    |-  * Problem 081
| 826|    |-    * [Sol1](project_euler/problem_081/sol1.py)
| 827|    |-  * Problem 085
| 828|    |-    * [Sol1](project_euler/problem_085/sol1.py)
| 829|    |-  * Problem 086
| 830|    |-    * [Sol1](project_euler/problem_086/sol1.py)
| 831|    |-  * Problem 087
| 832|    |-    * [Sol1](project_euler/problem_087/sol1.py)
| 833|    |-  * Problem 089
| 834|    |-    * [Sol1](project_euler/problem_089/sol1.py)
| 835|    |-  * Problem 091
| 836|    |-    * [Sol1](project_euler/problem_091/sol1.py)
| 837|    |-  * Problem 092
| 838|    |-    * [Sol1](project_euler/problem_092/sol1.py)
| 839|    |-  * Problem 097
| 840|    |-    * [Sol1](project_euler/problem_097/sol1.py)
| 841|    |-  * Problem 099
| 842|    |-    * [Sol1](project_euler/problem_099/sol1.py)
| 843|    |-  * Problem 101
| 844|    |-    * [Sol1](project_euler/problem_101/sol1.py)
| 845|    |-  * Problem 102
| 846|    |-    * [Sol1](project_euler/problem_102/sol1.py)
| 847|    |-  * Problem 104
| 848|    |-    * [Sol](project_euler/problem_104/sol.py)
| 849|    |-  * Problem 107
| 850|    |-    * [Sol1](project_euler/problem_107/sol1.py)
| 851|    |-  * Problem 109
| 852|    |-    * [Sol1](project_euler/problem_109/sol1.py)
| 853|    |-  * Problem 112
| 854|    |-    * [Sol1](project_euler/problem_112/sol1.py)
| 855|    |-  * Problem 113
| 856|    |-    * [Sol1](project_euler/problem_113/sol1.py)
| 857|    |-  * Problem 119
| 858|    |-    * [Sol1](project_euler/problem_119/sol1.py)
| 859|    |-  * Problem 120
| 860|    |-    * [Sol1](project_euler/problem_120/sol1.py)
| 861|    |-  * Problem 121
| 862|    |-    * [Sol1](project_euler/problem_121/sol1.py)
| 863|    |-  * Problem 123
| 864|    |-    * [Sol1](project_euler/problem_123/sol1.py)
| 865|    |-  * Problem 125
| 866|    |-    * [Sol1](project_euler/problem_125/sol1.py)
| 867|    |-  * Problem 129
| 868|    |-    * [Sol1](project_euler/problem_129/sol1.py)
| 869|    |-  * Problem 135
| 870|    |-    * [Sol1](project_euler/problem_135/sol1.py)
| 871|    |-  * Problem 144
| 872|    |-    * [Sol1](project_euler/problem_144/sol1.py)
| 873|    |-  * Problem 145
| 874|    |-    * [Sol1](project_euler/problem_145/sol1.py)
| 875|    |-  * Problem 173
| 876|    |-    * [Sol1](project_euler/problem_173/sol1.py)
| 877|    |-  * Problem 174
| 878|    |-    * [Sol1](project_euler/problem_174/sol1.py)
| 879|    |-  * Problem 180
| 880|    |-    * [Sol1](project_euler/problem_180/sol1.py)
| 881|    |-  * Problem 188
| 882|    |-    * [Sol1](project_euler/problem_188/sol1.py)
| 883|    |-  * Problem 191
| 884|    |-    * [Sol1](project_euler/problem_191/sol1.py)
| 885|    |-  * Problem 203
| 886|    |-    * [Sol1](project_euler/problem_203/sol1.py)
| 887|    |-  * Problem 205
| 888|    |-    * [Sol1](project_euler/problem_205/sol1.py)
| 889|    |-  * Problem 206
| 890|    |-    * [Sol1](project_euler/problem_206/sol1.py)
| 891|    |-  * Problem 207
| 892|    |-    * [Sol1](project_euler/problem_207/sol1.py)
| 893|    |-  * Problem 234
| 894|    |-    * [Sol1](project_euler/problem_234/sol1.py)
| 895|    |-  * Problem 301
| 896|    |-    * [Sol1](project_euler/problem_301/sol1.py)
| 897|    |-  * Problem 493
| 898|    |-    * [Sol1](project_euler/problem_493/sol1.py)
| 899|    |-  * Problem 551
| 900|    |-    * [Sol1](project_euler/problem_551/sol1.py)
| 901|    |-  * Problem 587
| 902|    |-    * [Sol1](project_euler/problem_587/sol1.py)
| 903|    |-  * Problem 686
| 904|    |-    * [Sol1](project_euler/problem_686/sol1.py)
|    | 635|+
|    | 636|+- Problem 001
|    | 637|+  - [Sol1](project_euler/problem_001/sol1.py)
|    | 638|+  - [Sol2](project_euler/problem_001/sol2.py)
|    | 639|+  - [Sol3](project_euler/problem_001/sol3.py)
|    | 640|+  - [Sol4](project_euler/problem_001/sol4.py)
|    | 641|+  - [Sol5](project_euler/problem_001/sol5.py)
|    | 642|+  - [Sol6](project_euler/problem_001/sol6.py)
|    | 643|+  - [Sol7](project_euler/problem_001/sol7.py)
|    | 644|+- Problem 002
|    | 645|+  - [Sol1](project_euler/problem_002/sol1.py)
|    | 646|+  - [Sol2](project_euler/problem_002/sol2.py)
|    | 647|+  - [Sol3](project_euler/problem_002/sol3.py)
|    | 648|+  - [Sol4](project_euler/problem_002/sol4.py)
|    | 649|+  - [Sol5](project_euler/problem_002/sol5.py)
|    | 650|+- Problem 003
|    | 651|+  - [Sol1](project_euler/problem_003/sol1.py)
|    | 652|+  - [Sol2](project_euler/problem_003/sol2.py)
|    | 653|+  - [Sol3](project_euler/problem_003/sol3.py)
|    | 654|+- Problem 004
|    | 655|+  - [Sol1](project_euler/problem_004/sol1.py)
|    | 656|+  - [Sol2](project_euler/problem_004/sol2.py)
|    | 657|+- Problem 005
|    | 658|+  - [Sol1](project_euler/problem_005/sol1.py)
|    | 659|+  - [Sol2](project_euler/problem_005/sol2.py)
|    | 660|+- Problem 006
|    | 661|+  - [Sol1](project_euler/problem_006/sol1.py)
|    | 662|+  - [Sol2](project_euler/problem_006/sol2.py)
|    | 663|+  - [Sol3](project_euler/problem_006/sol3.py)
|    | 664|+  - [Sol4](project_euler/problem_006/sol4.py)
|    | 665|+- Problem 007
|    | 666|+  - [Sol1](project_euler/problem_007/sol1.py)
|    | 667|+  - [Sol2](project_euler/problem_007/sol2.py)
|    | 668|+  - [Sol3](project_euler/problem_007/sol3.py)
|    | 669|+- Problem 008
|    | 670|+  - [Sol1](project_euler/problem_008/sol1.py)
|    | 671|+  - [Sol2](project_euler/problem_008/sol2.py)
|    | 672|+  - [Sol3](project_euler/problem_008/sol3.py)
|    | 673|+- Problem 009
|    | 674|+  - [Sol1](project_euler/problem_009/sol1.py)
|    | 675|+  - [Sol2](project_euler/problem_009/sol2.py)
|    | 676|+  - [Sol3](project_euler/problem_009/sol3.py)
|    | 677|+- Problem 010
|    | 678|+  - [Sol1](project_euler/problem_010/sol1.py)
|    | 679|+  - [Sol2](project_euler/problem_010/sol2.py)
|    | 680|+  - [Sol3](project_euler/problem_010/sol3.py)
|    | 681|+- Problem 011
|    | 682|+  - [Sol1](project_euler/problem_011/sol1.py)
|    | 683|+  - [Sol2](project_euler/problem_011/sol2.py)
|    | 684|+- Problem 012
|    | 685|+  - [Sol1](project_euler/problem_012/sol1.py)
|    | 686|+  - [Sol2](project_euler/problem_012/sol2.py)
|    | 687|+- Problem 013
|    | 688|+  - [Sol1](project_euler/problem_013/sol1.py)
|    | 689|+- Problem 014
|    | 690|+  - [Sol1](project_euler/problem_014/sol1.py)
|    | 691|+  - [Sol2](project_euler/problem_014/sol2.py)
|    | 692|+- Problem 015
|    | 693|+  - [Sol1](project_euler/problem_015/sol1.py)
|    | 694|+- Problem 016
|    | 695|+  - [Sol1](project_euler/problem_016/sol1.py)
|    | 696|+  - [Sol2](project_euler/problem_016/sol2.py)
|    | 697|+- Problem 017
|    | 698|+  - [Sol1](project_euler/problem_017/sol1.py)
|    | 699|+- Problem 018
|    | 700|+  - [Solution](project_euler/problem_018/solution.py)
|    | 701|+- Problem 019
|    | 702|+  - [Sol1](project_euler/problem_019/sol1.py)
|    | 703|+- Problem 020
|    | 704|+  - [Sol1](project_euler/problem_020/sol1.py)
|    | 705|+  - [Sol2](project_euler/problem_020/sol2.py)
|    | 706|+  - [Sol3](project_euler/problem_020/sol3.py)
|    | 707|+  - [Sol4](project_euler/problem_020/sol4.py)
|    | 708|+- Problem 021
|    | 709|+  - [Sol1](project_euler/problem_021/sol1.py)
|    | 710|+- Problem 022
|    | 711|+  - [Sol1](project_euler/problem_022/sol1.py)
|    | 712|+  - [Sol2](project_euler/problem_022/sol2.py)
|    | 713|+- Problem 023
|    | 714|+  - [Sol1](project_euler/problem_023/sol1.py)
|    | 715|+- Problem 024
|    | 716|+  - [Sol1](project_euler/problem_024/sol1.py)
|    | 717|+- Problem 025
|    | 718|+  - [Sol1](project_euler/problem_025/sol1.py)
|    | 719|+  - [Sol2](project_euler/problem_025/sol2.py)
|    | 720|+  - [Sol3](project_euler/problem_025/sol3.py)
|    | 721|+- Problem 026
|    | 722|+  - [Sol1](project_euler/problem_026/sol1.py)
|    | 723|+- Problem 027
|    | 724|+  - [Sol1](project_euler/problem_027/sol1.py)
|    | 725|+- Problem 028
|    | 726|+  - [Sol1](project_euler/problem_028/sol1.py)
|    | 727|+- Problem 029
|    | 728|+  - [Sol1](project_euler/problem_029/sol1.py)
|    | 729|+- Problem 030
|    | 730|+  - [Sol1](project_euler/problem_030/sol1.py)
|    | 731|+- Problem 031
|    | 732|+  - [Sol1](project_euler/problem_031/sol1.py)
|    | 733|+  - [Sol2](project_euler/problem_031/sol2.py)
|    | 734|+- Problem 032
|    | 735|+  - [Sol32](project_euler/problem_032/sol32.py)
|    | 736|+- Problem 033
|    | 737|+  - [Sol1](project_euler/problem_033/sol1.py)
|    | 738|+- Problem 034
|    | 739|+  - [Sol1](project_euler/problem_034/sol1.py)
|    | 740|+- Problem 035
|    | 741|+  - [Sol1](project_euler/problem_035/sol1.py)
|    | 742|+- Problem 036
|    | 743|+  - [Sol1](project_euler/problem_036/sol1.py)
|    | 744|+- Problem 037
|    | 745|+  - [Sol1](project_euler/problem_037/sol1.py)
|    | 746|+- Problem 038
|    | 747|+  - [Sol1](project_euler/problem_038/sol1.py)
|    | 748|+- Problem 039
|    | 749|+  - [Sol1](project_euler/problem_039/sol1.py)
|    | 750|+- Problem 040
|    | 751|+  - [Sol1](project_euler/problem_040/sol1.py)
|    | 752|+- Problem 041
|    | 753|+  - [Sol1](project_euler/problem_041/sol1.py)
|    | 754|+- Problem 042
|    | 755|+  - [Solution42](project_euler/problem_042/solution42.py)
|    | 756|+- Problem 043
|    | 757|+  - [Sol1](project_euler/problem_043/sol1.py)
|    | 758|+- Problem 044
|    | 759|+  - [Sol1](project_euler/problem_044/sol1.py)
|    | 760|+- Problem 045
|    | 761|+  - [Sol1](project_euler/problem_045/sol1.py)
|    | 762|+- Problem 046
|    | 763|+  - [Sol1](project_euler/problem_046/sol1.py)
|    | 764|+- Problem 047
|    | 765|+  - [Sol1](project_euler/problem_047/sol1.py)
|    | 766|+- Problem 048
|    | 767|+  - [Sol1](project_euler/problem_048/sol1.py)
|    | 768|+- Problem 049
|    | 769|+  - [Sol1](project_euler/problem_049/sol1.py)
|    | 770|+- Problem 050
|    | 771|+  - [Sol1](project_euler/problem_050/sol1.py)
|    | 772|+- Problem 051
|    | 773|+  - [Sol1](project_euler/problem_051/sol1.py)
|    | 774|+- Problem 052
|    | 775|+  - [Sol1](project_euler/problem_052/sol1.py)
|    | 776|+- Problem 053
|    | 777|+  - [Sol1](project_euler/problem_053/sol1.py)
|    | 778|+- Problem 054
|    | 779|+  - [Sol1](project_euler/problem_054/sol1.py)
|    | 780|+  - [Test Poker Hand](project_euler/problem_054/test_poker_hand.py)
|    | 781|+- Problem 055
|    | 782|+  - [Sol1](project_euler/problem_055/sol1.py)
|    | 783|+- Problem 056
|    | 784|+  - [Sol1](project_euler/problem_056/sol1.py)
|    | 785|+- Problem 057
|    | 786|+  - [Sol1](project_euler/problem_057/sol1.py)
|    | 787|+- Problem 058
|    | 788|+  - [Sol1](project_euler/problem_058/sol1.py)
|    | 789|+- Problem 059
|    | 790|+  - [Sol1](project_euler/problem_059/sol1.py)
|    | 791|+- Problem 062
|    | 792|+  - [Sol1](project_euler/problem_062/sol1.py)
|    | 793|+- Problem 063
|    | 794|+  - [Sol1](project_euler/problem_063/sol1.py)
|    | 795|+- Problem 064
|    | 796|+  - [Sol1](project_euler/problem_064/sol1.py)
|    | 797|+- Problem 065
|    | 798|+  - [Sol1](project_euler/problem_065/sol1.py)
|    | 799|+- Problem 067
|    | 800|+  - [Sol1](project_euler/problem_067/sol1.py)
|    | 801|+  - [Sol2](project_euler/problem_067/sol2.py)
|    | 802|+- Problem 068
|    | 803|+  - [Sol1](project_euler/problem_068/sol1.py)
|    | 804|+- Problem 069
|    | 805|+  - [Sol1](project_euler/problem_069/sol1.py)
|    | 806|+- Problem 070
|    | 807|+  - [Sol1](project_euler/problem_070/sol1.py)
|    | 808|+- Problem 071
|    | 809|+  - [Sol1](project_euler/problem_071/sol1.py)
|    | 810|+- Problem 072
|    | 811|+  - [Sol1](project_euler/problem_072/sol1.py)
|    | 812|+  - [Sol2](project_euler/problem_072/sol2.py)
|    | 813|+- Problem 074
|    | 814|+  - [Sol1](project_euler/problem_074/sol1.py)
|    | 815|+  - [Sol2](project_euler/problem_074/sol2.py)
|    | 816|+- Problem 075
|    | 817|+  - [Sol1](project_euler/problem_075/sol1.py)
|    | 818|+- Problem 076
|    | 819|+  - [Sol1](project_euler/problem_076/sol1.py)
|    | 820|+- Problem 077
|    | 821|+  - [Sol1](project_euler/problem_077/sol1.py)
|    | 822|+- Problem 078
|    | 823|+  - [Sol1](project_euler/problem_078/sol1.py)
|    | 824|+- Problem 080
|    | 825|+  - [Sol1](project_euler/problem_080/sol1.py)
|    | 826|+- Problem 081
|    | 827|+  - [Sol1](project_euler/problem_081/sol1.py)
|    | 828|+- Problem 085
|    | 829|+  - [Sol1](project_euler/problem_085/sol1.py)
|    | 830|+- Problem 086
|    | 831|+  - [Sol1](project_euler/problem_086/sol1.py)
|    | 832|+- Problem 087
|    | 833|+  - [Sol1](project_euler/problem_087/sol1.py)
|    | 834|+- Problem 089
|    | 835|+  - [Sol1](project_euler/problem_089/sol1.py)
|    | 836|+- Problem 091
|    | 837|+  - [Sol1](project_euler/problem_091/sol1.py)
|    | 838|+- Problem 092
|    | 839|+  - [Sol1](project_euler/problem_092/sol1.py)
|    | 840|+- Problem 097
|    | 841|+  - [Sol1](project_euler/problem_097/sol1.py)
|    | 842|+- Problem 099
|    | 843|+  - [Sol1](project_euler/problem_099/sol1.py)
|    | 844|+- Problem 101
|    | 845|+  - [Sol1](project_euler/problem_101/sol1.py)
|    | 846|+- Problem 102
|    | 847|+  - [Sol1](project_euler/problem_102/sol1.py)
|    | 848|+- Problem 104
|    | 849|+  - [Sol](project_euler/problem_104/sol.py)
|    | 850|+- Problem 107
|    | 851|+  - [Sol1](project_euler/problem_107/sol1.py)
|    | 852|+- Problem 109
|    | 853|+  - [Sol1](project_euler/problem_109/sol1.py)
|    | 854|+- Problem 112
|    | 855|+  - [Sol1](project_euler/problem_112/sol1.py)
|    | 856|+- Problem 113
|    | 857|+  - [Sol1](project_euler/problem_113/sol1.py)
|    | 858|+- Problem 119
|    | 859|+  - [Sol1](project_euler/problem_119/sol1.py)
|    | 860|+- Problem 120
|    | 861|+  - [Sol1](project_euler/problem_120/sol1.py)
|    | 862|+- Problem 121
|    | 863|+  - [Sol1](project_euler/problem_121/sol1.py)
|    | 864|+- Problem 123
|    | 865|+  - [Sol1](project_euler/problem_123/sol1.py)
|    | 866|+- Problem 125
|    | 867|+  - [Sol1](project_euler/problem_125/sol1.py)
|    | 868|+- Problem 129
|    | 869|+  - [Sol1](project_euler/problem_129/sol1.py)
|    | 870|+- Problem 135
|    | 871|+  - [Sol1](project_euler/problem_135/sol1.py)
|    | 872|+- Problem 144
|    | 873|+  - [Sol1](project_euler/problem_144/sol1.py)
|    | 874|+- Problem 145
|    | 875|+  - [Sol1](project_euler/problem_145/sol1.py)
|    | 876|+- Problem 173
|    | 877|+  - [Sol1](project_euler/problem_173/sol1.py)
|    | 878|+- Problem 174
|    | 879|+  - [Sol1](project_euler/problem_174/sol1.py)
|    | 880|+- Problem 180
|    | 881|+  - [Sol1](project_euler/problem_180/sol1.py)
|    | 882|+- Problem 188
|    | 883|+  - [Sol1](project_euler/problem_188/sol1.py)
|    | 884|+- Problem 191
|    | 885|+  - [Sol1](project_euler/problem_191/sol1.py)
|    | 886|+- Problem 203
|    | 887|+  - [Sol1](project_euler/problem_203/sol1.py)
|    | 888|+- Problem 205
|    | 889|+  - [Sol1](project_euler/problem_205/sol1.py)
|    | 890|+- Problem 206
|    | 891|+  - [Sol1](project_euler/problem_206/sol1.py)
|    | 892|+- Problem 207
|    | 893|+  - [Sol1](project_euler/problem_207/sol1.py)
|    | 894|+- Problem 234
|    | 895|+  - [Sol1](project_euler/problem_234/sol1.py)
|    | 896|+- Problem 301
|    | 897|+  - [Sol1](project_euler/problem_301/sol1.py)
|    | 898|+- Problem 493
|    | 899|+  - [Sol1](project_euler/problem_493/sol1.py)
|    | 900|+- Problem 551
|    | 901|+  - [Sol1](project_euler/problem_551/sol1.py)
|    | 902|+- Problem 587
|    | 903|+  - [Sol1](project_euler/problem_587/sol1.py)
|    | 904|+- Problem 686
|    | 905|+  - [Sol1](project_euler/problem_686/sol1.py)
| 905| 906| 
| 906| 907| ## Quantum
| 907| 908|   * [Deutsch Jozsa](quantum/deutsch_jozsa.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 904| 904|     * [Sol1](project_euler/problem_686/sol1.py)
| 905| 905| 
| 906| 906| ## Quantum
| 907|    |-  * [Deutsch Jozsa](quantum/deutsch_jozsa.py)
| 908|    |-  * [Half Adder](quantum/half_adder.py)
| 909|    |-  * [Not Gate](quantum/not_gate.py)
| 910|    |-  * [Quantum Entanglement](quantum/quantum_entanglement.py)
| 911|    |-  * [Ripple Adder Classic](quantum/ripple_adder_classic.py)
| 912|    |-  * [Single Qubit Measure](quantum/single_qubit_measure.py)
|    | 907|+
|    | 908|+- [Deutsch Jozsa](quantum/deutsch_jozsa.py)
|    | 909|+- [Half Adder](quantum/half_adder.py)
|    | 910|+- [Not Gate](quantum/not_gate.py)
|    | 911|+- [Quantum Entanglement](quantum/quantum_entanglement.py)
|    | 912|+- [Ripple Adder Classic](quantum/ripple_adder_classic.py)
|    | 913|+- [Single Qubit Measure](quantum/single_qubit_measure.py)
| 913| 914| 
| 914| 915| ## Scheduling
| 915| 916|   * [First Come First Served](scheduling/first_come_first_served.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 912| 912|   * [Single Qubit Measure](quantum/single_qubit_measure.py)
| 913| 913| 
| 914| 914| ## Scheduling
| 915|    |-  * [First Come First Served](scheduling/first_come_first_served.py)
| 916|    |-  * [Highest Response Ratio Next](scheduling/highest_response_ratio_next.py)
| 917|    |-  * [Multi Level Feedback Queue](scheduling/multi_level_feedback_queue.py)
| 918|    |-  * [Non Preemptive Shortest Job First](scheduling/non_preemptive_shortest_job_first.py)
| 919|    |-  * [Round Robin](scheduling/round_robin.py)
| 920|    |-  * [Shortest Job First](scheduling/shortest_job_first.py)
|    | 915|+
|    | 916|+- [First Come First Served](scheduling/first_come_first_served.py)
|    | 917|+- [Highest Response Ratio Next](scheduling/highest_response_ratio_next.py)
|    | 918|+- [Multi Level Feedback Queue](scheduling/multi_level_feedback_queue.py)
|    | 919|+- [Non Preemptive Shortest Job First](scheduling/non_preemptive_shortest_job_first.py)
|    | 920|+- [Round Robin](scheduling/round_robin.py)
|    | 921|+- [Shortest Job First](scheduling/shortest_job_first.py)
| 921| 922| 
| 922| 923| ## Searches
| 923| 924|   * [Binary Search](searches/binary_search.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 920| 920|   * [Shortest Job First](scheduling/shortest_job_first.py)
| 921| 921| 
| 922| 922| ## Searches
| 923|    |-  * [Binary Search](searches/binary_search.py)
| 924|    |-  * [Binary Tree Traversal](searches/binary_tree_traversal.py)
| 925|    |-  * [Double Linear Search](searches/double_linear_search.py)
| 926|    |-  * [Double Linear Search Recursion](searches/double_linear_search_recursion.py)
| 927|    |-  * [Fibonacci Search](searches/fibonacci_search.py)
| 928|    |-  * [Hill Climbing](searches/hill_climbing.py)
| 929|    |-  * [Interpolation Search](searches/interpolation_search.py)
| 930|    |-  * [Jump Search](searches/jump_search.py)
| 931|    |-  * [Linear Search](searches/linear_search.py)
| 932|    |-  * [Quick Select](searches/quick_select.py)
| 933|    |-  * [Sentinel Linear Search](searches/sentinel_linear_search.py)
| 934|    |-  * [Simple Binary Search](searches/simple_binary_search.py)
| 935|    |-  * [Simulated Annealing](searches/simulated_annealing.py)
| 936|    |-  * [Tabu Search](searches/tabu_search.py)
| 937|    |-  * [Ternary Search](searches/ternary_search.py)
|    | 923|+
|    | 924|+- [Binary Search](searches/binary_search.py)
|    | 925|+- [Binary Tree Traversal](searches/binary_tree_traversal.py)
|    | 926|+- [Double Linear Search](searches/double_linear_search.py)
|    | 927|+- [Double Linear Search Recursion](searches/double_linear_search_recursion.py)
|    | 928|+- [Fibonacci Search](searches/fibonacci_search.py)
|    | 929|+- [Hill Climbing](searches/hill_climbing.py)
|    | 930|+- [Interpolation Search](searches/interpolation_search.py)
|    | 931|+- [Jump Search](searches/jump_search.py)
|    | 932|+- [Linear Search](searches/linear_search.py)
|    | 933|+- [Quick Select](searches/quick_select.py)
|    | 934|+- [Sentinel Linear Search](searches/sentinel_linear_search.py)
|    | 935|+- [Simple Binary Search](searches/simple_binary_search.py)
|    | 936|+- [Simulated Annealing](searches/simulated_annealing.py)
|    | 937|+- [Tabu Search](searches/tabu_search.py)
|    | 938|+- [Ternary Search](searches/ternary_search.py)
| 938| 939| 
| 939| 940| ## Sorts
| 940| 941|   * [Bead Sort](sorts/bead_sort.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 937| 937|   * [Ternary Search](searches/ternary_search.py)
| 938| 938| 
| 939| 939| ## Sorts
| 940|    |-  * [Bead Sort](sorts/bead_sort.py)
| 941|    |-  * [Bitonic Sort](sorts/bitonic_sort.py)
| 942|    |-  * [Bogo Sort](sorts/bogo_sort.py)
| 943|    |-  * [Bubble Sort](sorts/bubble_sort.py)
| 944|    |-  * [Bucket Sort](sorts/bucket_sort.py)
| 945|    |-  * [Circle Sort](sorts/circle_sort.py)
| 946|    |-  * [Cocktail Shaker Sort](sorts/cocktail_shaker_sort.py)
| 947|    |-  * [Comb Sort](sorts/comb_sort.py)
| 948|    |-  * [Counting Sort](sorts/counting_sort.py)
| 949|    |-  * [Cycle Sort](sorts/cycle_sort.py)
| 950|    |-  * [Double Sort](sorts/double_sort.py)
| 951|    |-  * [Dutch National Flag Sort](sorts/dutch_national_flag_sort.py)
| 952|    |-  * [Exchange Sort](sorts/exchange_sort.py)
| 953|    |-  * [External Sort](sorts/external_sort.py)
| 954|    |-  * [Gnome Sort](sorts/gnome_sort.py)
| 955|    |-  * [Heap Sort](sorts/heap_sort.py)
| 956|    |-  * [Insertion Sort](sorts/insertion_sort.py)
| 957|    |-  * [Intro Sort](sorts/intro_sort.py)
| 958|    |-  * [Iterative Merge Sort](sorts/iterative_merge_sort.py)
| 959|    |-  * [Merge Insertion Sort](sorts/merge_insertion_sort.py)
| 960|    |-  * [Merge Sort](sorts/merge_sort.py)
| 961|    |-  * [Msd Radix Sort](sorts/msd_radix_sort.py)
| 962|    |-  * [Natural Sort](sorts/natural_sort.py)
| 963|    |-  * [Odd Even Sort](sorts/odd_even_sort.py)
| 964|    |-  * [Odd Even Transposition Parallel](sorts/odd_even_transposition_parallel.py)
| 965|    |-  * [Odd Even Transposition Single Threaded](sorts/odd_even_transposition_single_threaded.py)
| 966|    |-  * [Pancake Sort](sorts/pancake_sort.py)
| 967|    |-  * [Patience Sort](sorts/patience_sort.py)
| 968|    |-  * [Pigeon Sort](sorts/pigeon_sort.py)
| 969|    |-  * [Pigeonhole Sort](sorts/pigeonhole_sort.py)
| 970|    |-  * [Quick Sort](sorts/quick_sort.py)
| 971|    |-  * [Quick Sort 3 Partition](sorts/quick_sort_3_partition.py)
| 972|    |-  * [Radix Sort](sorts/radix_sort.py)
| 973|    |-  * [Random Normal Distribution Quicksort](sorts/random_normal_distribution_quicksort.py)
| 974|    |-  * [Random Pivot Quick Sort](sorts/random_pivot_quick_sort.py)
| 975|    |-  * [Recursive Bubble Sort](sorts/recursive_bubble_sort.py)
| 976|    |-  * [Recursive Insertion Sort](sorts/recursive_insertion_sort.py)
| 977|    |-  * [Recursive Mergesort Array](sorts/recursive_mergesort_array.py)
| 978|    |-  * [Recursive Quick Sort](sorts/recursive_quick_sort.py)
| 979|    |-  * [Selection Sort](sorts/selection_sort.py)
| 980|    |-  * [Shell Sort](sorts/shell_sort.py)
| 981|    |-  * [Slowsort](sorts/slowsort.py)
| 982|    |-  * [Stooge Sort](sorts/stooge_sort.py)
| 983|    |-  * [Strand Sort](sorts/strand_sort.py)
| 984|    |-  * [Tim Sort](sorts/tim_sort.py)
| 985|    |-  * [Topological Sort](sorts/topological_sort.py)
| 986|    |-  * [Tree Sort](sorts/tree_sort.py)
| 987|    |-  * [Unknown Sort](sorts/unknown_sort.py)
| 988|    |-  * [Wiggle Sort](sorts/wiggle_sort.py)
|    | 940|+
|    | 941|+- [Bead Sort](sorts/bead_sort.py)
|    | 942|+- [Bitonic Sort](sorts/bitonic_sort.py)
|    | 943|+- [Bogo Sort](sorts/bogo_sort.py)
|    | 944|+- [Bubble Sort](sorts/bubble_sort.py)
|    | 945|+- [Bucket Sort](sorts/bucket_sort.py)
|    | 946|+- [Circle Sort](sorts/circle_sort.py)
|    | 947|+- [Cocktail Shaker Sort](sorts/cocktail_shaker_sort.py)
|    | 948|+- [Comb Sort](sorts/comb_sort.py)
|    | 949|+- [Counting Sort](sorts/counting_sort.py)
|    | 950|+- [Cycle Sort](sorts/cycle_sort.py)
|    | 951|+- [Double Sort](sorts/double_sort.py)
|    | 952|+- [Dutch National Flag Sort](sorts/dutch_national_flag_sort.py)
|    | 953|+- [Exchange Sort](sorts/exchange_sort.py)
|    | 954|+- [External Sort](sorts/external_sort.py)
|    | 955|+- [Gnome Sort](sorts/gnome_sort.py)
|    | 956|+- [Heap Sort](sorts/heap_sort.py)
|    | 957|+- [Insertion Sort](sorts/insertion_sort.py)
|    | 958|+- [Intro Sort](sorts/intro_sort.py)
|    | 959|+- [Iterative Merge Sort](sorts/iterative_merge_sort.py)
|    | 960|+- [Merge Insertion Sort](sorts/merge_insertion_sort.py)
|    | 961|+- [Merge Sort](sorts/merge_sort.py)
|    | 962|+- [Msd Radix Sort](sorts/msd_radix_sort.py)
|    | 963|+- [Natural Sort](sorts/natural_sort.py)
|    | 964|+- [Odd Even Sort](sorts/odd_even_sort.py)
|    | 965|+- [Odd Even Transposition Parallel](sorts/odd_even_transposition_parallel.py)
|    | 966|+- [Odd Even Transposition Single Threaded](sorts/odd_even_transposition_single_threaded.py)
|    | 967|+- [Pancake Sort](sorts/pancake_sort.py)
|    | 968|+- [Patience Sort](sorts/patience_sort.py)
|    | 969|+- [Pigeon Sort](sorts/pigeon_sort.py)
|    | 970|+- [Pigeonhole Sort](sorts/pigeonhole_sort.py)
|    | 971|+- [Quick Sort](sorts/quick_sort.py)
|    | 972|+- [Quick Sort 3 Partition](sorts/quick_sort_3_partition.py)
|    | 973|+- [Radix Sort](sorts/radix_sort.py)
|    | 974|+- [Random Normal Distribution Quicksort](sorts/random_normal_distribution_quicksort.py)
|    | 975|+- [Random Pivot Quick Sort](sorts/random_pivot_quick_sort.py)
|    | 976|+- [Recursive Bubble Sort](sorts/recursive_bubble_sort.py)
|    | 977|+- [Recursive Insertion Sort](sorts/recursive_insertion_sort.py)
|    | 978|+- [Recursive Mergesort Array](sorts/recursive_mergesort_array.py)
|    | 979|+- [Recursive Quick Sort](sorts/recursive_quick_sort.py)
|    | 980|+- [Selection Sort](sorts/selection_sort.py)
|    | 981|+- [Shell Sort](sorts/shell_sort.py)
|    | 982|+- [Slowsort](sorts/slowsort.py)
|    | 983|+- [Stooge Sort](sorts/stooge_sort.py)
|    | 984|+- [Strand Sort](sorts/strand_sort.py)
|    | 985|+- [Tim Sort](sorts/tim_sort.py)
|    | 986|+- [Topological Sort](sorts/topological_sort.py)
|    | 987|+- [Tree Sort](sorts/tree_sort.py)
|    | 988|+- [Unknown Sort](sorts/unknown_sort.py)
|    | 989|+- [Wiggle Sort](sorts/wiggle_sort.py)
| 989| 990| 
| 990| 991| ## Strings
| 991| 992|   * [Aho Corasick](strings/aho_corasick.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
| 988| 988|   * [Wiggle Sort](sorts/wiggle_sort.py)
| 989| 989| 
| 990| 990| ## Strings
| 991|    |-  * [Aho Corasick](strings/aho_corasick.py)
| 992|    |-  * [Alternative String Arrange](strings/alternative_string_arrange.py)
| 993|    |-  * [Anagrams](strings/anagrams.py)
| 994|    |-  * [Autocomplete Using Trie](strings/autocomplete_using_trie.py)
| 995|    |-  * [Boyer Moore Search](strings/boyer_moore_search.py)
| 996|    |-  * [Can String Be Rearranged As Palindrome](strings/can_string_be_rearranged_as_palindrome.py)
| 997|    |-  * [Capitalize](strings/capitalize.py)
| 998|    |-  * [Check Anagrams](strings/check_anagrams.py)
| 999|    |-  * [Check Pangram](strings/check_pangram.py)
|1000|    |-  * [Credit Card Validator](strings/credit_card_validator.py)
|1001|    |-  * [Detecting English Programmatically](strings/detecting_english_programmatically.py)
|1002|    |-  * [Frequency Finder](strings/frequency_finder.py)
|1003|    |-  * [Hamming Distance](strings/hamming_distance.py)
|1004|    |-  * [Indian Phone Validator](strings/indian_phone_validator.py)
|1005|    |-  * [Is Contains Unique Chars](strings/is_contains_unique_chars.py)
|1006|    |-  * [Is Palindrome](strings/is_palindrome.py)
|1007|    |-  * [Jaro Winkler](strings/jaro_winkler.py)
|1008|    |-  * [Join](strings/join.py)
|1009|    |-  * [Knuth Morris Pratt](strings/knuth_morris_pratt.py)
|1010|    |-  * [Levenshtein Distance](strings/levenshtein_distance.py)
|1011|    |-  * [Lower](strings/lower.py)
|1012|    |-  * [Manacher](strings/manacher.py)
|1013|    |-  * [Min Cost String Conversion](strings/min_cost_string_conversion.py)
|1014|    |-  * [Naive String Search](strings/naive_string_search.py)
|1015|    |-  * [Ngram](strings/ngram.py)
|1016|    |-  * [Palindrome](strings/palindrome.py)
|1017|    |-  * [Prefix Function](strings/prefix_function.py)
|1018|    |-  * [Rabin Karp](strings/rabin_karp.py)
|1019|    |-  * [Remove Duplicate](strings/remove_duplicate.py)
|1020|    |-  * [Reverse Letters](strings/reverse_letters.py)
|1021|    |-  * [Reverse Long Words](strings/reverse_long_words.py)
|1022|    |-  * [Reverse Words](strings/reverse_words.py)
|1023|    |-  * [Split](strings/split.py)
|1024|    |-  * [Upper](strings/upper.py)
|1025|    |-  * [Wave](strings/wave.py)
|1026|    |-  * [Wildcard Pattern Matching](strings/wildcard_pattern_matching.py)
|1027|    |-  * [Word Occurrence](strings/word_occurrence.py)
|1028|    |-  * [Word Patterns](strings/word_patterns.py)
|1029|    |-  * [Z Function](strings/z_function.py)
|    | 991|+
|    | 992|+- [Aho Corasick](strings/aho_corasick.py)
|    | 993|+- [Alternative String Arrange](strings/alternative_string_arrange.py)
|    | 994|+- [Anagrams](strings/anagrams.py)
|    | 995|+- [Autocomplete Using Trie](strings/autocomplete_using_trie.py)
|    | 996|+- [Boyer Moore Search](strings/boyer_moore_search.py)
|    | 997|+- [Can String Be Rearranged As Palindrome](strings/can_string_be_rearranged_as_palindrome.py)
|    | 998|+- [Capitalize](strings/capitalize.py)
|    | 999|+- [Check Anagrams](strings/check_anagrams.py)
|    |1000|+- [Check Pangram](strings/check_pangram.py)
|    |1001|+- [Credit Card Validator](strings/credit_card_validator.py)
|    |1002|+- [Detecting English Programmatically](strings/detecting_english_programmatically.py)
|    |1003|+- [Frequency Finder](strings/frequency_finder.py)
|    |1004|+- [Hamming Distance](strings/hamming_distance.py)
|    |1005|+- [Indian Phone Validator](strings/indian_phone_validator.py)
|    |1006|+- [Is Contains Unique Chars](strings/is_contains_unique_chars.py)
|    |1007|+- [Is Palindrome](strings/is_palindrome.py)
|    |1008|+- [Jaro Winkler](strings/jaro_winkler.py)
|    |1009|+- [Join](strings/join.py)
|    |1010|+- [Knuth Morris Pratt](strings/knuth_morris_pratt.py)
|    |1011|+- [Levenshtein Distance](strings/levenshtein_distance.py)
|    |1012|+- [Lower](strings/lower.py)
|    |1013|+- [Manacher](strings/manacher.py)
|    |1014|+- [Min Cost String Conversion](strings/min_cost_string_conversion.py)
|    |1015|+- [Naive String Search](strings/naive_string_search.py)
|    |1016|+- [Ngram](strings/ngram.py)
|    |1017|+- [Palindrome](strings/palindrome.py)
|    |1018|+- [Prefix Function](strings/prefix_function.py)
|    |1019|+- [Rabin Karp](strings/rabin_karp.py)
|    |1020|+- [Remove Duplicate](strings/remove_duplicate.py)
|    |1021|+- [Reverse Letters](strings/reverse_letters.py)
|    |1022|+- [Reverse Long Words](strings/reverse_long_words.py)
|    |1023|+- [Reverse Words](strings/reverse_words.py)
|    |1024|+- [Split](strings/split.py)
|    |1025|+- [Upper](strings/upper.py)
|    |1026|+- [Wave](strings/wave.py)
|    |1027|+- [Wildcard Pattern Matching](strings/wildcard_pattern_matching.py)
|    |1028|+- [Word Occurrence](strings/word_occurrence.py)
|    |1029|+- [Word Patterns](strings/word_patterns.py)
|    |1030|+- [Z Function](strings/z_function.py)
|1030|1031| 
|1031|1032| ## Web Programming
|1032|1033|   * [Co2 Emission](web_programming/co2_emission.py)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/DIRECTORY.md
|    |++++| /app/DIRECTORY.md
|1029|1029|   * [Z Function](strings/z_function.py)
|1030|1030| 
|1031|1031| ## Web Programming
|1032|    |-  * [Co2 Emission](web_programming/co2_emission.py)
|1033|    |-  * [Covid Stats Via Xpath](web_programming/covid_stats_via_xpath.py)
|1034|    |-  * [Crawl Google Results](web_programming/crawl_google_results.py)
|1035|    |-  * [Crawl Google Scholar Citation](web_programming/crawl_google_scholar_citation.py)
|1036|    |-  * [Currency Converter](web_programming/currency_converter.py)
|1037|    |-  * [Current Stock Price](web_programming/current_stock_price.py)
|1038|    |-  * [Current Weather](web_programming/current_weather.py)
|1039|    |-  * [Daily Horoscope](web_programming/daily_horoscope.py)
|1040|    |-  * [Download Images From Google Query](web_programming/download_images_from_google_query.py)
|1041|    |-  * [Emails From Url](web_programming/emails_from_url.py)
|1042|    |-  * [Fetch Anime And Play](web_programming/fetch_anime_and_play.py)
|1043|    |-  * [Fetch Bbc News](web_programming/fetch_bbc_news.py)
|1044|    |-  * [Fetch Github Info](web_programming/fetch_github_info.py)
|1045|    |-  * [Fetch Jobs](web_programming/fetch_jobs.py)
|1046|    |-  * [Fetch Well Rx Price](web_programming/fetch_well_rx_price.py)
|1047|    |-  * [Get Imdb Top 250 Movies Csv](web_programming/get_imdb_top_250_movies_csv.py)
|1048|    |-  * [Get Imdbtop](web_programming/get_imdbtop.py)
|1049|    |-  * [Get Top Hn Posts](web_programming/get_top_hn_posts.py)
|1050|    |-  * [Get User Tweets](web_programming/get_user_tweets.py)
|1051|    |-  * [Giphy](web_programming/giphy.py)
|1052|    |-  * [Instagram Crawler](web_programming/instagram_crawler.py)
|1053|    |-  * [Instagram Pic](web_programming/instagram_pic.py)
|1054|    |-  * [Instagram Video](web_programming/instagram_video.py)
|1055|    |-  * [Nasa Data](web_programming/nasa_data.py)
|1056|    |-  * [Random Anime Character](web_programming/random_anime_character.py)
|1057|    |-  * [Recaptcha Verification](web_programming/recaptcha_verification.py)
|1058|    |-  * [Reddit](web_programming/reddit.py)
|1059|    |-  * [Search Books By Isbn](web_programming/search_books_by_isbn.py)
|1060|    |-  * [Slack Message](web_programming/slack_message.py)
|1061|    |-  * [Test Fetch Github Info](web_programming/test_fetch_github_info.py)
|1062|    |-  * [World Covid19 Stats](web_programming/world_covid19_stats.py)
|    |1032|+
|    |1033|+- [Co2 Emission](web_programming/co2_emission.py)
|    |1034|+- [Covid Stats Via Xpath](web_programming/covid_stats_via_xpath.py)
|    |1035|+- [Crawl Google Results](web_programming/crawl_google_results.py)
|    |1036|+- [Crawl Google Scholar Citation](web_programming/crawl_google_scholar_citation.py)
|    |1037|+- [Currency Converter](web_programming/currency_converter.py)
|    |1038|+- [Current Stock Price](web_programming/current_stock_price.py)
|    |1039|+- [Current Weather](web_programming/current_weather.py)
|    |1040|+- [Daily Horoscope](web_programming/daily_horoscope.py)
|    |1041|+- [Download Images From Google Query](web_programming/download_images_from_google_query.py)
|    |1042|+- [Emails From Url](web_programming/emails_from_url.py)
|    |1043|+- [Fetch Anime And Play](web_programming/fetch_anime_and_play.py)
|    |1044|+- [Fetch Bbc News](web_programming/fetch_bbc_news.py)
|    |1045|+- [Fetch Github Info](web_programming/fetch_github_info.py)
|    |1046|+- [Fetch Jobs](web_programming/fetch_jobs.py)
|    |1047|+- [Fetch Well Rx Price](web_programming/fetch_well_rx_price.py)
|    |1048|+- [Get Imdb Top 250 Movies Csv](web_programming/get_imdb_top_250_movies_csv.py)
|    |1049|+- [Get Imdbtop](web_programming/get_imdbtop.py)
|    |1050|+- [Get Top Hn Posts](web_programming/get_top_hn_posts.py)
|    |1051|+- [Get User Tweets](web_programming/get_user_tweets.py)
|    |1052|+- [Giphy](web_programming/giphy.py)
|    |1053|+- [Instagram Crawler](web_programming/instagram_crawler.py)
|    |1054|+- [Instagram Pic](web_programming/instagram_pic.py)
|    |1055|+- [Instagram Video](web_programming/instagram_video.py)
|    |1056|+- [Nasa Data](web_programming/nasa_data.py)
|    |1057|+- [Random Anime Character](web_programming/random_anime_character.py)
|    |1058|+- [Recaptcha Verification](web_programming/recaptcha_verification.py)
|    |1059|+- [Reddit](web_programming/reddit.py)
|    |1060|+- [Search Books By Isbn](web_programming/search_books_by_isbn.py)
|    |1061|+- [Slack Message](web_programming/slack_message.py)
|    |1062|+- [Test Fetch Github Info](web_programming/test_fetch_github_info.py)
|    |1063|+- [World Covid19 Stats](web_programming/world_covid19_stats.py)

DIRECTORY.md
|   9| ••*•[Newton•Forward•Interpolation](arithmetic_analysis/newton_forward_interpolation.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (87 > 79)

DIRECTORY.md
|  36| ••*•[Binary•Count•Trailing•Zeros](bit_manipulation/binary_count_trailing_zeros.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (82 > 79)

DIRECTORY.md
|  41| ••*•[Count•1S•Brian•Kernighan•Method](bit_manipulation/count_1s_brian_kernighan_method.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (90 > 79)

DIRECTORY.md
|  45| ••*•[Single•Bit•Manipulation•Operations](bit_manipulation/single_bit_manipulation_operations.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (96 > 79)

DIRECTORY.md
|  75| ••*•[Decrypt•Caesar•With•Chi•Squared](ciphers/decrypt_caesar_with_chi_squared.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (81 > 79)

DIRECTORY.md
| 100| ••*•[Transposition•Cipher•Encrypt•Decrypt•File](ciphers/transposition_cipher_encrypt_decrypt_file.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (101 > 79)

DIRECTORY.md
| 149| ••••*•[Binary•Search•Tree•Recursive](data_structures/binary_tree/binary_search_tree_recursive.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (97 > 79)

DIRECTORY.md
| 151| ••••*•[Binary•Tree•Traversals](data_structures/binary_tree/binary_tree_traversals.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (85 > 79)

DIRECTORY.md
| 154| ••••*•[Lowest•Common•Ancestor](data_structures/binary_tree/lowest_common_ancestor.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (85 > 79)

DIRECTORY.md
| 155| ••••*•[Merge•Two•Binary•Trees](data_structures/binary_tree/merge_two_binary_trees.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (85 > 79)

DIRECTORY.md
| 156| ••••*•[Non•Recursive•Segment•Tree](data_structures/binary_tree/non_recursive_segment_tree.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (93 > 79)

DIRECTORY.md
| 157| ••••*•[Number•Of•Possible•Binary•Trees](data_structures/binary_tree/number_of_possible_binary_trees.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (103 > 79)

DIRECTORY.md
| 164| ••••*•[Alternate•Disjoint•Set](data_structures/disjoint_set/alternate_disjoint_set.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (86 > 79)

DIRECTORY.md
| 169| ••••*•[Hash•Table•With•Linked•List](data_structures/hashing/hash_table_with_linked_list.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (91 > 79)

DIRECTORY.md
| 182| ••••*•[Circular•Linked•List](data_structures/linked_list/circular_linked_list.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (81 > 79)

DIRECTORY.md
| 185| ••••*•[Doubly•Linked•List•Two](data_structures/linked_list/doubly_linked_list_two.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (85 > 79)

DIRECTORY.md
| 190| ••••*•[Middle•Element•Of•Linked•List](data_structures/linked_list/middle_element_of_linked_list.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (99 > 79)

DIRECTORY.md
| 197| ••••*•[Circular•Queue•Linked•List](data_structures/queue/circular_queue_linked_list.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (87 > 79)

DIRECTORY.md
| 200| ••••*•[Priority•Queue•Using•List](data_structures/queue/priority_queue_using_list.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (85 > 79)

DIRECTORY.md
| 205| ••••*•[Dijkstras•Two•Stack•Algorithm](data_structures/stacks/dijkstras_two_stack_algorithm.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (94 > 79)

DIRECTORY.md
| 206| ••••*•[Evaluate•Postfix•Notations](data_structures/stacks/evaluate_postfix_notations.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (88 > 79)

DIRECTORY.md
| 207| ••••*•[Infix•To•Postfix•Conversion](data_structures/stacks/infix_to_postfix_conversion.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (90 > 79)

DIRECTORY.md
| 208| ••••*•[Infix•To•Prefix•Conversion](data_structures/stacks/infix_to_prefix_conversion.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (88 > 79)

DIRECTORY.md
| 213| ••••*•[Stack•With•Doubly•Linked•List](data_structures/stacks/stack_with_doubly_linked_list.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (94 > 79)

DIRECTORY.md
| 214| ••••*•[Stack•With•Singly•Linked•List](data_structures/stacks/stack_with_singly_linked_list.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (94 > 79)

DIRECTORY.md
| 235| ••••*•[Histogram•Stretch](digital_image_processing/histogram_equalization/histogram_stretch.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (95 > 79)

DIRECTORY.md
| 238| ••••*•[Dilation•Operation](digital_image_processing/morphological_operations/dilation_operation.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (99 > 79)

DIRECTORY.md
| 239| ••••*•[Erosion•Operation](digital_image_processing/morphological_operations/erosion_operation.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (97 > 79)

DIRECTORY.md
| 245| ••*•[Test•Digital•Image•Processing](digital_image_processing/test_digital_image_processing.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (94 > 79)

DIRECTORY.md
| 251| ••*•[Heaps•Algorithm•Iterative](divide_and_conquer/heaps_algorithm_iterative.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (80 > 79)

DIRECTORY.md
| 259| ••*•[Strassen•Matrix•Multiplication](divide_and_conquer/strassen_matrix_multiplication.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (90 > 79)

DIRECTORY.md
| 275| ••*•[Iterating•Through•Submasks](dynamic_programming/iterating_through_submasks.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (83 > 79)

DIRECTORY.md
| 277| ••*•[Longest•Common•Subsequence](dynamic_programming/longest_common_subsequence.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (83 > 79)

DIRECTORY.md
| 278| ••*•[Longest•Increasing•Subsequence](dynamic_programming/longest_increasing_subsequence.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (91 > 79)

DIRECTORY.md
| 279| ••*•[Longest•Increasing•Subsequence•O(Nlogn)](dynamic_programming/longest_increasing_subsequence_o(nlogn).py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (109 > 79)

DIRECTORY.md
| 284| ••*•[Max•Sum•Contiguous•Subsequence](dynamic_programming/max_sum_contiguous_subsequence.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (91 > 79)

DIRECTORY.md
| 289| ••*•[Optimal•Binary•Search•Tree](dynamic_programming/optimal_binary_search_tree.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (83 > 79)

DIRECTORY.md
| 338| ••*•[Bidirectional•Breadth•First•Search](graphs/bidirectional_breadth_first_search.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (86 > 79)

DIRECTORY.md
| 342| ••*•[Breadth•First•Search•Shortest•Path](graphs/breadth_first_search_shortest_path.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (86 > 79)

DIRECTORY.md
| 353| ••*•[Directed•And•Undirected•(Weighted)•Graph](graphs/directed_and_undirected_(weighted)_graph.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (98 > 79)

DIRECTORY.md
| 354| ••*•[Edmonds•Karp•Multiple•Source•And•Sink](graphs/edmonds_karp_multiple_source_and_sink.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (92 > 79)

DIRECTORY.md
| 355| ••*•[Eulerian•Path•And•Circuit•For•Undirected•Graph](graphs/eulerian_path_and_circuit_for_undirected_graph.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (110 > 79)

DIRECTORY.md
| 385| ••••*•[Test•Min•Spanning•Tree•Kruskal](graphs/tests/test_min_spanning_tree_kruskal.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (86 > 79)

DIRECTORY.md
| 386| ••••*•[Test•Min•Spanning•Tree•Prim](graphs/tests/test_min_spanning_tree_prim.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (80 > 79)

DIRECTORY.md
| 428| ••*•[Gradient•Boosting•Regressor](machine_learning/gradient_boosting_regressor.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (82 > 79)

DIRECTORY.md
| 433| ••*•[Linear•Discriminant•Analysis](machine_learning/linear_discriminant_analysis.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (84 > 79)

DIRECTORY.md
| 436| ••••*•[Local•Weighted•Learning](machine_learning/local_weighted_learning/local_weighted_learning.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (100 > 79)

DIRECTORY.md
| 440| ••*•[Multilayer•Perceptron•Classifier](machine_learning/multilayer_perceptron_classifier.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (92 > 79)

DIRECTORY.md
| 445| ••*•[Sequential•Minimum•Optimization](machine_learning/sequential_minimum_optimization.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (90 > 79)

DIRECTORY.md
| 549| ••*•[Quadratic•Equations•Complex•Numbers](maths/quadratic_equations_complex_numbers.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (87 > 79)

DIRECTORY.md
| 588| ••*•[Nth•Fibonacci•Using•Matrix•Exponentiation](matrix/nth_fibonacci_using_matrix_exponentiation.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (100 > 79)

DIRECTORY.md
| 601| ••*•[2•Hidden•Layers•Neural•Network](neural_network/2_hidden_layers_neural_network.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (86 > 79)

DIRECTORY.md
| 602| ••*•[Back•Propagation•Neural•Network](neural_network/back_propagation_neural_network.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (88 > 79)

DIRECTORY.md
| 610| ••*•[Davisb•Putnamb•Logemannb•Loveland](other/davisb_putnamb_logemannb_loveland.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (83 > 79)

DIRECTORY.md
| 630| ••*•[Lorenz•Transformation•Four•Vector](physics/lorenz_transformation_four_vector.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (85 > 79)

DIRECTORY.md
| 918| ••*•[Non•Preemptive•Shortest•Job•First](scheduling/non_preemptive_shortest_job_first.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (88 > 79)

DIRECTORY.md
| 926| ••*•[Double•Linear•Search•Recursion](searches/double_linear_search_recursion.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (80 > 79)

DIRECTORY.md
| 965| ••*•[Odd•Even•Transposition•Single•Threaded](sorts/odd_even_transposition_single_threaded.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (93 > 79)

DIRECTORY.md
| 973| ••*•[Random•Normal•Distribution•Quicksort](sorts/random_normal_distribution_quicksort.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (89 > 79)

DIRECTORY.md
| 996| ••*•[Can•String•Be•Rearranged•As•Palindrome](strings/can_string_be_rearranged_as_palindrome.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (95 > 79)

DIRECTORY.md
|1001| ••*•[Detecting•English•Programmatically](strings/detecting_english_programmatically.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (87 > 79)

DIRECTORY.md
|1035| ••*•[Crawl•Google•Scholar•Citation](web_programming/crawl_google_scholar_citation.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (85 > 79)

DIRECTORY.md
|1040| ••*•[Download•Images•From•Google•Query](web_programming/download_images_from_google_query.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (93 > 79)

DIRECTORY.md
|1047| ••*•[Get•Imdb•Top•250•Movies•Csv](web_programming/get_imdb_top_250_movies_csv.py)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (81 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/project_euler/README.md
|    |++++| /app/project_euler/README.md
|   1|   1| # Project Euler
|   2|   2| 
|   3|    |-Problems are taken from https://projecteuler.net/, the Project Euler. [Problems are licensed under CC BY-NC-SA 4.0](https://projecteuler.net/copyright).
|    |   3|+Problems are taken from <https://projecteuler.net/>, the Project Euler. [Problems are licensed under CC BY-NC-SA 4.0](https://projecteuler.net/copyright).
|   4|   4| 
|   5|   5| Project Euler is a series of challenging mathematical/computer programming problems that require more than just mathematical
|   6|   6| insights to solve. Project Euler is ideal for mathematicians who are learning to code.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/project_euler/README.md
|    |++++| /app/project_euler/README.md
|   6|   6| insights to solve. Project Euler is ideal for mathematicians who are learning to code.
|   7|   7| 
|   8|   8| The solutions will be checked by our [automated testing on GitHub Actions](https://github.com/TheAlgorithms/Python/actions) with the help of [this script](https://github.com/TheAlgorithms/Python/blob/master/scripts/validate_solutions.py). The efficiency of your code is also checked. You can view the top 10 slowest solutions on GitHub Actions logs (under `slowest 10 durations`) and open a pull request to improve those solutions.
|   9|    |-
|  10|   9| 
|  11|  10| ## Solution Guidelines
|  12|  11| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/project_euler/README.md
|    |++++| /app/project_euler/README.md
|  14|  14| 
|  15|  15| ### Coding Style
|  16|  16| 
|  17|    |-* Please maintain consistency in project directory and solution file names. Keep the following points in mind:
|  18|    |-  * Create a new directory only for the problems which do not exist yet.
|  19|    |-  * If you create a new directory, please create an empty `__init__.py` file inside it as well.
|  20|    |-  * Please name the project **directory** as `problem_<problem_number>` where `problem_number` should be filled with 0s so as to occupy 3 digits. Example: `problem_001`, `problem_002`, `problem_067`, `problem_145`, and so on.
|    |  17|+- Please maintain consistency in project directory and solution file names. Keep the following points in mind:
|  21|  18| 
|  22|    |-* Please provide a link to the problem and other references, if used, in the **module-level docstring**.
|    |  19|+  - Create a new directory only for the problems which do not exist yet.
|    |  20|+  - If you create a new directory, please create an empty `__init__.py` file inside it as well.
|    |  21|+  - Please name the project **directory** as `problem_<problem_number>` where `problem_number` should be filled with 0s so as to occupy 3 digits. Example: `problem_001`, `problem_002`, `problem_067`, `problem_145`, and so on.
|  23|  22| 
|  24|    |-* All imports should come ***after*** the module-level docstring.
|    |  23|+- Please provide a link to the problem and other references, if used, in the **module-level docstring**.
|  25|  24| 
|  26|    |-* You can have as many helper functions as you want but there should be one main function called `solution` which should satisfy the conditions as stated below:
|  27|    |-  * It should contain positional argument(s) whose default value is the question input. Example: Please take a look at [Problem 1](https://projecteuler.net/problem=1) where the question is to *Find the sum of all the multiples of 3 or 5 below 1000.* In this case the main solution function will be `solution(limit: int = 1000)`.
|  28|    |-  * When the `solution` function is called without any arguments like so: `solution()`, it should return the answer to the problem.
|    |  25|+- All imports should come ***after*** the module-level docstring.
|  29|  26| 
|  30|    |-* Every function, which includes all the helper functions, if any, and the main solution function, should have `doctest` in the function docstring along with a brief statement mentioning what the function is about.
|  31|    |-  * There should not be a `doctest` for testing the answer as that is done by our GitHub Actions build using this [script](https://github.com/TheAlgorithms/Python/blob/master/scripts/validate_solutions.py). Keeping in mind the above example of [Problem 1](https://projecteuler.net/problem=1):
|    |  27|+- You can have as many helper functions as you want but there should be one main function called `solution` which should satisfy the conditions as stated below:
|    |  28|+
|    |  29|+  - It should contain positional argument(s) whose default value is the question input. Example: Please take a look at [Problem 1](https://projecteuler.net/problem=1) where the question is to *Find the sum of all the multiples of 3 or 5 below 1000.* In this case the main solution function will be `solution(limit: int = 1000)`.
|    |  30|+  - When the `solution` function is called without any arguments like so: `solution()`, it should return the answer to the problem.
|    |  31|+
|    |  32|+- Every function, which includes all the helper functions, if any, and the main solution function, should have `doctest` in the function docstring along with a brief statement mentioning what the function is about.
|    |  33|+
|    |  34|+  - There should not be a `doctest` for testing the answer as that is done by our GitHub Actions build using this [script](https://github.com/TheAlgorithms/Python/blob/master/scripts/validate_solutions.py). Keeping in mind the above example of [Problem 1](https://projecteuler.net/problem=1):
|  32|  35| 
|  33|  36|   ```python
|  34|  37|   def solution(limit: int = 1000):
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/project_euler/README.md
|    |++++| /app/project_euler/README.md
|  45|  45|       >>> solution(100)
|  46|  46|       ...
|  47|  47|       """
|  48|    |-    ```
|    |  48|+  ```
|  49|  49| 
|  50|  50| ### Solution Template
|  51|  51| 

project_euler/README.md
|   3| Problems•are•taken•from•https://projecteuler.net/,•the•Project•Euler.•[Problems•are•licensed•under•CC•BY-NC-SA•4.0](https://projecteuler.net/copyright).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (152 > 79)

project_euler/README.md
|   5| Project•Euler•is•a•series•of•challenging•mathematical/computer•programming•problems•that•require•more•than•just•mathematical
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (124 > 79)

project_euler/README.md
|   6| insights•to•solve.•Project•Euler•is•ideal•for•mathematicians•who•are•learning•to•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (86 > 79)

project_euler/README.md
|   8| The•solutions•will•be•checked•by•our•[automated•testing•on•GitHub•Actions](https://github.com/TheAlgorithms/Python/actions)•with•the•help•of•[this•script](https://github.com/TheAlgorithms/Python/blob/master/scripts/validate_solutions.py).•The•efficiency•of•your•code•is•also•checked.•You•can•view•the•top•10•slowest•solutions•on•GitHub•Actions•logs•(under•`slowest•10•durations`)•and•open•a•pull•request•to•improve•those•solutions.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (431 > 79)

project_euler/README.md
|  13| Welcome•to•[TheAlgorithms/Python](https://github.com/TheAlgorithms/Python)!•Before•reading•the•solution•guidelines,•make•sure•you•read•the•whole•[Contributing•Guidelines](https://github.com/TheAlgorithms/Python/blob/master/CONTRIBUTING.md)•as•it•won't•be•repeated•in•here.•If•you•have•any•doubt•on•the•guidelines,•please•feel•free•to•[state•it•clearly•in•an•issue](https://github.com/TheAlgorithms/Python/issues/new)•or•ask•the•community•in•[Gitter](https://gitter.im/TheAlgorithms).•You•can•use•the•[template](https://github.com/TheAlgorithms/Python/blob/master/project_euler/README.md#solution-template)•we•have•provided•below•as•your•starting•point•but•be•sure•to•read•the•[Coding•Style](https://github.com/TheAlgorithms/Python/blob/master/project_euler/README.md#coding-style)•part•first.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (792 > 79)

project_euler/README.md
|  17| *•Please•maintain•consistency•in•project•directory•and•solution•file•names.•Keep•the•following•points•in•mind:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (110 > 79)

project_euler/README.md
|  19| ••*•If•you•create•a•new•directory,•please•create•an•empty•`__init__.py`•file•inside•it•as•well.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (95 > 79)

project_euler/README.md
|  20| ••*•Please•name•the•project•**directory**•as•`problem_<problem_number>`•where•`problem_number`•should•be•filled•with•0s•so•as•to•occupy•3•digits.•Example:•`problem_001`,•`problem_002`,•`problem_067`,•`problem_145`,•and•so•on.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (225 > 79)

project_euler/README.md
|  22| *•Please•provide•a•link•to•the•problem•and•other•references,•if•used,•in•the•**module-level•docstring**.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (104 > 79)

project_euler/README.md
|  26| *•You•can•have•as•many•helper•functions•as•you•want•but•there•should•be•one•main•function•called•`solution`•which•should•satisfy•the•conditions•as•stated•below:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (160 > 79)

project_euler/README.md
|  27| ••*•It•should•contain•positional•argument(s)•whose•default•value•is•the•question•input.•Example:•Please•take•a•look•at•[Problem•1](https://projecteuler.net/problem=1)•where•the•question•is•to•*Find•the•sum•of•all•the•multiples•of•3•or•5•below•1000.*•In•this•case•the•main•solution•function•will•be•`solution(limit:•int•=•1000)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (328 > 79)

project_euler/README.md
|  28| ••*•When•the•`solution`•function•is•called•without•any•arguments•like•so:•`solution()`,•it•should•return•the•answer•to•the•problem.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (131 > 79)

project_euler/README.md
|  30| *•Every•function,•which•includes•all•the•helper•functions,•if•any,•and•the•main•solution•function,•should•have•`doctest`•in•the•function•docstring•along•with•a•brief•statement•mentioning•what•the•function•is•about.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (214 > 79)

project_euler/README.md
|  31| ••*•There•should•not•be•a•`doctest`•for•testing•the•answer•as•that•is•done•by•our•GitHub•Actions•build•using•this•[script](https://github.com/TheAlgorithms/Python/blob/master/scripts/validate_solutions.py).•Keeping•in•mind•the•above•example•of•[Problem•1](https://projecteuler.net/problem=1):
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (292 > 79)

project_euler/README.md
|  52| You•can•use•the•below•template•as•your•starting•point•but•please•read•the•[Coding•Style](https://github.com/TheAlgorithms/Python/blob/master/project_euler/README.md#coding-style)•first•to•understand•how•the•template•works.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (222 > 79)

project_euler/README.md
|  54| Please•change•the•name•of•the•helper•functions•accordingly,•change•the•parameter•names•with•a•descriptive•one,•replace•the•content•within•`[square•brackets]`•(including•the•brackets)•with•the•appropriate•content.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (212 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/audio_filters/README.md
|    |++++| /app/audio_filters/README.md
|   3|   3| Audio filters work on the frequency of an audio signal to attenuate unwanted frequency and amplify wanted ones.
|   4|   4| They are used within anything related to sound, whether it is radio communication or a hi-fi system.
|   5|   5| 
|   6|    |-* <https://www.masteringbox.com/filter-types/>
|   7|    |-* <http://ethanwiner.com/filters.html>
|   8|    |-* <https://en.wikipedia.org/wiki/Audio_filter>
|   9|    |-* <https://en.wikipedia.org/wiki/Electronic_filter>
|    |   6|+- <https://www.masteringbox.com/filter-types/>
|    |   7|+- <http://ethanwiner.com/filters.html>
|    |   8|+- <https://en.wikipedia.org/wiki/Audio_filter>
|    |   9|+- <https://en.wikipedia.org/wiki/Electronic_filter>

audio_filters/README.md
|   3| Audio•filters•work•on•the•frequency•of•an•audio•signal•to•attenuate•unwanted•frequency•and•amplify•wanted•ones.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (111 > 79)

audio_filters/README.md
|   4| They•are•used•within•anything•related•to•sound,•whether•it•is•radio•communication•or•a•hi-fi•system.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (100 > 79)

README.md
|   4| ••••<img•src="https://raw.githubusercontent.com/TheAlgorithms/website/1cd824df116b27029f17c2d1b42d81731f28a920/public/logo.svg"•height="100">
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (141 > 79)

README.md
|   6| ••<h1><a•href="https://github.com/TheAlgorithms/">The•Algorithms</a>•-•Python</h1>
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (82 > 79)

README.md
|  10| ••••<img•src="https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&style=flat-square"•height="20"•alt="Gitpod•Ready-to-Code">
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (141 > 79)

README.md
|  12| ••<a•href="https://github.com/TheAlgorithms/Python/blob/master/CONTRIBUTING.md">
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (80 > 79)

README.md
|  13| ••••<img•src="https://img.shields.io/static/v1.svg?label=Contributions&message=Welcome&color=0059b3&style=flat-square"•height="20"•alt="Contributions•Welcome">
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (159 > 79)

README.md
|  16| ••••<img•src="https://img.shields.io/badge/Donate-PayPal-green.svg?logo=paypal&style=flat-square"•height="20"•alt="Donate">
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (123 > 79)

README.md
|  18| ••<img•src="https://img.shields.io/github/repo-size/TheAlgorithms/Python.svg?label=Repo%20size&style=flat-square"•height="20">
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (126 > 79)

README.md
|  20| ••••<img•src="https://img.shields.io/discord/808045925556682782.svg?logo=discord&colorB=7289DA&style=flat-square"•height="20"•alt="Discord•chat">
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (145 > 79)

README.md
|  23| ••••<img•src="https://img.shields.io/badge/Chat-Gitter-ff69b4.svg?label=Chat&logo=gitter&style=flat-square"•height="20"•alt="Gitter•chat">
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (138 > 79)

README.md
|  28| ••••<img•src="https://img.shields.io/github/workflow/status/TheAlgorithms/Python/build?label=CI&logo=github&style=flat-square"•height="20"•alt="GitHub•Workflow•Status">
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (168 > 79)

README.md
|  31| ••••<img•src="https://img.shields.io/lgtm/alerts/github/TheAlgorithms/Python.svg?label=LGTM&logo=LGTM&style=flat-square"•height="20"•alt="LGTM">
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (144 > 79)

README.md
|  34| ••••<img•src="https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white&style=flat-square"•height="20"•alt="pre-commit">
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (155 > 79)

README.md
|  37| ••••<img•src="https://img.shields.io/static/v1?label=code%20style&message=black&color=black&style=flat-square"•height="20"•alt="code•style:•black">
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (147 > 79)

README.md
|  43| Implementations•are•for•learning•purposes•only.•As•they•may•be•less•efficient•than•the•implementations•in•the•Python•standard•library,•use•them•at•your•discretion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (163 > 79)

README.md
|  47| Read•through•our•[Contribution•Guidelines](CONTRIBUTING.md)•before•you•contribute.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (82 > 79)

README.md
|  51| We're•on•[Discord](https://discord.gg/c7MnfGFGa6)•and•[Gitter](https://gitter.im/TheAlgorithms)!•Community•channels•are•great•for•you•to•ask•questions•and•get•help.•Please•join•us!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (180 > 79)

README.md
|  55| See•our•[directory](DIRECTORY.md)•for•easier•navigation•and•better•overview•of•the•project.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (91 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/CONTRIBUTING.md
|    |++++| /app/CONTRIBUTING.md
|   2|   2| 
|   3|   3| ## Before contributing
|   4|   4| 
|   5|    |-Welcome to [TheAlgorithms/Python](https://github.com/TheAlgorithms/Python)! Before sending your pull requests, make sure that you __read the whole guidelines__. If you have any doubt on the contributing guide, please feel free to [state it clearly in an issue](https://github.com/TheAlgorithms/Python/issues/new) or ask the community in [Gitter](https://gitter.im/TheAlgorithms).
|    |   5|+Welcome to [TheAlgorithms/Python](https://github.com/TheAlgorithms/Python)! Before sending your pull requests, make sure that you **read the whole guidelines**. If you have any doubt on the contributing guide, please feel free to [state it clearly in an issue](https://github.com/TheAlgorithms/Python/issues/new) or ask the community in [Gitter](https://gitter.im/TheAlgorithms).
|   6|   6| 
|   7|   7| ## Contributing
|   8|   8| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/CONTRIBUTING.md
|    |++++| /app/CONTRIBUTING.md
|  15|  15| - Your work will be distributed under [MIT License](LICENSE.md) once your pull request is merged
|  16|  16| - Your submitted work fulfils or mostly fulfils our styles and standards
|  17|  17| 
|  18|    |-__New implementation__ is welcome! For example, new solutions for a problem, different representations for a graph data structure or algorithm designs with different complexity but __identical implementation__ of an existing implementation is not allowed. Please check whether the solution is already implemented or not before submitting your pull request.
|    |  18|+**New implementation** is welcome! For example, new solutions for a problem, different representations for a graph data structure or algorithm designs with different complexity but **identical implementation** of an existing implementation is not allowed. Please check whether the solution is already implemented or not before submitting your pull request.
|  19|  19| 
|  20|    |-__Improving comments__ and __writing proper tests__ are also highly welcome.
|    |  20|+**Improving comments** and **writing proper tests** are also highly welcome.
|  21|  21| 
|  22|  22| ### Contribution
|  23|  23| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/CONTRIBUTING.md
|    |++++| /app/CONTRIBUTING.md
|  23|  23| 
|  24|  24| We appreciate any contribution, from fixing a grammar mistake in a comment to implementing complex algorithms. Please read this section if you are contributing your work.
|  25|  25| 
|  26|    |-Your contribution will be tested by our [automated testing on GitHub Actions](https://github.com/TheAlgorithms/Python/actions) to save time and mental energy.  After you have submitted your pull request, you should see the GitHub Actions tests start to run at the bottom of your submission page.  If those tests fail, then click on the ___details___ button try to read through the GitHub Actions output to understand the failure.  If you do not understand, please leave a comment on your submission page and a community member will try to help.
|    |  26|+Your contribution will be tested by our [automated testing on GitHub Actions](https://github.com/TheAlgorithms/Python/actions) to save time and mental energy.  After you have submitted your pull request, you should see the GitHub Actions tests start to run at the bottom of your submission page.  If those tests fail, then click on the ***details*** button try to read through the GitHub Actions output to understand the failure.  If you do not understand, please leave a comment on your submission page and a community member will try to help.
|  27|  27| 
|  28|  28| Please help us keep our issue list small by adding fixes: #{$ISSUE_NO} to the commit message of pull requests that resolve open issues. GitHub will use this tag to auto-close the issue when the PR is merged.
|  29|  29| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/CONTRIBUTING.md
|    |++++| /app/CONTRIBUTING.md
|  30|  30| #### What is an Algorithm?
|  31|  31| 
|  32|  32| An Algorithm is one or more functions (or classes) that:
|  33|    |-* take one or more inputs,
|  34|    |-* perform some internal calculations or data manipulations,
|  35|    |-* return one or more outputs,
|  36|    |-* have minimal side effects (Ex. `print()`, `plot()`, `read()`, `write()`).
|    |  33|+
|    |  34|+- take one or more inputs,
|    |  35|+- perform some internal calculations or data manipulations,
|    |  36|+- return one or more outputs,
|    |  37|+- have minimal side effects (Ex. `print()`, `plot()`, `read()`, `write()`).
|  37|  38| 
|  38|  39| Algorithms should be packaged in a way that would make it easy for readers to put them into larger programs.
|  39|  40| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/CONTRIBUTING.md
|    |++++| /app/CONTRIBUTING.md
|  38|  38| Algorithms should be packaged in a way that would make it easy for readers to put them into larger programs.
|  39|  39| 
|  40|  40| Algorithms should:
|  41|    |-* have intuitive class and function names that make their purpose clear to readers
|  42|    |-* use Python naming conventions and intuitive variable names to ease comprehension
|  43|    |-* be flexible to take different input values
|  44|    |-* have Python type hints for their input parameters and return values
|  45|    |-* raise Python exceptions (`ValueError`, etc.) on erroneous input values
|  46|    |-* have docstrings with clear explanations and/or URLs to source materials
|  47|    |-* contain doctests that test both valid and erroneous input values
|  48|    |-* return all calculation results instead of printing or plotting them
|    |  41|+
|    |  42|+- have intuitive class and function names that make their purpose clear to readers
|    |  43|+- use Python naming conventions and intuitive variable names to ease comprehension
|    |  44|+- be flexible to take different input values
|    |  45|+- have Python type hints for their input parameters and return values
|    |  46|+- raise Python exceptions (`ValueError`, etc.) on erroneous input values
|    |  47|+- have docstrings with clear explanations and/or URLs to source materials
|    |  48|+- contain doctests that test both valid and erroneous input values
|    |  49|+- return all calculation results instead of printing or plotting them
|  49|  50| 
|  50|  51| Algorithms in this repo should not be how-to examples for existing Python packages.  Instead, they should perform internal calculations or manipulations to convert input values into different output values.  Those calculations or manipulations can use data types, classes, or functions of existing Python packages but each algorithm in this repo should add unique value.
|  51|  52| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/CONTRIBUTING.md
|    |++++| /app/CONTRIBUTING.md
|  50|  50| Algorithms in this repo should not be how-to examples for existing Python packages.  Instead, they should perform internal calculations or manipulations to convert input values into different output values.  Those calculations or manipulations can use data types, classes, or functions of existing Python packages but each algorithm in this repo should add unique value.
|  51|  51| 
|  52|  52| #### Pre-commit plugin
|    |  53|+
|  53|  54| Use [pre-commit](https://pre-commit.com/#installation) to automatically format your code to match our coding style:
|  54|  55| 
|  55|  56| ```bash
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/CONTRIBUTING.md
|    |++++| /app/CONTRIBUTING.md
|  56|  56| python3 -m pip install pre-commit  # only required the first time
|  57|  57| pre-commit install
|  58|  58| ```
|    |  59|+
|  59|  60| That's it! The plugin will run every time you commit any changes. If there are any errors found during the run, fix them and commit those changes. You can even run the plugin manually on all files:
|  60|  61| 
|  61|  62| ```bash
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/CONTRIBUTING.md
|    |++++| /app/CONTRIBUTING.md
|  67|  67| We want your work to be readable by others; therefore, we encourage you to note the following:
|  68|  68| 
|  69|  69| - Please write in Python 3.9+. For instance:  `print()` is a function in Python 3 so `print "Hello"` will *not* work but `print("Hello")` will.
|  70|    |-- Please focus hard on the naming of functions, classes, and variables.  Help your reader by using __descriptive names__ that can help you to remove redundant comments.
|    |  70|+- Please focus hard on the naming of functions, classes, and variables.  Help your reader by using **descriptive names** that can help you to remove redundant comments.
|    |  71|+
|  71|  72|   - Single letter variable names are *old school* so please avoid them unless their life only spans a few lines.
|  72|  73|   - Expand acronyms because `gcd()` is hard to understand but `greatest_common_divisor()` is not.
|  73|  74|   - Please follow the [Python Naming Conventions](https://pep8.org/#prescriptive-naming-conventions) so variable_names and function_names should be lower_case, CONSTANTS in UPPERCASE, ClassNames should be CamelCase, etc.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/CONTRIBUTING.md
|    |++++| /app/CONTRIBUTING.md
|  74|  74| 
|  75|  75| - We encourage the use of Python [f-strings](https://realpython.com/python-f-strings/#f-strings-a-new-and-improved-way-to-format-strings-in-python) where they make the code easier to read.
|  76|  76| 
|  77|    |-- Please consider running [__psf/black__](https://github.com/python/black) on your Python file(s) before submitting your pull request.  This is not yet a requirement but it does make your code more readable and automatically aligns it with much of [PEP 8](https://www.python.org/dev/peps/pep-0008/). There are other code formatters (autopep8, yapf) but the __black__ formatter is now hosted by the Python Software Foundation. To use it,
|    |  77|+- Please consider running [**psf/black**](https://github.com/python/black) on your Python file(s) before submitting your pull request.  This is not yet a requirement but it does make your code more readable and automatically aligns it with much of [PEP 8](https://www.python.org/dev/peps/pep-0008/). There are other code formatters (autopep8, yapf) but the **black** formatter is now hosted by the Python Software Foundation. To use it,
|  78|  78| 
|  79|  79|   ```bash
|  80|  80|   python3 -m pip install black  # only required the first time
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/CONTRIBUTING.md
|    |++++| /app/CONTRIBUTING.md
| 112| 112|       return a + b
| 113| 113|   ```
| 114| 114| 
| 115|    |-- Write tests (especially [__doctests__](https://docs.python.org/3/library/doctest.html)) to illustrate and verify your work.  We highly encourage the use of _doctests on all functions_.
|    | 115|+- Write tests (especially [**doctests**](https://docs.python.org/3/library/doctest.html)) to illustrate and verify your work.  We highly encourage the use of *doctests on all functions*.
| 116| 116| 
| 117| 117|   ```python
| 118| 118|   def sum_ab(a, b):
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/CONTRIBUTING.md
|    |++++| /app/CONTRIBUTING.md
| 134| 134|   python3 -m doctest -v my_submission.py
| 135| 135|   ```
| 136| 136| 
| 137|    |-  The use of the Python builtin `input()` function is __not__ encouraged:
|    | 137|+  The use of the Python builtin `input()` function is **not** encouraged:
| 138| 138| 
| 139| 139|   ```python
| 140| 140|   input('Enter your input:')
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/CONTRIBUTING.md
|    |++++| /app/CONTRIBUTING.md
| 157| 157| 
| 158| 158|   Instructions on how to install mypy can be found [here](https://github.com/python/mypy). Please use the command `mypy --ignore-missing-imports .` to test all files or `mypy --ignore-missing-imports path/to/file.py` to test a specific file.
| 159| 159| 
| 160|    |-- [__List comprehensions and generators__](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions) are preferred over the use of `lambda`, `map`, `filter`, `reduce` but the important thing is to demonstrate the power of Python in code that is easy to read and maintain.
|    | 160|+- [**List comprehensions and generators**](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions) are preferred over the use of `lambda`, `map`, `filter`, `reduce` but the important thing is to demonstrate the power of Python in code that is easy to read and maintain.
| 161| 161| 
| 162| 162| - Avoid importing external libraries for basic algorithms. Only use those libraries for complicated algorithms.
| 163| 163| - If you need a third-party module that is not in the file __requirements.txt__, please add it to that file as part of your submission.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/CONTRIBUTING.md
|    |++++| /app/CONTRIBUTING.md
| 160| 160| - [__List comprehensions and generators__](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions) are preferred over the use of `lambda`, `map`, `filter`, `reduce` but the important thing is to demonstrate the power of Python in code that is easy to read and maintain.
| 161| 161| 
| 162| 162| - Avoid importing external libraries for basic algorithms. Only use those libraries for complicated algorithms.
| 163|    |-- If you need a third-party module that is not in the file __requirements.txt__, please add it to that file as part of your submission.
|    | 163|+- If you need a third-party module that is not in the file **requirements.txt**, please add it to that file as part of your submission.
| 164| 164| 
| 165| 165| #### Other Requirements for Submissions
|    | 166|+
| 166| 167| - If you are submitting code in the `project_euler/` directory, please also read [the dedicated Guideline](https://github.com/TheAlgorithms/Python/blob/master/project_euler/README.md) before contributing to our Project Euler library.
| 167| 168| - The file extension for code files should be `.py`. Jupyter Notebooks should be submitted to [TheAlgorithms/Jupyter](https://github.com/TheAlgorithms/Jupyter).
| 168| 169| - Strictly use snake_case (underscore_separated) in your file_name, as it will be easy to parse in future using scripts.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/CONTRIBUTING.md
|    |++++| /app/CONTRIBUTING.md
| 172| 172| - If you have modified/added documentation work, ensure your language is concise and contains no grammar errors.
| 173| 173| - Do not update the README.md or DIRECTORY.md file which will be periodically autogenerated by our GitHub Actions processes.
| 174| 174| - Add a corresponding explanation to [Algorithms-Explanation](https://github.com/TheAlgorithms/Algorithms-Explanation) (Optional but recommended).
| 175|    |-- All submissions will be tested with [__mypy__](http://www.mypy-lang.org) so we encourage you to add [__Python type hints__](https://docs.python.org/3/library/typing.html) where it makes sense to do so.
|    | 175|+- All submissions will be tested with [**mypy**](http://www.mypy-lang.org) so we encourage you to add [**Python type hints**](https://docs.python.org/3/library/typing.html) where it makes sense to do so.
| 176| 176| 
| 177| 177| - Most importantly,
| 178| 178|   - __Be consistent in the use of these guidelines when submitting.__
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/CONTRIBUTING.md
|    |++++| /app/CONTRIBUTING.md
| 175| 175| - All submissions will be tested with [__mypy__](http://www.mypy-lang.org) so we encourage you to add [__Python type hints__](https://docs.python.org/3/library/typing.html) where it makes sense to do so.
| 176| 176| 
| 177| 177| - Most importantly,
| 178|    |-  - __Be consistent in the use of these guidelines when submitting.__
| 179|    |-  - __Join__ [Gitter](https://gitter.im/TheAlgorithms) __now!__
|    | 178|+  - **Be consistent in the use of these guidelines when submitting.**
|    | 179|+  - **Join** [Gitter](https://gitter.im/TheAlgorithms) **now!**
| 180| 180|   - Happy coding!
| 181| 181| 
| 182| 182| Writer [@poyea](https://github.com/poyea), Jun 2019.

CONTRIBUTING.md
|   5| Welcome•to•[TheAlgorithms/Python](https://github.com/TheAlgorithms/Python)!•Before•sending•your•pull•requests,•make•sure•that•you•__read•the•whole•guidelines__.•If•you•have•any•doubt•on•the•contributing•guide,•please•feel•free•to•[state•it•clearly•in•an•issue](https://github.com/TheAlgorithms/Python/issues/new)•or•ask•the•community•in•[Gitter](https://gitter.im/TheAlgorithms).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (379 > 79)

CONTRIBUTING.md
|  11| We•are•very•happy•that•you•consider•implementing•algorithms•and•data•structures•for•others!•This•repository•is•referenced•and•used•by•learners•from•all•over•the•globe.•Being•one•of•our•contributors,•you•agree•and•confirm•that:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (226 > 79)

CONTRIBUTING.md
|  15| -•Your•work•will•be•distributed•under•[MIT•License](LICENSE.md)•once•your•pull•request•is•merged
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (96 > 79)

CONTRIBUTING.md
|  18| __New•implementation__•is•welcome!•For•example,•new•solutions•for•a•problem,•different•representations•for•a•graph•data•structure•or•algorithm•designs•with•different•complexity•but•__identical•implementation__•of•an•existing•implementation•is•not•allowed.•Please•check•whether•the•solution•is•already•implemented•or•not•before•submitting•your•pull•request.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (356 > 79)

CONTRIBUTING.md
|  24| We•appreciate•any•contribution,•from•fixing•a•grammar•mistake•in•a•comment•to•implementing•complex•algorithms.•Please•read•this•section•if•you•are•contributing•your•work.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (170 > 79)

CONTRIBUTING.md
|  26| Your•contribution•will•be•tested•by•our•[automated•testing•on•GitHub•Actions](https://github.com/TheAlgorithms/Python/actions)•to•save•time•and•mental•energy.••After•you•have•submitted•your•pull•request,•you•should•see•the•GitHub•Actions•tests•start•to•run•at•the•bottom•of•your•submission•page.••If•those•tests•fail,•then•click•on•the•___details___•button•try•to•read•through•the•GitHub•Actions•output•to•understand•the•failure.••If•you•do•not•understand,•please•leave•a•comment•on•your•submission•page•and•a•community•member•will•try•to•help.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (544 > 79)

CONTRIBUTING.md
|  28| Please•help•us•keep•our•issue•list•small•by•adding•fixes:•#{$ISSUE_NO}•to•the•commit•message•of•pull•requests•that•resolve•open•issues.•GitHub•will•use•this•tag•to•auto-close•the•issue•when•the•PR•is•merged.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (207 > 79)

CONTRIBUTING.md
|  38| Algorithms•should•be•packaged•in•a•way•that•would•make•it•easy•for•readers•to•put•them•into•larger•programs.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (108 > 79)

CONTRIBUTING.md
|  41| *•have•intuitive•class•and•function•names•that•make•their•purpose•clear•to•readers
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (82 > 79)

CONTRIBUTING.md
|  42| *•use•Python•naming•conventions•and•intuitive•variable•names•to•ease•comprehension
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (82 > 79)

CONTRIBUTING.md
|  50| Algorithms•in•this•repo•should•not•be•how-to•examples•for•existing•Python•packages.••Instead,•they•should•perform•internal•calculations•or•manipulations•to•convert•input•values•into•different•output•values.••Those•calculations•or•manipulations•can•use•data•types,•classes,•or•functions•of•existing•Python•packages•but•each•algorithm•in•this•repo•should•add•unique•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (370 > 79)

CONTRIBUTING.md
|  53| Use•[pre-commit](https://pre-commit.com/#installation)•to•automatically•format•your•code•to•match•our•coding•style:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (115 > 79)

CONTRIBUTING.md
|  59| That's•it!•The•plugin•will•run•every•time•you•commit•any•changes.•If•there•are•any•errors•found•during•the•run,•fix•them•and•commit•those•changes.•You•can•even•run•the•plugin•manually•on•all•files:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (197 > 79)

CONTRIBUTING.md
|  67| We•want•your•work•to•be•readable•by•others;•therefore,•we•encourage•you•to•note•the•following:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (94 > 79)

CONTRIBUTING.md
|  69| -•Please•write•in•Python•3.9+.•For•instance:••`print()`•is•a•function•in•Python•3•so•`print•"Hello"`•will•*not*•work•but•`print("Hello")`•will.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (143 > 79)

CONTRIBUTING.md
|  70| -•Please•focus•hard•on•the•naming•of•functions,•classes,•and•variables.••Help•your•reader•by•using•__descriptive•names__•that•can•help•you•to•remove•redundant•comments.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (168 > 79)

CONTRIBUTING.md
|  71| ••-•Single•letter•variable•names•are•*old•school*•so•please•avoid•them•unless•their•life•only•spans•a•few•lines.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (112 > 79)

CONTRIBUTING.md
|  72| ••-•Expand•acronyms•because•`gcd()`•is•hard•to•understand•but•`greatest_common_divisor()`•is•not.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (97 > 79)

CONTRIBUTING.md
|  73| ••-•Please•follow•the•[Python•Naming•Conventions](https://pep8.org/#prescriptive-naming-conventions)•so•variable_names•and•function_names•should•be•lower_case,•CONSTANTS•in•UPPERCASE,•ClassNames•should•be•CamelCase,•etc.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (220 > 79)

CONTRIBUTING.md
|  75| -•We•encourage•the•use•of•Python•[f-strings](https://realpython.com/python-f-strings/#f-strings-a-new-and-improved-way-to-format-strings-in-python)•where•they•make•the•code•easier•to•read.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (188 > 79)

CONTRIBUTING.md
|  77| -•Please•consider•running•[__psf/black__](https://github.com/python/black)•on•your•Python•file(s)•before•submitting•your•pull•request.••This•is•not•yet•a•requirement•but•it•does•make•your•code•more•readable•and•automatically•aligns•it•with•much•of•[PEP•8](https://www.python.org/dev/peps/pep-0008/).•There•are•other•code•formatters•(autopep8,•yapf)•but•the•__black__•formatter•is•now•hosted•by•the•Python•Software•Foundation.•To•use•it,
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (436 > 79)

CONTRIBUTING.md
|  84| -•All•submissions•will•need•to•pass•the•test•`flake8•.•--ignore=E203,W503•--max-line-length=88`•before•they•will•be•accepted•so•if•possible,•try•this•test•locally•on•your•Python•file(s)•before•submitting•your•pull•request.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (222 > 79)

CONTRIBUTING.md
|  91| -•Original•code•submission•require•docstrings•or•comments•to•describe•your•work.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (80 > 79)

CONTRIBUTING.md
|  95| ••If•you•used•a•Wikipedia•article•or•some•other•source•material•to•create•your•algorithm,•please•add•the•URL•in•a•docstring•or•comment•to•help•your•reader.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (155 > 79)

CONTRIBUTING.md
| 103| ••This•is•too•trivial.•Comments•are•expected•to•be•explanatory.•For•comments,•you•can•write•them•above,•on•or•below•a•line•of•code,•as•long•as•you•are•consistent•within•the•same•piece•of•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (192 > 79)

CONTRIBUTING.md
| 105| ••We•encourage•you•to•put•docstrings•inside•your•functions•but•please•pay•attention•to•the•indentation•of•docstrings.•The•following•is•a•good•example:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (150 > 79)

CONTRIBUTING.md
| 115| -•Write•tests•(especially•[__doctests__](https://docs.python.org/3/library/doctest.html))•to•illustrate•and•verify•your•work.••We•highly•encourage•the•use•of•_doctests•on•all•functions_.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (186 > 79)

CONTRIBUTING.md
| 131| ••These•doctests•will•be•run•by•pytest•as•part•of•our•automated•testing•so•please•try•to•run•your•doctests•locally•and•make•sure•that•they•are•found•and•pass:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (158 > 79)

CONTRIBUTING.md
| 145| ••However,•if•your•code•uses•`input()`•then•we•encourage•you•to•gracefully•deal•with•leading•and•trailing•whitespace•in•user•input•by•adding•`.strip()`•as•in:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (158 > 79)

CONTRIBUTING.md
| 151| ••The•use•of•[Python•type•hints](https://docs.python.org/3/library/typing.html)•is•encouraged•for•function•parameters•and•return•values.••Our•automated•testing•will•run•[mypy](http://mypy-lang.org)•so•run•that•locally•before•making•your•submission.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (248 > 79)

CONTRIBUTING.md
| 158| ••Instructions•on•how•to•install•mypy•can•be•found•[here](https://github.com/python/mypy).•Please•use•the•command•`mypy•--ignore-missing-imports•.`•to•test•all•files•or•`mypy•--ignore-missing-imports•path/to/file.py`•to•test•a•specific•file.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (241 > 79)

CONTRIBUTING.md
| 160| -•[__List•comprehensions•and•generators__](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions)•are•preferred•over•the•use•of•`lambda`,•`map`,•`filter`,•`reduce`•but•the•important•thing•is•to•demonstrate•the•power•of•Python•in•code•that•is•easy•to•read•and•maintain.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (289 > 79)

CONTRIBUTING.md
| 162| -•Avoid•importing•external•libraries•for•basic•algorithms.•Only•use•those•libraries•for•complicated•algorithms.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (111 > 79)

CONTRIBUTING.md
| 163| -•If•you•need•a•third-party•module•that•is•not•in•the•file•__requirements.txt__,•please•add•it•to•that•file•as•part•of•your•submission.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (135 > 79)

CONTRIBUTING.md
| 166| -•If•you•are•submitting•code•in•the•`project_euler/`•directory,•please•also•read•[the•dedicated•Guideline](https://github.com/TheAlgorithms/Python/blob/master/project_euler/README.md)•before•contributing•to•our•Project•Euler•library.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (233 > 79)

CONTRIBUTING.md
| 167| -•The•file•extension•for•code•files•should•be•`.py`.•Jupyter•Notebooks•should•be•submitted•to•[TheAlgorithms/Jupyter](https://github.com/TheAlgorithms/Jupyter).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (160 > 79)

CONTRIBUTING.md
| 168| -•Strictly•use•snake_case•(underscore_separated)•in•your•file_name,•as•it•will•be•easy•to•parse•in•future•using•scripts.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (120 > 79)

CONTRIBUTING.md
| 169| -•Please•avoid•creating•new•directories•if•at•all•possible.•Try•to•fit•your•work•into•the•existing•directory•structure.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (119 > 79)

CONTRIBUTING.md
| 171| -•If•you•have•modified/added•code•work,•make•sure•the•code•compiles•before•submitting.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (86 > 79)

CONTRIBUTING.md
| 172| -•If•you•have•modified/added•documentation•work,•ensure•your•language•is•concise•and•contains•no•grammar•errors.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (112 > 79)

CONTRIBUTING.md
| 173| -•Do•not•update•the•README.md•or•DIRECTORY.md•file•which•will•be•periodically•autogenerated•by•our•GitHub•Actions•processes.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (124 > 79)

CONTRIBUTING.md
| 174| -•Add•a•corresponding•explanation•to•[Algorithms-Explanation](https://github.com/TheAlgorithms/Algorithms-Explanation)•(Optional•but•recommended).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (146 > 79)

CONTRIBUTING.md
| 175| -•All•submissions•will•be•tested•with•[__mypy__](http://www.mypy-lang.org)•so•we•encourage•you•to•add•[__Python•type•hints__](https://docs.python.org/3/library/typing.html)•where•it•makes•sense•to•do•so.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (203 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/linear_algebra/README.md
|    |++++| /app/linear_algebra/README.md
|   2|   2| 
|   3|   3| This module contains classes and functions for doing linear algebra.
|   4|   4| 
|----|    | 
|    |   5|+***
|   5|   6| 
|   6|   7| ## Overview
|   7|   8| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/linear_algebra/README.md
|    |++++| /app/linear_algebra/README.md
|   7|   7| ## Overview
|   8|   8| 
|   9|   9| ### class Vector
|  10|    |--
|  11|    |-    - This class represents a vector of arbitrary size and related operations.
|  12|  10| 
|  13|    |-    **Overview of the methods:**
|    |  11|+\-
|    |  12|+    \- This class represents a vector of arbitrary size and related operations.
|  14|  13| 
|  15|    |-    - constructor(components) : init the vector
|  16|    |-    - set(components) : changes the vector components.
|  17|    |-    - \_\_str\_\_() : toString method
|  18|    |-    - component(i): gets the i-th component (0-indexed)
|  19|    |-    - \_\_len\_\_() : gets the size / length of the vector (number of components)
|  20|    |-    - euclidean_length() : returns the eulidean length of the vector
|  21|    |-    - operator + : vector addition
|  22|    |-    - operator - : vector subtraction
|  23|    |-    - operator * : scalar multiplication and dot product
|  24|    |-    - copy() : copies this vector and returns it
|  25|    |-    - change_component(pos,value) : changes the specified component
|    |  14|+```
|    |  15|+**Overview of the methods:**
|    |  16|+
|    |  17|+- constructor(components) : init the vector
|    |  18|+- set(components) : changes the vector components.
|    |  19|+- \_\_str\_\_() : toString method
|    |  20|+- component(i): gets the i-th component (0-indexed)
|    |  21|+- \_\_len\_\_() : gets the size / length of the vector (number of components)
|    |  22|+- euclidean_length() : returns the eulidean length of the vector
|    |  23|+- operator + : vector addition
|    |  24|+- operator - : vector subtraction
|    |  25|+- operator * : scalar multiplication and dot product
|    |  26|+- copy() : copies this vector and returns it
|    |  27|+- change_component(pos,value) : changes the specified component
|    |  28|+```
|  26|  29| 
|  27|  30| - function zero_vector(dimension)
|  28|  31|     - returns a zero vector of 'dimension'
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/linear_algebra/README.md
|    |++++| /app/linear_algebra/README.md
|  25|  25|     - change_component(pos,value) : changes the specified component
|  26|  26| 
|  27|  27| - function zero_vector(dimension)
|  28|    |-    - returns a zero vector of 'dimension'
|    |  28|+  - returns a zero vector of 'dimension'
|  29|  29| - function unit_basis_vector(dimension, pos)
|  30|    |-    - returns a unit basis vector with a one at index 'pos' (0-indexed)
|    |  30|+  - returns a unit basis vector with a one at index 'pos' (0-indexed)
|  31|  31| - function axpy(scalar, vector1, vector2)
|  32|    |-    - computes the axpy operation
|    |  32|+  - computes the axpy operation
|  33|  33| - function random_vector(N, a, b)
|  34|    |-    - returns a random vector of size N, with random integer components between 'a' and 'b' inclusive
|    |  34|+  - returns a random vector of size N, with random integer components between 'a' and 'b' inclusive
|  35|  35| 
|  36|  36| ### class Matrix
|  37|  37| -
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/linear_algebra/README.md
|    |++++| /app/linear_algebra/README.md
|  34|  34|     - returns a random vector of size N, with random integer components between 'a' and 'b' inclusive
|  35|  35| 
|  36|  36| ### class Matrix
|  37|    |--
|  38|    |-    - This class represents a matrix of arbitrary size and operations on it.
|  39|  37| 
|  40|    |-    **Overview of the methods:**
|    |  38|+\-
|    |  39|+    \- This class represents a matrix of arbitrary size and operations on it.
|  41|  40| 
|  42|    |-    -  \_\_str\_\_() : returns a string representation
|  43|    |-    - operator * : implements the matrix vector multiplication
|  44|    |-                   implements the matrix-scalar multiplication.
|  45|    |-    - change_component(x, y, value) : changes the specified component.
|  46|    |-    - component(x, y) : returns the specified component.
|  47|    |-    - width() : returns the width of the matrix
|  48|    |-    - height() : returns the height of the matrix
|  49|    |-    - determinant() : returns the determinant of the matrix if it is square
|  50|    |-    - operator + : implements the matrix-addition.
|  51|    |-    - operator - : implements the matrix-subtraction
|    |  41|+```
|    |  42|+**Overview of the methods:**
|    |  43|+
|    |  44|+-  \_\_str\_\_() : returns a string representation
|    |  45|+- operator * : implements the matrix vector multiplication
|    |  46|+               implements the matrix-scalar multiplication.
|    |  47|+- change_component(x, y, value) : changes the specified component.
|    |  48|+- component(x, y) : returns the specified component.
|    |  49|+- width() : returns the width of the matrix
|    |  50|+- height() : returns the height of the matrix
|    |  51|+- determinant() : returns the determinant of the matrix if it is square
|    |  52|+- operator + : implements the matrix-addition.
|    |  53|+- operator - : implements the matrix-subtraction
|    |  54|+```
|  52|  55| 
|  53|  56| - function square_zero_matrix(N)
|  54|  57|     - returns a square zero-matrix of dimension NxN
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/linear_algebra/README.md
|    |++++| /app/linear_algebra/README.md
|  51|  51|     - operator - : implements the matrix-subtraction
|  52|  52| 
|  53|  53| - function square_zero_matrix(N)
|  54|    |-    - returns a square zero-matrix of dimension NxN
|    |  54|+  - returns a square zero-matrix of dimension NxN
|  55|  55| - function random_matrix(W, H, a, b)
|  56|    |-    - returns a random matrix WxH with integer components between 'a' and 'b' inclusive
|----|    | 
|    |  56|+  - returns a random matrix WxH with integer components between 'a' and 'b' inclusive
|    |  57|+
|    |  58|+***
|  57|  59| 
|  58|  60| ## Documentation
|  59|  61| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/linear_algebra/README.md
|    |++++| /app/linear_algebra/README.md
|  61|  61| This module uses docstrings to enable the use of Python's in-built `help(...)` function.
|  62|  62| For instance, try `help(Vector)`, `help(unit_basis_vector)`, and `help(CLASSNAME.METHODNAME)`.
|  63|  63| 
|----|    | 
|    |  64|+***
|  64|  65| 
|  65|  66| ## Usage
|  66|  67| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/linear_algebra/README.md
|    |++++| /app/linear_algebra/README.md
|  68|  68| Import the module `lib.py` from the **src** directory into your project.
|  69|  69| Alternatively, you can directly use the Python bytecode file `lib.pyc`.
|  70|  70| 
|----|    | 
|    |  71|+***
|  71|  72| 
|  72|  73| ## Tests
|  73|  74| 

linear_algebra/README.md
|  19| ••••-•\_\_len\_\_()•:•gets•the•size•/•length•of•the•vector•(number•of•components)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (81 > 79)

linear_algebra/README.md
|  34| ••••-•returns•a•random•vector•of•size•N,•with•random•integer•components•between•'a'•and•'b'•inclusive
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (101 > 79)

linear_algebra/README.md
|  56| ••••-•returns•a•random•matrix•WxH•with•integer•components•between•'a'•and•'b'•inclusive
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (87 > 79)

linear_algebra/README.md
|  61| This•module•uses•docstrings•to•enable•the•use•of•Python's•in-built•`help(...)`•function.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (88 > 79)

linear_algebra/README.md
|  62| For•instance,•try•`help(Vector)`,•`help(unit_basis_vector)`,•and•`help(CLASSNAME.METHODNAME)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (94 > 79)

linear_algebra/README.md
|  75| `src/tests.py`•contains•Python•unit•tests•which•can•be•run•with•`python3•-m•unittest•-v`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (89 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/financial/ABOUT.md
|    |++++| /app/financial/ABOUT.md
|   1|   1| ### Interest
|   2|   2| 
|   3|    |-* Compound Interest: "Compound interest is calculated by multiplying the initial principal amount by one plus the annual interest rate raised to the number of compound periods minus one." [Compound Interest](https://www.investopedia.com/)
|   4|    |-* Simple Interest: "Simple interest paid or received over a certain period is a fixed percentage of the principal amount that was borrowed or lent. " [Simple Interest](https://www.investopedia.com/)
|    |   3|+- Compound Interest: "Compound interest is calculated by multiplying the initial principal amount by one plus the annual interest rate raised to the number of compound periods minus one." [Compound Interest](https://www.investopedia.com/)
|    |   4|+- Simple Interest: "Simple interest paid or received over a certain period is a fixed percentage of the principal amount that was borrowed or lent. " [Simple Interest](https://www.investopedia.com/)

financial/ABOUT.md
|   3| *•Compound•Interest:•"Compound•interest•is•calculated•by•multiplying•the•initial•principal•amount•by•one•plus•the•annual•interest•rate•raised•to•the•number•of•compound•periods•minus•one."•[Compound•Interest](https://www.investopedia.com/)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (238 > 79)

financial/ABOUT.md
|   4| *•Simple•Interest:•"Simple•interest•paid•or•received•over•a•certain•period•is•a•fixed•percentage•of•the•principal•amount•that•was•borrowed•or•lent.•"•[Simple•Interest](https://www.investopedia.com/)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (198 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/cellular_automata/README.md
|    |++++| /app/cellular_automata/README.md
|   4|   4| They usually follow simple rules but can lead to the creation of complex forms.
|   5|   5| The most popular cellular automaton is Conway's [Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life).
|   6|   6| 
|   7|    |-* <https://en.wikipedia.org/wiki/Cellular_automaton>
|   8|    |-* <https://mathworld.wolfram.com/ElementaryCellularAutomaton.html>
|    |   7|+- <https://en.wikipedia.org/wiki/Cellular_automaton>
|    |   8|+- <https://mathworld.wolfram.com/ElementaryCellularAutomaton.html>

cellular_automata/README.md
|   3| Cellular•automata•are•a•way•to•simulate•the•behavior•of•"life",•no•matter•if•it•is•a•robot•or•cell.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (99 > 79)

cellular_automata/README.md
|   5| The•most•popular•cellular•automaton•is•Conway's•[Game•of•Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (118 > 79)
Executing section json...
|    | [NORMAL] JSONFormatBear:
|    | This file can be reformatted by sorting keys and following indentation.
|----|    | /app/scripts/project_euler_answers.json
|    |++++| /app/scripts/project_euler_answers.json
|   1|   1| {
|   2|    |-  "001": "c0b20f4665d0388d564f0b6ecf3edc9f9480cb15fff87198b95701d9f5fe1f7b",
|   3|    |-  "002": "1f5882e19314ac13acca52ad5503184b3cb1fd8dbeea82e0979d799af2361704",
|   4|    |-  "003": "5c09f0554518a413e58e6bc5964ba90655713483d0b2bbc94572ad6b0b4dda28",
|   5|    |-  "004": "aa74f52b4c428d89606b411bc165eb81a6266821ecc9b4f30cdb70c5c930f4d9",
|   6|    |-  "005": "1ba90ab11bfb2d2400545337212b0de2a5c7f399215175ade6396e91388912b1",
|   7|    |-  "006": "537942be3eb323c507623a6a73fa87bf5aeb97b7c7422993a82aa7c15f6d9cd6",
|   8|    |-  "007": "ecbe74e25cfa4763dbc304ccac2ffb9912e9625cd9993a84bd0dd6d7dc0ca021",
|   9|    |-  "008": "b9fb30b6553415e9150051ce5710a93d0f55b22557c0068d8e16619a388f145a",
|  10|    |-  "009": "d912d9d473ef86f12da1fb2011c5c0c155bd3a0ebdb4bbd7ea275cecdcb63731",
|  11|    |-  "010": "bed2d160e02f0540f19a64ca738aacb79cfcd08ba7e2421567b16cb6e7e3e90e",
|  12|    |-  "011": "9ded5bc849d33e477aa9c944138d34f0aacc485a372e84464e8a572712a5b7da",
|  13|    |-  "012": "3e7be445b6c19e6db58c2482005c1f78cb74011a4279249ca632011a9f1b61a2",
|  14|    |-  "013": "3cb265a96c5645a9ad11d47551f015c25f3f99792c951617656d84626fbc4868",
|  15|    |-  "014": "78a262dd40eba0f7195686ec7f3891a39437523456f8d16fa9065a34409eeac6",
|  16|    |-  "015": "7b8f812ca89e311e1b16b903de76fa7b0800a939b3028d9dc4d35f6fa4050281",
|  17|    |-  "016": "a6f988d30328bd706c66f8ac0d92aac21dd732149cdd69cb31f459dca20c5abe",
|  18|    |-  "017": "1a455b216c6e916943acf3fa4c7e57a7a5cac66d97cc51befca810c223ef9c23",
|  19|    |-  "018": "fde3f2e7127f6810eb4160bf7bb0563240d78c9d75a9a590b6d6244748a7f4ff",
|  20|    |-  "019": "284de502c9847342318c17d474733ef468fbdbe252cddf6e4b4be0676706d9d0",
|  21|    |-  "020": "c86a2932e1c79343a3c16fb218b9944791aaeedd3e30c87d1c7f505c0e588f7c",
|  22|    |-  "021": "e8c6ef4a1736a245b5682e0262c5c43862cfb233ca5e286be2f5bb4d8a974ecf",
|  23|    |-  "022": "85148c096c25e3ed3da55c7e9c89448018b0f5f53ad8d042129c33d9beac6736",
|  24|    |-  "023": "42e2552a2f589e021824339e2508629ffa00b3489ea467f47e77a1ea97e735c9",
|  25|    |-  "024": "4677b3d9daa3b30a9665e4558f826e04f7833dda886b8ef24f7176519a0db537",
|  26|    |-  "025": "7d398da8791745001b3d1c41030676d1c036687eb1ab32e0b5a1832e7579c073",
|  27|    |-  "026": "fbe10beedf9d29cf53137ba38859ffd1dbe7642cedb7ef0a102a3ab109b47842",
|  28|    |-  "027": "e4110e0852a2f70703f0081fc91c4a20f595919a038729cb37c564d68b875c6f",
|  29|    |-  "028": "261171a770d594f6a7fc76c1a839eda7f6dd4e9495e00e75048578fc86d8adf0",
|  30|    |-  "029": "a207c35d8417aeed4c9e78bcf83f936cd8191c702893be62aa690ce16bc909ca",
|  31|    |-  "030": "46e68e4199ab0a663ab306651528b06756556c9f0d8b819095af45e036dfbe6b",
|  32|    |-  "031": "8de34b4ba97b184c7a2096b9266776175242b87d67bc8d77d7289be6f70cd105",
|  33|    |-  "032": "0d246750daa7f1b367a21f55da454ddc8f62e0a95d163062e9b9273320d5130f",
|  34|    |-  "033": "ad57366865126e55649ecb23ae1d48887544976efea46a48eb5d85a6eeb4d306",
|  35|    |-  "034": "728b8d7d6d5d34cad9cbb7c3ea15f807ae57144594b1740b3c73b82314ccd1ed",
|  36|    |-  "035": "02d20bbd7e394ad5999a4cebabac9619732c343a4cac99470c03e23ba2bdc2bc",
|  37|    |-  "036": "9480c0160719234b57defc0681c0949a175ffb3ff4a3bf5e8163ac843f383f35",
|  38|    |-  "037": "e9800abda89919edac504e90dac91f95e0778e3ba0f21a0bac4e77a84766eaaf",
|  39|    |-  "038": "b2004522103364a6e842b9d042c0707d79af68dec7810078729d061fb7948912",
|  40|    |-  "039": "fd0f7e53c5b02b688a57ee37f3d52065cb168a7b9fd5a3abd93d37e1559fbd30",
|  41|    |-  "040": "d29d53701d3c859e29e1b90028eec1ca8e2f29439198b6e036c60951fb458aa1",
|  42|    |-  "041": "bf05020e70de94e26dba112bb6fb7b0755db5ca88c7225e99187c5a08c8a0428",
|  43|    |-  "042": "79d6eaa2676189eb927f2e16a70091474078e2117c3fc607d35cdc6b591ef355",
|  44|    |-  "043": "6512f20c244844b6130204379601855098826afa1b55ff91c293c853ddf67db5",
|  45|    |-  "044": "97e2524fd3796e83b06c0f89fdcb16e4c544e76e9c0496f57ac84834869f4cc3",
|  46|    |-  "045": "8b0300d71656b9cf0716318be9453c99a13bb8644d227fd683d06124e6a28b35",
|  47|    |-  "046": "8485ee802cc628b8cbd82476133d11b57af87e00711516a703525a9af0193b12",
|  48|    |-  "047": "c7274da71333bd93201fa1e05b1ed54e0074d83f259bd7148c70ddc43082bde1",
|  49|    |-  "048": "743d17cbff06ab458b99ecbb32e1d6bb9a7ff2ac804118f7743177dd969cfc61",
|  50|    |-  "049": "47c6094ff1ff6e37788def89190c8256619ef1511681c503fea02c171569d16e",
|  51|    |-  "050": "6ee74ef623df9fb69facd30b91ed78fe70370462bb267097f0dfeef9d9b057bb",
|  52|    |-  "051": "d17cec28356b4f9a7f1ec0f20cca4c89e270aeb0e75d70d485b05bb1f28e9f6d",
|  53|    |-  "052": "ebd72b510911af3e254a030cd891cb804e1902189eee7a0f6199472eb5e4dba2",
|  54|    |-  "053": "9705cc6128a60cc22581217b715750a6053b2ddda67cc3af7e14803b27cf0c1f",
|  55|    |-  "054": "12e2c8df501501b2bb531e941a737ffa7a2a491e849c5c5841e3b6132291bc35",
|  56|    |-  "055": "9f484139a27415ae2e8612bf6c65a8101a18eb5e9b7809e74ca63a45a65f17f4",
|  57|    |-  "056": "3658d7fa3c43456f3c9c87db0490e872039516e6375336254560167cc3db2ea2",
|  58|    |-  "057": "620c9c332101a5bae955c66ae72268fbcd3972766179522c8deede6a249addb7",
|  59|    |-  "058": "196f327021627b6a48db9c6e0a3388d110909d4bb957eb3fbc90ff1ecbda42cb",
|  60|    |-  "059": "0295239a9d71f7452b93e920b7e0e462f712af5444579d25e06b9614ed77de74",
|  61|    |-  "060": "ad7c26db722221bfb1bf7e3c36b501bedf8be857b1cfa8664fccb074b54354f9",
|  62|    |-  "061": "94e4fb283c1abcccae4b8b28e39a294a323cdc9732c3d3ce1133c518d0a286f6",
|  63|    |-  "062": "d25a595036aa8722157aca38f90084acb369b00df1070f49e203d5a3b7a0736d",
|  64|    |-  "063": "0e17daca5f3e175f448bacace3bc0da47d0655a74c8dd0dc497a3afbdad95f1f",
|  65|    |-  "064": "6d62aa4b52071e39f064a930d190b85ab327eb1a5045a8050ac538666ee765ca",
|  66|    |-  "065": "1c6c0bb2c7ecdc3be8e134f79b9de45155258c1f554ae7542dce48f5cc8d63f0",
|  67|    |-  "066": "316c0f93c7fe125865d85d6e7e7a31b79e9a46c414c45078b732080fa22ef2a3",
|  68|    |-  "067": "53f66b6783cb7552d83015df01b0d5229569fce1dd7d1856335c7244b9a3ded6",
|  69|    |-  "068": "4bf689d09a156621220881a2264dc031b2bfb181213b26d6ff2c338408cf94c3",
|  70|    |-  "069": "79555e4b891e2885525c136f8b834cc0b1e9416960b12e371111a5cb2da0479f",
|  71|    |-  "070": "08c6a7c8c06a01d2b17993ada398084b0707652bcfbd580f9173bcddf120ac2c",
|  72|    |-  "071": "63f032489227c969135c6a6571fe9b33d6970dc6eca32c2086c61a4a099c98fa",
|  73|    |-  "072": "9ef8a4249d4b8f24147ab6e9ad2536eb04f10fb886a8099e88e0e7c41cf7c616",
|  74|    |-  "073": "ae9f9c786cd0f24fe03196d5061545862d87a208580570d46e2cfb371319aa68",
|  75|    |-  "074": "b7c7470e59e2a2df1bfd0a4705488ee6fe0c5c125de15cccdfab0e00d6c03dc0",
|  76|    |-  "075": "8a426e100572b8e2ea7c1b404a1ee694699346632cf4942705c54f05162bc07a",
|  77|    |-  "076": "81c54809c3bdfc23f844fde21ae645525817b6e1bee1525270f49282888a5546",
|  78|    |-  "077": "7f2253d7e228b22a08bda1f09c516f6fead81df6536eb02fa991a34bb38d9be8",
|  79|    |-  "078": "71374036b661ac8ffe4b78c191050c3ccd1c956ca8a5f465ea1956f7ce571f63",
|  80|    |-  "079": "2df095aea1862ebfed8df7fb26e8c4a518ca1a8f604a31cfba9da991fc1d6422",
|  81|    |-  "080": "58bfe3a44f8ae452aaa6ef6267bafc3e841cfe7f9672bdfeb841d2e3a62c1587",
|  82|    |-  "081": "04bad90d08bdf11010267ec9d1c9bbb49a813194dace245868ea8140aec9a1f7",
|  83|    |-  "082": "52c42c55daea3131d5357498b8a0ddcf99d1babd16f6ccaee67cb3d0a665b772",
|  84|    |-  "083": "a825281bc5ce8fe70d66a04e96314e7de070f11fed0f78bc81e007ca7c92e8b0",
|  85|    |-  "084": "692a776beae0e92d1121fed36427c10d0860344614ead6b4760d1b7091a6ab1f",
|  86|    |-  "085": "7b2e7211fb4f4d8352c9215c591252344775c56d58b9a5ff88bda8358628ec4e",
|  87|    |-  "086": "8ffe8459134b46975acd31df13a50c51dbeacf1c19a764bf1602ba7c73ffc8fb",
|  88|    |-  "087": "cec1917df3b3ee1f43b3468596ed3042df700dc7a752fefc06c4142a2832995d",
|  89|    |-  "088": "c06356fdcaff01810e1f794263f3e44a75f28e8902a145a0d01a1fff77614722",
|  90|    |-  "089": "0df5486b7bca884d5f00c502e216f734b2865b202397f24bca25ac9b8a95ab4a",
|  91|    |-  "090": "cb69775effd93fc34ef38dfbfcdc4c593b1a3d8e7ab70c0f05d627dbc5cbd298",
|  92|    |-  "091": "327f057e054d1e6a9a1be4ac6acc4b1dedc63d8a88222396ffe98b3194067347",
|  93|    |-  "092": "538cd20a275b610698691d714b2adf4e4c321915def05667f4d25d97413ec076",
|  94|    |-  "093": "d8ed8ca27d83a63df6982905ea53b4613b9d7974edcee06f301cf43d63177f47",
|  95|    |-  "094": "d1b79281d95ce5bfa848060de4e0c80af2c3cae1ff7453cca31ff31e2d67ac14",
|  96|    |-  "095": "0a3ddcd71cf30a567070630f947ab79fc168865ba0bf112aed9b71fb4e76c32f",
|  97|    |-  "096": "9c527d233befbf357335e18e6dd5b14ef3a62e19ef34f90bd3fb9e5a2a0a0111",
|  98|    |-  "097": "f0e2911e303617c9648692ee8056beeb045d89e469315716abed47cd94a3cd56",
|  99|    |-  "098": "ededac5db280586f534cde4f69ce2c134d2360d6b5da3c3ebc400494cc016e78",
| 100|    |-  "099": "92c5fd0421c1d619cbf1bdba83a207261f2c5f764aed46db9b4d2de03b72b654",
| 101|    |-  "100": "993189cbf49fef4c913aa081f2ef44d360b84bf33d19df93fce4663ac34e9927",
| 102|    |-  "101": "e8539f8b271851cad65d551354874d3086fa9ff7b6f6a2ab9890d63f5ba16c68",
| 103|    |-  "102": "9d693eeee1d1899cbc50b6d45df953d3835acf28ee869879b45565fccc814765",
| 104|    |-  "103": "1f17277005b8d58ad32f2cbee4c482cb8c0f3687c3cfe764ec30ee99827c3b1d",
| 105|    |-  "104": "87dfcf5471e77980d098ff445701dbada0f6f7bac2fa5e43fa7685ec435040e1",
| 106|    |-  "105": "a76f4e7fa1357a955743d5c0acb2e641c50bcaf0eec27eb4aaffebb45fe12994",
| 107|    |-  "106": "197f5e68d1e83af7e40a7c7717acc6a99767bf8c53eece9253131a3790a02063",
| 108|    |-  "107": "bf13bc90121776d7de3c4c3ca4c400a4c12284c3da684b3d530113236813ce81",
| 109|    |-  "108": "3dea386e2c4a8a0633b667fdd4beacd8bb3fe27c282f886c828ad7d6b42c2d73",
| 110|    |-  "109": "735cc3e619b9a1e3ac503ba5195c43c02d968113fd3795373ca085ed7777b54d",
| 111|    |-  "110": "01b4e8163485356b46f612c9d40ed4b8602621d4d02289623e7dbb3dcbe03395",
| 112|    |-  "111": "97c1b054c094337ec1397cd5ccdf6c9efe1067ad16f531824a94eaadb3c0953b",
| 113|    |-  "112": "c99c843e0f6d6566132d97c829780332218e005efc14b633e25a5badb912d63a",
| 114|    |-  "113": "8dbc8319e5d8923ef7ab42108341ee2c32a34ffc0d19d5ae5677f1564813314a",
| 115|    |-  "114": "b3b9ebc9f9ddadb6b630eeef5d7ba724b3bb4d071b249318093eb7547949bbb9",
| 116|    |-  "115": "80c3cd40fa35f9088b8741bd8be6153de05f661cfeeb4625ffbf5f4a6c3c02c4",
| 117|    |-  "116": "a39208d7130682b772d6206acd746bc3779cc1bc0033f0a472e97993d0a32d5b",
| 118|    |-  "117": "54201fbc7a70d21c1b0acede7708f1658d8e87032ab666001e888e7887c67d50",
| 119|    |-  "118": "834e6235764ae632737ebf7cd0be66634c4fb70fe1e55e858efd260a66a0e3a9",
| 120|    |-  "119": "bcabd9609d7293a3a3f1640c2937e302fa52ff03a95c117f87f2c465817eba5e",
| 121|    |-  "120": "2bd8cabf5aecfcadde03beda142ac26c00b6ccfc59fdcb685672cd79a92f63a6",
| 122|    |-  "121": "5292478e83f6b244c7c7c5c1fe272121abdc2982f66ed11fcbc6ea7e73af124d",
| 123|    |-  "122": "6d78b19a042a64f08cc4df0d42fb91cd757829718e60e82a54e3498f03f3ef32",
| 124|    |-  "123": "057b9b6e49d03958b3f38e812d2cfdd0f500e35e537b4fa9afedd2f3444db8a2",
| 125|    |-  "124": "d251170c5287da10bffc1ac8af344e0c434ef5f649fd430fcf1049f90d45cf45",
| 126|    |-  "125": "e9b7a676dc359ffce7075886373af79e3348ddbf344502614d9940eecd0532c1",
| 127|    |-  "126": "38752ed2e711a3c001d5139cb3c945c0f780939db4ea80d68f31e6763b11cfba",
| 128|    |-  "127": "e707d9f315269a34d94d9d9fa4f8b29328e66b53447ef38419c6033e57d5d123",
| 129|    |-  "128": "5e15922fba7f61ddccb2ee579b5ec35034cc32def25ff156ae2b0a3e98c4414e",
| 130|    |-  "129": "3cc4ad1254491787f52a66e595dbb573e13ceb554c51d81e42d5490a575da070",
| 131|    |-  "130": "7a6e9899cccb6a01e05013c622422717f54853f7f2581bc3b88a78b25981da08",
| 132|    |-  "131": "4a8596a7790b5ca9e067da401c018b3206befbcf95c38121854d1a0158e7678a",
| 133|    |-  "132": "ed77e05f47f7f19f09cae9b272bfd6daa1682b426d39dcb7f473234c0c9381c5",
| 134|    |-  "133": "e456d3fec55d88653dd88c3f8bbde1f8240c8ceb7882016d19e6f329e412a4ae",
| 135|    |-  "134": "b144116982f4f0930038299efbdd56afc1528ef59047fb75bade8777309fde4b",
| 136|    |-  "135": "0709e1008834c2ca8648376ac62d74ac8df5457069cbfedf2b0776dab07a3c5b",
| 137|    |-  "136": "84692ebaa4fc17e9cfce27126b3fc5a92c1e33e1d94658de0544f8b35a597592",
| 138|    |-  "137": "6eca481578c967fb9373fe4ce7930b39d8eefe1c0c9c7cb5af241a766bd4dfbc",
| 139|    |-  "138": "1b5f0f504917592dea2e878497b0e12655366f2a7a163e0a081d785124982d2c",
| 140|    |-  "139": "0d2f26ec4004c99171fc415282ec714afa617208480b45aeb104c039dc653f5d",
| 141|    |-  "140": "78ceab5e434a86a6a6bb4f486707bffaf536ef6cb2cc5b45a90b3edd89a03283",
| 142|    |-  "141": "d74ae4b07f05779065fb038b35d85a21444ed3bed2373f51d9e22d85a16a704c",
| 143|    |-  "142": "f59af8b0b63a3d0eb580405092c1539261aec18890ea5b6d6e2d93697d67cd38",
| 144|    |-  "143": "66e9d1093f00eef9a32e704232219f462138f13c493cc0775c507cf51cb231ed",
| 145|    |-  "144": "09a1b036b82baba3177d83c27c1f7d0beacaac6de1c5fdcc9680c49f638c5fb9",
| 146|    |-  "145": "b910b9b7bf3c3f071e410e0474958931a022d20c717a298a568308250ed2b0da",
| 147|    |-  "146": "5292f0166523ea1a89c9f7f2d69064dee481a7d3c119841442cd36f03c42b657",
| 148|    |-  "147": "cdb162a8a376b1df385dac44ce7b10777c9fea049961cb303078ebbd08d70de8",
| 149|    |-  "148": "54f631973f7bc002a958b818a1e99e2fc1a91c41eafe19b9136fac9a4eb8d7b8",
| 150|    |-  "149": "c49382eb9fc41e750239ac7b209513a266e80a268c83cf4d0c79f571629bac48",
| 151|    |-  "150": "c89b0574a2e2f4a63845fe0fd9d51122d9d4149d887995051c3e53d2244bba41",
| 152|    |-  "151": "5d09e3b57ced9fd215acc96186743e422ce48900b8992c9b6c74d3e4117e4140",
| 153|    |-  "152": "c3ea99f86b2f8a74ef4145bb245155ff5f91cd856f287523481c15a1959d5fd1",
| 154|    |-  "153": "fb57f89f289ee59c36cede64d2d13828b8997766b49aa4530aabfc18ff4a4f17",
| 155|    |-  "154": "c877d90a178511a52ae2b2119e99e0b8b643cec44d5fd864bd3ef3e0d7f1f4bb",
| 156|    |-  "155": "58801bebc14c905b79c209affab74e176e2e971c1d9799a1a342ae6a3c2afbc1",
| 157|    |-  "156": "983d2222220ab7ffa243f48274f6eb82f92258445b93b23724770995575d77fe",
| 158|    |-  "157": "023344e94ad747fbc529e3e68b95e596badcc445c85c1c7c8fa590e3d492779a",
| 159|    |-  "158": "d1b58f4c07d1db5eb97785807b6d97a0d1ee1340e7dbcc7bb289f3547559f2fc",
| 160|    |-  "159": "cd3a3d2cf8973c5f2c97ebed2460784818513e7d0fee8f98f4fdcf510295e159",
| 161|    |-  "160": "3a926519b024ea9df5e7ad79d0b1c4400f78f58d07834f5ecd7be522112b676d",
| 162|    |-  "161": "2b3d09a4c76b282db1428342c82c5a55c0ab57c7a7640e0850d82021164477e9",
| 163|    |-  "162": "d50ce1ab3a25a5c5e020517092128ab3ec4a3bd5b58673b2e6cda86bcc0c48a0",
| 164|    |-  "163": "7e17ce0fca5d559f76015765c652d76b8468f9ddc91c2069d7799867b9d52769",
| 165|    |-  "164": "5c680d0b2c4dfac8aade87be60cb4d04a4c3d4db398f51e2cbf131d699b630a8",
| 166|    |-  "165": "304de2e63f91f8f74faaebae7a7ec2e0c6e0d8d322d8a747e4e3be88de2d3505",
| 167|    |-  "166": "14212843872dab188a86eb1f0f7012e1b72ea1097545f29377b3b9b52822af76",
| 168|    |-  "167": "18c18f8710f831a82eb74ae979bd36d609bee818c972ff88f8d8fa065270f951",
| 169|    |-  "168": "66640021d592f79b510f9d6101bd8eca89893187d23919c8edff4075e73ae390",
| 170|    |-  "169": "819b01e0394727fd089f84b9351243176920f03d0c6e33e5ff136016da5d8d4e",
| 171|    |-  "170": "e68fadd33a8c41d9a259577a278d8518aeb8b81c67b8cf03ccf43fc451ec8bd8",
| 172|    |-  "171": "33bf9ed4714b0e5da8828f8b3d9d3e9d0cf55c1d496324acb04a3f195252749c",
| 173|    |-  "172": "b9a27b513dc15448772cac5e914de61f02efe323f528892c0bff86d19913a6bd",
| 174|    |-  "173": "1b2a5e44fda5dfee3ce230f44fe73c672249f6620cdbaa343ba0ba808034958c",
| 175|    |-  "174": "98aabf085c6c8647f5e8a4775dc1d036513742d8e03b8c5c51e41bdfc9c3e7ae",
| 176|    |-  "175": "c03dcb22b7faf121d99542018dd10a07a778abee2678d35c03394a8d207b826b",
| 177|    |-  "176": "4fff1a7beda4291446d76e5ed5177c3f36e52a10481009fdaf2976da39e802ae",
| 178|    |-  "177": "614d3df0ba5fdffab2328eff8e9ca2d76b09bbc447c06bf1fab0419ae278fae9",
| 179|    |-  "178": "094a2ba3011118efdd9d4c1f839e6747dee8ba953b52e9012fe2977e32599375",
| 180|    |-  "179": "9f5563a5ea90ca7023f0304acba78005ee6b7351245a8a668a94dfef160f8d29",
| 181|    |-  "180": "dbef09115a57784ea4ea14c1fe35571301b0d6139bea29d1b9e0babf2c2aae05",
| 182|    |-  "181": "3920627e86db42beb1cdf61d026f9f7798082f1221db25a17fb7feb6c1d49027",
| 183|    |-  "182": "58096166bb8199abf4e07a9ef0f960065e5a635443c1937a1a3c527ade51d594",
| 184|    |-  "183": "bdf84a73b16a5dd5ece189dc970ab2c8f0cb5334c96bdd1d6ba2bad6e7f8a213",
| 185|    |-  "184": "c1e8c0f1b1eb3c258923e9daa46ef055bd79512b485c7dc73a9c5e395d5e6911",
| 186|    |-  "185": "0ea72907eb6c1120740cd80ee6b9a935cd754edcf69379328f24dfc3f09b9986",
| 187|    |-  "186": "3c0078aeae0362b6b7561518d3eb28400193fec73aab35980f138c28b6579433",
| 188|    |-  "187": "f2bc655b33e35669ee9adc841cbda98e0834083eb0657d10f7170e70081db7e0",
| 189|    |-  "188": "38e0291a3f5438779b157e5efcae6cef9db21cbac5607cd08882844cf981febd",
| 190|    |-  "189": "9b2a65ac4c35f6b392501dee2a28221a3975aac5f0866b476f5e6a5a59f3fcc2",
| 191|    |-  "190": "606fe2cb6525dabfcdab93afb594dbc8399cb967fc05f0ca93f6084d3f8fb591",
| 192|    |-  "191": "ea1977e7b22df383de61bded2a4bb3064cf17fcc0170be452330256f938b8d55",
| 193|    |-  "192": "91d614f139082168d730003f04b87135c64e13709ced2a96001ed60796867825",
| 194|    |-  "193": "65648f18a50a7f9195fe56bb8cb9e25421c6d777ad2447a3b566dc8c54f3399a",
| 195|    |-  "194": "cdd31847c6138853597261756d5e795884566220a9361217daa5ba7f87560404",
| 196|    |-  "195": "d12224510de6c98076f6289cbe342a7ec7ea3c5453f6e3cf8d37d9eea74bd07e",
| 197|    |-  "196": "1349b472d2821dff215e54d683dbfca49f0b490ade6a30b1db9667bc94e5312d",
| 198|    |-  "197": "e2aa8f7cb3ba893af8bddbffa6240e7eb71a4f4c4498f2a360f3db7b513094df",
| 199|    |-  "198": "a29d9edd0dceca9a72d2238a50dbb728846cd06594baec35a1b2c053faeab93d",
| 200|    |-  "199": "50a6b9725ef854537a554584ca74612a4d37d0ec35d85d04812c3ae730a4c8cc",
| 201|    |-  "200": "5b439098a3081d99496a7b1b2df6500ca5f66c2f170c709a57b27c6be717538a",
| 202|    |-  "201": "b4e86186652a11df0b9ec8f601c68b4823ae0bafd96357051371fde5d11a25ed",
| 203|    |-  "202": "057243f52fd25fa90a16219d945950ed5523ddb7eb6f2f361b33f8b85af25930",
| 204|    |-  "203": "2742f7af8ce9e20185e940bb4e27afc5fefe8cd7d01d7d8e16c7a5aaf3ad47aa",
| 205|    |-  "204": "15f5e9ae4636a6bf8bdd52f582774b9696b485671f4a64ab8c717166dc085205",
| 206|    |-  "205": "e03c2f4ceabf677ec502d235064a62271ce2ee91132b33f57382c4150c295784",
| 207|    |-  "206": "16bb96da8f20d738bbd735404ea148818ef5942d4d1bc4c707171f9e5e476b1e",
| 208|    |-  "207": "133fea765d0b055894d8aba573f47891c1f7f715f53edeefb200fbda758a1884",
| 209|    |-  "208": "90831cd89b4cceacaf099c9bae2452132cfa2f2b5553c651ef4948460e53d1f3",
| 210|    |-  "209": "570fab1574a3fd9aca6404083dec1c150e858e137692ee0c8011e702ec3e902f",
| 211|    |-  "210": "ae9a76ce3418c06d0eac3375a82744fb4250a2f380e723c404334d8572faead0",
| 212|    |-  "211": "aa4b2bc3a136b27bf10a858ac6a8d48f41e40f769182c444df89c5b9f0ed84e5",
| 213|    |-  "212": "81489bf56605b69cc48f0bce22615d4415b2eea882a11a33e1b317c4facba6eb",
| 214|    |-  "213": "a497e789f49b77d647de0e80cd2699acd3d384cc29c534d6609c700968124d14",
| 215|    |-  "214": "409520c6a94de382003db04a3dfee85a6dbb71324f8bd033e566e510ad47e747",
| 216|    |-  "215": "0eccb27846f417380a12dfd588a353e151b328425ecf3794c9cf7b7eec1a1110",
| 217|    |-  "216": "f735b4b441635ecded989bdc2862e35c75f5179d118d0533ae827a84ed29e81b",
| 218|    |-  "217": "9aa88ac109aefaa7ce79c7b085495863a70679058b106a5deb76b2772a531faa",
| 219|    |-  "218": "5feceb66ffc86f38d952786c6d696c79c2dbc239dd4e91b46729d73a27fb57e9",
| 220|    |-  "219": "9da1307fd12f4c9a21a34e612920cec286d937418a2d5040676408ba0c47f3d8",
| 221|    |-  "220": "a262318d02a14747ed2137c701f94248bf8651a23d1f82826952e66c25029588",
| 222|    |-  "221": "bfb4e53578fa42f83eda027da0467a351298dd65e3e8e84a987d69fc275e9f2d",
| 223|    |-  "222": "4308f4374b84e657aa7a21e5f5fe42ed16386b6dc7a74bff0d24d08ad62acd26",
| 224|    |-  "223": "3790f82f65ce7bc071b4096ca22544548b3413a755f58bfc401eff3ddf487a86",
| 225|    |-  "224": "96356c050fa66d919c75212d789544db81b012bbaf1f7915b053cb9ba2d67de7",
| 226|    |-  "225": "f37f3f2b0dc57a86dee4ba6ff855283bb4d2f0dea1c5bd1b708853444c2ffcec",
| 227|    |-  "226": "49bd28d97a79875007a6713aa9700df14464217c28a6e76bc93ded57b75a33f5",
| 228|    |-  "227": "b1f73471a3e6ea1dfb04610bd89ccb110994780084280fae872d42a2786f9131",
| 229|    |-  "228": "e38da154f6cccd06cd0001924ec2dad8de5bdcd0b78b68e8d8347768d99ac0bd",
| 230|    |-  "229": "098ffc6baaa32734053275ce38f4bbe58efe0ff946bf31e0e2df4c6a169e23d8",
| 231|    |-  "230": "2c72b887a8638941b85765645b45c5cdb73255427e14d5114f6830f847a6b861",
| 232|    |-  "231": "4aa0c92e77eeed08994650ac6129d77db9f026ae2aee78ad5c9fde132fac0505",
| 233|    |-  "232": "5f7905b71cb897bc7cc6db7e29cc38ee459e2fd8f5d58ba4746d3acd4e46d444",
| 234|    |-  "233": "8d986e287ad21475728b0dbd9e935623d69db4e5fdca0d42bc32d70eda48985b",
| 235|    |-  "234": "2d9d03b778af897e305caa8a1a14a117737bbdd549003c6d7477dd3be8331694",
| 236|    |-  "235": "7168cff545d365b09e8997bb9450343c7090913876c8f7eb9f0e9849c6fc7dd5",
| 237|    |-  "236": "ceb3002bad36c22c5da82fd422b36bad91b97a7d3f5409ed5d16aa9b42dc137a",
| 238|    |-  "237": "c857d8fa78c8fde91f29b3fbe332c2e781f7e8b54532f4c352693d6676fda2a8",
| 239|    |-  "238": "3e2edae8b8ddbcfaecd5aa6c69cb5960b84cc16f7b3232f3386aae9ecbd23f20",
| 240|    |-  "239": "49df3a63ca6509687cabb3d208e92b057630231e66b87fe8c781baabb12a55f8",
| 241|    |-  "240": "5034a21557b2de1c5c2d2aadfe8ffe62162c23f42d1aaabc705ed8519e91a3c1",
| 242|    |-  "241": "85abbe1913df41c57d1e6f00cecea416edb19c64681d1bb43fb5024e2f48d409",
| 243|    |-  "242": "4da30e6198a3d9ae6a538c2366e08ee218de6efe2c5b8f231493e21489c21a7e",
| 244|    |-  "243": "7404bb7881a010271831847e71162ee7a393843922ee93cf7cf3455a0074279c",
| 245|    |-  "244": "21aa3213adeb0a562ec7161e1cfcb5f1701303f1c9f03ed726c536283e080db6",
| 246|    |-  "245": "22b9cfa9ab97c84eb64e3478a43acd4d95b90cae8c3453c968457a89c6387a81",
| 247|    |-  "246": "729e3de7687fc597be2eb4c592d697ff29c78cff6945c9690cfb1ee67550eeed",
| 248|    |-  "247": "f49b98df95a1f826c24cf622ba4d80427a0e0767dffcc28a9206c58508863cca",
| 249|    |-  "248": "44b8116c29dafbdfa984b3751c1dfd057b3e93fc57c8cd18495f1c0f605496bc",
| 250|    |-  "249": "49e96b6ba41e88901dbd118139ef6f013b4fc59e2347058a7e726cf6a2f14067",
| 251|    |-  "250": "f0e0dc05fb555ae5ba9820586bef3bb8a3a82905ece3d8a998a3015fc91c1c3e",
| 252|    |-  "251": "8c1ece1b350c210380456da2bab70054f717731b0dfb34bc3cf4abfacf696f15",
| 253|    |-  "252": "ad20a49374f9176bd26460d35f96f30d734df3cf6fc63b4642380b4e866848de",
| 254|    |-  "253": "ba1a2bbccabbcddbf29ee0b56d0d56b4f026e8a7b97e97de2d48c133ccbdf2a1",
| 255|    |-  "254": "381a2eac64a984a81671722bd95ca5b8b6508a6f490af46780e9f393c6797223",
| 256|    |-  "255": "5e6ece13372bad4a6ea011c933389dfaefedad5860aefba2ab97fe5f59156c42",
| 257|    |-  "256": "068d4a3c845803bf66a9e5320261a0fd7b6292a8230b271a6a83f0dc8c73e907",
| 258|    |-  "257": "d80ac9215ffa7adacb22711cc88f5b580272d0d65c49e1ea48e69d17e264d91a",
| 259|    |-  "258": "256c4d399703b7f16dadef9201efc0ef9f6aa6ee05ddfa2d3e26ff6efe09704d",
| 260|    |-  "259": "275a4e84039a1596ac7e8bbe186163dcfb02bfa99c209653ff5d505a29b4cb10",
| 261|    |-  "260": "f461ff2df66653be1a2e579b1aea515d4a84f2ae5ebea3aa21fb2477a53699f4",
| 262|    |-  "261": "178ecd56cd79c7aaec1353093571ce89845130991d64c5a715a02da83a2705ab",
| 263|    |-  "262": "2e0cb5e8fc8ef04c50a5b9ab9a9eecad446598ebc2527b19c447143e5ae09736",
| 264|    |-  "263": "c870fd75ed0d5ed92ec35789c522d029f364328a16282a1c5eb9b3b7e121eff3",
| 265|    |-  "264": "da5d6bdd89eacf70a88810935f80e4725da4feaf2aa86adb13985d7d9e1c247f",
| 266|    |-  "265": "13f16351c3971c286fae5e9cfbaf6f0a128a6507804fd280971a600019e352e8",
| 267|    |-  "266": "4f39cdd293598de9259231592e99bfc5fde82a0bc1820a4c5faeb54f96037f00",
| 268|    |-  "267": "3e054d92034d3d32c3d4e7acadf1c09232e468fc2520d23d2c7d183ec0735aa3",
| 269|    |-  "268": "2d47c47a2b19178cef9e4eba1a53dd39b5f8657bbe011a71c8d402d294d50132",
| 270|    |-  "269": "4448f310ab9bff796ca70c7b7d0cd3b9c517f72744a8615112f65ba30a6d61f7",
| 271|    |-  "270": "ce71f5bd1db540762e4bc6c4798d8b7f3d2b7068e91c300fd271a46298aea2aa",
| 272|    |-  "271": "5a05e212b9b6ccf6092081f567aa73d27da399d45418f674628a8154f9182b6b",
| 273|    |-  "272": "a326c2d7121d80861aaf110826615e560aa4efdec0cc9fdfce051c6b9038e781",
| 274|    |-  "273": "d32b75411f407c5da6a9a6b4a3907b9a9ebbca6b651324c03432d549671bb837",
| 275|    |-  "274": "b5740ac928d58f53537b05ecc80b7463dc1fd5a53400f57aa55573ecbd5faa56",
| 276|    |-  "275": "e1c843ff0e97692a180e384c1a9c03c7de06ef92ccad5aa6157fabf0dbe5b804",
| 277|    |-  "276": "2edf523574e0a062cacf21f51ed6f81128537f27a3cd27b84a8b5d2478d0092d",
| 278|    |-  "277": "130c990ad499345b7638e57dce365442e2ab2d2571546aae60a9fa6ed3834b8d",
| 279|    |-  "278": "2204d89df74e664621dfe8892277d50e7774f60613561d70ae06ee0eb4c483d4",
| 280|    |-  "279": "4618456c7239784964b8fcd27155e01cf5417a16cdca7b163cc885d598ba93f4",
| 281|    |-  "280": "4b2d9501483d450371ec4413519b0b3461502aabb970fb2b07766d0a3d3a3f85",
| 282|    |-  "281": "b04a4a02fa0ae20b657dcfe3f80ef84fd446daa1521aabae006b61bb8fa5a7da",
| 283|    |-  "282": "6dab2ee10b0dc8db525aeaa2f000f3bd35580ba91e71fe92bcd120ad83cf82c5",
| 284|    |-  "283": "c964c01082a258f4c6bb66a983615686cb4ae363f4d25bd0bdad14cd628cfce8",
| 285|    |-  "284": "df960dabff27b2404555d6b83aed7a58ef9a887104d85b6d5296f1c379b28494",
| 286|    |-  "285": "087de77e5f379e7733505f196e483390596050c75dad56a999b1079ea89246ed",
| 287|    |-  "286": "8f3e5fda508a37403238471d09494dde8c206beadfa0a71381bd8c6ac93abaf4",
| 288|    |-  "287": "5d834d4c0ca68d0dca107ffe9dbaddac7fc038b0ad6ccc7ba3cfb53920236103",
| 289|    |-  "288": "20a3ef9e411065c7265deff5e9b4d398cab6f71faa134353ccea35d2b279af04",
| 290|    |-  "289": "9dda7eb623939f599551ad1d39dbf405211352ae4e65ddd87fe3e31899ca571b",
| 291|    |-  "290": "a629c35ad526f4a6c0bb42f35f3e3fa1077c34e1898eac658775072730c40d6b",
| 292|    |-  "291": "81b1e5196bec98afe72f4412cf907a2816515bad0680bd4062f2b2c715643088",
| 293|    |-  "292": "614950a1cff05f4cf403f55393ed9d7807febbae49522ef83b97e0390038ae03",
| 294|    |-  "293": "9e4067ac93c6febda554d724d453d78bf3e28a7742cdec57ee47c5c706fbe940",
| 295|    |-  "294": "9ac900bf0fbb4c3c7e26986ac33698c46c6c3e8102ab75b40b8df94fc3a0c7a1",
| 296|    |-  "295": "2fdcd631f3c68bef3c90f8679b7aef685fa33f20c2d6eb5965cd2a62267c2ffa",
| 297|    |-  "296": "dfc947e61ea2138ebe47234ba503cf5246ecec530b12e363acb240822ddf0b34",
| 298|    |-  "297": "4d5af88ba8a28b49a79773d3e6521e8731ff07d49765203b157481469e6ae6d0",
| 299|    |-  "298": "94aa77eadafaad7327acb8e653888f00e114cca2fbe04691dabdafa2a0c8cd64",
| 300|    |-  "299": "0f221ba58a8ea417e13847ef91af9ff029561ac18c74bbeeb3f5509af81a3b03",
| 301|    |-  "300": "50a79fb6e417fb4a34e155a9af683aa9a74ee922a6c156a58bfedd22cf3185c4",
| 302|    |-  "301": "eb09a0097a47e7a95b892ad7230475a1a28343b47db4faeb3e47f227aeb04738",
| 303|    |-  "302": "fcf9736fe8c20a6d02f00e9b1e719de06aff4afa99d2eba166592aeff1b8f3b7",
| 304|    |-  "303": "e6266f575c94d805a67fcd3f2391d0961b4b121b8a66afbfbae76dfc34e5c06b",
| 305|    |-  "304": "189bd2a8daf5b638ede7c50035fcf426d125de87a401382f66ab75f35b2ac1f7",
| 306|    |-  "305": "0ac58c6eb8513f4ffe911bf0f044e0153862ee89c04939fd9b294860a37ec9ce",
| 307|    |-  "306": "335998d7e2a3fae2da75a5192d62c37dd006be96831fd37e7438ec6d84451c44",
| 308|    |-  "307": "4f1f2695b1b6b1660f3ef6ac31a81630ca74da9368eafbfb214ec1980705c13c",
| 309|    |-  "308": "bc5ae127f8690ba7f6e9ddad98a49137acb45abf4e187eaf3648f197c72fbe90",
| 310|    |-  "309": "6b78ed4c4bfc942b9b5dc340961f19c690d56f9d721b6b764d1db31da53139db",
| 311|    |-  "310": "0d183ec2ff1cbc768a9eb7eb06c2a354f6c8bab00e64ca2aed2da00825f33c05",
| 312|    |-  "311": "3ae7fdad095eed78e0c63cfe4e28ab7ba2b977259590ed38722e9c44727e598b",
| 313|    |-  "312": "329d107b5743a96e3551084832587a6346e410aa89641d83f03f1242a7244473",
| 314|    |-  "313": "ecc63ee12cbe487e5390007271890b8aa5df2cf48b8e692404895d3c2af20758",
| 315|    |-  "314": "5fa65495795c52818aea910c24e4d3176c71817f5268c34e1cb259b256737352",
| 316|    |-  "315": "95bd03b9913be37d24809d30e7bfd31a1b7a127d03d65e52086857bb3a364b5d",
| 317|    |-  "316": "ca6ec6c9159e10719cd8d2cfcfaf2fe2d3637fb3d497e2c80866de6b593632e6",
| 318|    |-  "317": "5b0d72d34b406ce20714a59f1c4d5340c5559285e340497dbcad68729a9db786",
| 319|    |-  "318": "3e2b479fafb86b8ab097588b8fa12ae8a078f8b5801e15c7faa1ef23d87a631b",
| 320|    |-  "319": "e04b18947b36771937dea491f47b75fedf42a6db684035f5690e6c2bd7e6031e",
| 321|    |-  "320": "e546e4a4c9020669c78a095aa5c5038242dd78e0f98517c0e23c43aefeb58138",
| 322|    |-  "321": "3da0198df2f98a7306ee6d2e12b96ba9a6ad837a6c2d4f316d3cd8589b6af308",
| 323|    |-  "322": "07e511e9002147c33739c924c17a61126d12823d143069535a615a97f86d936f",
| 324|    |-  "323": "be514911dd6258f860c2773253f6df6c22ca975a10c4e34db5903269f2975faf",
| 325|    |-  "324": "53ed94369b59a84d003ff3155edbf481a0eef362325539d6ab1a7f370ce919c8",
| 326|    |-  "325": "43c8dc1907d3e1eb30deb565475ec1ad4f807baf6ef34178508ec85071722f0a",
| 327|    |-  "326": "b08d72606988ea5a82e0caf15e68d81b4f2e8dbb4af6a22437916f3fc53e3dea",
| 328|    |-  "327": "f70bb9cb351daf610a91a3c769d84bbb3f3b8f1169b10839196b65b8585e7c38",
| 329|    |-  "328": "6e26ed661a0add2e583229066d304f7e765a0ea337b6a93bf979e4027b70b94e",
| 330|    |-  "329": "89d8b56a1e05d90ccde0df482ff2fec3d44270739810f3c5d06856c38d801380",
| 331|    |-  "330": "2dfac8e04d08dc5eefcbba4e475164103d339f844896a75ef3af2229185118f9",
| 332|    |-  "331": "a20f9b06c126f4ee65e3f3a0bf345007b35ecb69d035dd0ad848e09300130fcb",
| 333|    |-  "332": "6593d40f4e3f53a73191c704d388c7cd1639403da6e679c8e4169b26ade19f3f",
| 334|    |-  "333": "7499bc84f6bd2211365fec34943d64f6be80a53ee2efb21c099c1c910ca29967",
| 335|    |-  "334": "f24dd99fe5b46bb7a7a30c5eff61e71cab21e05f1b03132d7da9c943f65713f6",
| 336|    |-  "335": "8e2111c24160d92b1b29dd010b8b3a0a4f9af55f1d30bd5892756c58ffaec201",
| 337|    |-  "336": "eed2e8d970c1c5031220476e6b700d16e5065d7893a2766a53600825b4ad3ae5",
| 338|    |-  "337": "44e298d1b55c51c9f127989da1149ccf6bda24c40041f777d35d5b8f192753d2",
| 339|    |-  "338": "b3a60e80296f79cfdfc02354acc674162faefcb3fb78b9672254c9cfc6eb113f",
| 340|    |-  "339": "2b55688ba27d72202632783186211ee24ea39c53915066578291fffd9db73128",
| 341|    |-  "340": "15765221271275022a6ef57634d836b052ffbab6d7d5a6899992972143841e3c",
| 342|    |-  "341": "f7340563f85e057709a2fcc71bd448fed8d6de6907d8ba5f91fefa2abffda6cf",
| 343|    |-  "342": "f252eec230c2e92ed1fa04834bc0738b79597c3b0d2a66c787fdd520e63cb3d3",
| 344|    |-  "343": "1d65c53a04f7eea94ebf76d797c0f79fe3d251bd33e5edc16c780715531b4345",
| 345|    |-  "344": "86d3fb095439bddbc0d6e6e8e433d54aff04350e2da2ad05f53d607113075c8b",
| 346|    |-  "345": "21db551743591f9cd20fffcedf3bda17f9f178bc9fbca528a56c2c61b9e7c731",
| 347|    |-  "346": "f326e2241b7e57320914aa279f9ba2e155ea77f809a188958e0b590bea9c3ada",
| 348|    |-  "347": "0fb6749b98280cc8c26950a2cb9c9dbecac18f8760e161e9bab887dcb0077653",
| 349|    |-  "348": "0cdb77330ae73fbbd0f287240f82b7547a0ef42d37004003a9c759f86b686d61",
| 350|    |-  "349": "690ad38e4357b34368966b9de08d89e0c095246bf55969842f373f1976f86062",
| 351|    |-  "350": "5b427d47f98e296cb78875619fe67d42f41868b78886d560d8fcac89043fe945",
| 352|    |-  "351": "93dcda27a0c12f0c32cc35f0de161e7f7792d11abe5d4c50d7fd5192ab8b11c0",
| 353|    |-  "352": "d01c0cd49e7649289a1f13162757de494bb9104b20ac8bdb30a4180df5225889",
| 354|    |-  "353": "3d856f38821d7b221aaaa9baa3d7927f6e360919e8f8505d7499f9bbd85c44b8",
| 355|    |-  "354": "36dd3030dec4a8050d2079678250c9c6c86c66c64fdbe7f5b82e79024bb8d5a7",
| 356|    |-  "355": "b0a915b700e415ba3acc3ef261128680b921b5df9bd6fb1d35c2d1180e7f61d7",
| 357|    |-  "356": "a309814f13708f2eb5ee8dd1a3114e8f8b15646b8c797bc7119ceaa3f6911f0e",
| 358|    |-  "357": "61c9c81a41fd294a8f07033c8373706694faab4df3652d310e84904356cf5e6c",
| 359|    |-  "358": "7d59500b8883d81040173b88462a73849e0d386a53830d599e6a042f4c1c165f",
| 360|    |-  "359": "0793805920db4896155cbce40fb58570a3cc952d0c15ee57393fa3c6ca7a8222",
| 361|    |-  "360": "ee8cacd40fb7515e510cbbe7deb6005369ce7d9800ecff897f3fd8721fd6ef71",
| 362|    |-  "361": "e96f225fa470174b4ac787b21579ad1556804de85c0c83da99a92ddc2c56c7ac",
| 363|    |-  "362": "9a4ce079c1a882a306e21e0c145dab75a2698cba3860152f03dafc802ad9006e",
| 364|    |-  "363": "258a6e6ea10385ca3c0cf08377d13ef31135bd9479d5a4983beadf158e19ccc6",
| 365|    |-  "364": "13aefde214541fab44d2a3013c532637a3da82199fb6c0a1a941c3108f76b9cf",
| 366|    |-  "365": "0cd978902035027c6898d6b5fc11fb5931f06f8e8ec9c24b4706143c91de9450",
| 367|    |-  "366": "47495a92574a6d7b150eb3f4338748ba03672ff93162139f98e03847f96551cb",
| 368|    |-  "367": "fad9203cd26fccb99f0f89fdc569c230eda46cd72ed3fb7e5f6fbcce78ced1a9",
| 369|    |-  "368": "a237e13fa6c32b66695b8c8de6472d5c93c7650989f047f62a17438c07036845",
| 370|    |-  "369": "da4c450ba0c4f76556fce54bc3f6b2a754a626cf1f87ba3280f545e023942640",
| 371|    |-  "370": "5000899cd3070e1937d42a68766c840bdb9629a49c6112bea5cff52fdb4e9f7a",
| 372|    |-  "371": "7afb55ee21c0447f7b961265abe7ccf87f59af6206949bb1da19fd36334b09df",
| 373|    |-  "372": "fcf734716ed1fa724e7228a489304e3c55e813734fb5792a83f806ab04e40485",
| 374|    |-  "373": "83c98f0431cf944440dfe0a9831275ed451b0d16856aba4100f53170c55c2e6c",
| 375|    |-  "374": "d998ea6616a5a7a9f7beb3ec02f8cbed4a9c5f17be978c31f32ac0f9f4e4460d",
| 376|    |-  "375": "6a72aba5c61e27e281235b1f001ab68b840f6e8bef0e6bbd7bfd8eec1abf844e",
| 377|    |-  "376": "980dce9435a9fc03250df4e809c2f68c48601b64c30d32c6e67bf1faa35fe274",
| 378|    |-  "377": "7b4a0b6958cf23951636b5e27af8041dd9901256c53de44c9be313ffd0a01ea0",
| 379|    |-  "378": "a1b13bda78da3ccab1af6c330d3e768fce62841f924933285e7b1f7a8b7dcd5f",
| 380|    |-  "379": "c957fcbb90e1afe9a342e95608ca035596a7dfd4cef398ada55e05a2462aba14",
| 381|    |-  "380": "b794fae83475a77832f46e69799419f9881bd774e1bfda56773b587c42591039",
| 382|    |-  "381": "e7208f3630a20b01a5e1bf5d0537be9dae9fd7529773cac12b96c4ac2b0f8dbf",
| 383|    |-  "382": "70480c0d26a6d76eba0faf3ee047d6214b2ca4d1442070ae5e79893192ffa699",
| 384|    |-  "383": "3c814d251089cb2a92a78ec3424b2a729cfbbfc6a996fd48148261312364a9a8",
| 385|    |-  "384": "f709015ae0f8ad20bd2efd94d01af3858234e381942b5b15391ff7f77211b116",
| 386|    |-  "385": "0bca6cad1f4ff336b93c9f86c4ac872bda67ee0cd41b1862a7a663852717535d",
| 387|    |-  "386": "3e1748647b60bbf292aacae65b3608ccce8e55e203a36ff062ee787cd8c14480",
| 388|    |-  "387": "cf592fa81780e727a56553df32410beba6de9c33543dd1ef1155b368ba9a9b9f",
| 389|    |-  "388": "911326fcfb0638154f69eabb87e4c0c141df09e56274c8522e9c13b7b577f00f",
| 390|    |-  "389": "cdd56fb06838a10149f2c7229bbc76f78b4a5a58945fb70a47261f1bf635c404",
| 391|    |-  "390": "07dde4848eb878808635fb7b366261b1e9cb158635e76577eecc48ccf941323f",
| 392|    |-  "391": "76cd3def1eea8e2631d333798f4d282bf40f6254b2d18c02c78cb56b33462093",
| 393|    |-  "392": "c4f7ecf21a8738c3ad0114a1ee6a2d16668e71b499741381f30827ed451dc817",
| 394|    |-  "393": "7bbc419f89fde57d2862bfb3678ddab96614693dfca109d0f444e4762a2b7a8f",
| 395|    |-  "394": "7781ca3332d6da18b1b9be5e2eff634b526ae9e8088f6e479b49d657f4f41525",
| 396|    |-  "395": "5b5de0def2c4a989a54ae3e748362c78cd018778d5adc4dec13c1bde6ffdc139",
| 397|    |-  "396": "d42c389d6abc7d8102b8cd1b906e4600da08394388d4dcd432ec955e6d8b311d",
| 398|    |-  "397": "629e23dc358ed2a8c202e1b870e270e401aecc5d726a679b542df8e6becb4200",
| 399|    |-  "398": "c30114e73097c3fa4efb203915f3b828b1b8c432ddeab2b7e1ba3fe63c50e190",
| 400|    |-  "399": "a681ef7bdb22145a3e051ecf7bfb694c18b255c80dae6fb8d49f187d28f3c58f",
| 401|    |-  "400": "c993a792804e09c9f60313f4144953eec072ca6a8a27f44d8718ce53d9429585",
| 402|    |-  "401": "074b576ae2054cd030ffcfa132b1465f8f49b836f505cd4bb01af4a98f4f5337",
| 403|    |-  "402": "d45f88fc3c00673ef7e628d867a54a4ea281b3b2620735cea85a8da3b06321df",
| 404|    |-  "403": "a09086d3cdab7d6ff8a9fba1746c5d236e0ad0abe088be99bb172e80c6f0f8f3",
| 405|    |-  "404": "55a774ac3423440dda50d73e472887195940d5e9df605b30deeb0f2528b001a4",
| 406|    |-  "405": "ee9fa61ae8153df7979be3afe6377e584fbdad624833424a5cff64f6ea94c9da",
| 407|    |-  "406": "584cba4abd5711b8f558fde97620b8ff0fe91586bad052ccff87c49c13f72555",
| 408|    |-  "407": "ac50b37409f7ea91f90856bbfa716731013deffb5f5b51540a99736e08e5378e",
| 409|    |-  "408": "2c12c3cf062c3d9cf2c53e6e4dafce70ca5c7a38c97479c3b013cd91076ecf4a",
| 410|    |-  "409": "5a55b5fb584c359f4b6ee2d21deb62923b0b25e1b4c3da0a6f351079ce657173",
| 411|    |-  "410": "9e224b6ab0b7f20759b63d1799b426a8652c9e637b1f38d3eaf8beff73c80c67",
| 412|    |-  "411": "66c0c1ab79e9887b5daf2c510f2c2c4097044b69fee6bd4ffcff73ad4816b8c7",
| 413|    |-  "412": "27f1768d99e22f8b55d010b8b7acd904e8b66751d5310d32c4d017a0ad34d650",
| 414|    |-  "413": "7c99634a1161e424a14d60b516291655096eb90ed055326325d7f5de7a44a3e7",
| 415|    |-  "414": "4e03e038e99870b1faf45a0a29d6124379d05a0a3553a11aaaa91b8ba56eac5f",
| 416|    |-  "415": "955e433ea745016af2a5df015f1cc223ddd84ddccaee60d5302b7ad61542d9e1",
| 417|    |-  "416": "8d07a87b9012a166f5bec4dcd646d5957c9b3633a1a37c40c584ede75cb7ad22",
| 418|    |-  "417": "3f738338cef45597e3b839536953104186f11d94d16877c77abd8a067c152dc3",
| 419|    |-  "418": "0c813356b30108f89fb37e8774a98af4f9eca3df49e963f985ecea82a88b1437",
| 420|    |-  "419": "8ea8d93a9e874f8c8ceeb240f1f1245a077a7c0a62287d3044feaf855b5dae78",
| 421|    |-  "420": "af7ac1e90e07f189afbb284ae24614d9e713e32098bc39bb81d6484d47351444",
| 422|    |-  "421": "f45e155846624f37cf2ee08be2a63cb1ca35bf795fb0f770b4c91ab549f22b25",
| 423|    |-  "422": "69d728f7e25055dbebd41684bc6de61be6b4db4119d7ecdcef5b5d8ead976537",
| 424|    |-  "423": "3e78c62395be704a59a3a6a65e457725105619e0a6f9f3aa6b311c4f7762b0a0",
| 425|    |-  "424": "fbd6edb36c3754a35e7de936839c4fd0564db873924ba97b35cd43e065835582",
| 426|    |-  "425": "ee5bb631b2a9edf8ed05781b192f42e24ae748f3aa4ba5e635374c094d28ddac",
| 427|    |-  "426": "3e913e088a689d2d33bc797040cea94512bf54a61f96501f60576ab22ed0304b",
| 428|    |-  "427": "415e6da4c7f92da36e2d8c43fa8056d0050ae127e648451e2fada49bf2c936d1",
| 429|    |-  "428": "389bded7b0c14212fb69b559fd1ade4f5b235b976c9655365c45481c3afda486",
| 430|    |-  "429": "3007beefa50c509b89b86c54f53757ff701f795dc5f7ed47a1520c2b092455f7",
| 431|    |-  "430": "59ec8ec2866ca502ad558ade9f8a06a9ff815a1ed649bd1cb513f417f1d4727c",
| 432|    |-  "431": "d3f28dffa4e22b3bed74c3c2c9ded1e4a8be49d3757368e4e3efaf7f79affb15",
| 433|    |-  "432": "59fd80dbc8eb4af9596e4ce8a87313d363da41313351a69ab3525faeb905c27e",
| 434|    |-  "433": "471a7ddde597fbaaaed1941f42ca1fc0f4f047e17f2197f8999dea98b38213f3",
| 435|    |-  "434": "319cb430c66d9f418aa90a3d6f9c2dfc8171383d6f4af5803a73684afcf18e15",
| 436|    |-  "435": "aa29c0119ca84133617c8bc7455afdfcf5b05a569393ff21ebcb10d32ffde2c8",
| 437|    |-  "436": "928f772ad7a9fc501f71cdef6dfe60e2d8cb5d5c5800b519d01afeae0681dd08",
| 438|    |-  "437": "ea70162a014b8294ede65af6fcdc11fb365ab2b126aef8d47983d58816fd6a54",
| 439|    |-  "438": "43633662392854b5d9f9f0fa564605212d016c9ea9377d2a6ab52137238d4191",
| 440|    |-  "439": "42f7e88fab5c9cb31d4bb34403d7958abd5023e9cf9ac05cd29626c5df763584",
| 441|    |-  "440": "cd08ef4f14b804e3106ee88f9d2b24864d5e2fec6c7cd7dddfa2713e1431375a",
| 442|    |-  "441": "daa69bac44ce5f57b4b43ab6ece3b2b3561292c0f4c6e82a506ce2973713f749",
| 443|    |-  "442": "910d2abf184cfd7b1964cec906a79f3e45f59e3d42ec20b22f56de59c9018927",
| 444|    |-  "443": "7a14ac86724d318e6d40464e710c17625d441d1e7adf83d3062305de2f85d445",
| 445|    |-  "444": "390877dded07897360921e8d0d126bf45d6a379d47292c90826d775bd1897f2f",
| 446|    |-  "445": "5ee5723341b0b81c9e0172fcb654f8b24322244bc2d1b55afcb78b180ada180b",
| 447|    |-  "446": "8b2dcb0168e8701dc9da286489a1e68e43e1b17638e5990edd882196d7fd5a29",
| 448|    |-  "447": "179af1c75faa5f42e89ce3b41496a64b2d2846361f76dd5d87f4ce97ec2bec07",
| 449|    |-  "448": "18173b14e0c0bf403b5f0d4aa23515ecf44622b3a860d80e866cd498f107123c",
| 450|    |-  "449": "22d7739bccf54ea1159ce6aca3e215482deba85a4db0676cf86d82a760c44a6c",
| 451|    |-  "450": "938bf7cdedab94bd7208b69047014e3d9ab7b54d1223bd649eb3de0bd61ab47e",
| 452|    |-  "451": "abd88e378f54b649e818d6e1d8e06c9f8cf225ac96b4085523acbb1f0c1df24b",
| 453|    |-  "452": "4119701c51dd8c457b74a19ed7ae3bdf069f5fd915c8085e9a15d909a39db036",
| 454|    |-  "453": "381ba093e8ece9e14efc965ee94bb8adbd1c0bf140875ef95f8f11050d5ed489",
| 455|    |-  "454": "b7613128b0401fdbc07a4015eb3935f6677b84dff936fc5e7e9f424d0ba1006e",
| 456|    |-  "455": "35ee11c9763f48a68f2b60b4b9c3919d3a895afc7071e8dcac5abd5845dfe79f",
| 457|    |-  "456": "8b129a3c7163dae86f1f43c18557296240a02bdac70ad29538eb5dce00e51f4d",
| 458|    |-  "457": "629c99f9af0e962f00b812057c0967861a9b6db9dd652233ac4b37f368d09206",
| 459|    |-  "458": "02df8a1d11130bde8af932dfc5cafe7d8e6c2fc12b82df5d222a91e4eed8e2f8",
| 460|    |-  "459": "062b225facc7a897e0e42e6b0f95deeb8b02de64267bf5cea4cb5280ccec1562",
| 461|    |-  "460": "a05f9a7cb049c40760ea2196eb41df1826ad492e6e5fc4696ce7bfcf7a842811",
| 462|    |-  "461": "95e5e99da04c0cd73e1818a62be3fc0de98c76d5cbdc81261672824ed5b8c1a7",
| 463|    |-  "462": "69eafed1b3d4022fc245a8416c1120bdcd039716db8cd43351a96e6c7d10691d",
| 464|    |-  "463": "018efbd353bb456112cf2c760b4d96aef02aa899ef74d4aadfb3dcf374a22987",
| 465|    |-  "464": "cd4447e836cdbed7f6a3998b50c4ab467aedaeb8e54c377da34245e90fddbe12",
| 466|    |-  "465": "da0612471988c89ea2fb190838f9f5e9029fd106330a801e66280c967ff1c52b",
| 467|    |-  "466": "8d16100c0148ed7bd41003b4a0612cbc5fa150ddabe5f9916ed6eac3fcfdefa4",
| 468|    |-  "467": "d6ea164cb91d14d6aba2d482926cb6cbd1a3644737a0530abac635083a97b8a4",
| 469|    |-  "468": "8d0e3f6bff322ff11d1267f1f8303a8ce1e2d796b7dc2d9eb3e3da939dd850b5",
| 470|    |-  "469": "35e2072f22c7cb980fbe797e30c25e9224328813eb81d07d3c88820492ce9a1f",
| 471|    |-  "470": "4993f275946ae0d444410821faa3ef4a448f10888c50ff59f7ae01d0b50328d9",
| 472|    |-  "471": "b9af9323a0237fbf88fdb14b8bce95c084351325249629ffd4fbb32fe9d6da5d",
| 473|    |-  "472": "5b278c08ab97d82c1779411fb1018b07feac7ddf38a69e4d398240a495c54271",
| 474|    |-  "473": "4448b03417a784f554c44eb15ad2d4cc022bd9cb5abe2547811eb8085355aaaa",
| 475|    |-  "474": "1c64fc4076d6b00aff86a180fd9af927b7c1c9ba87a2ca3c83dd80ba5e5ea973",
| 476|    |-  "475": "e571b4b8218a2961ed2b04f62f816eb18686d82b7f2693694b9c774acef4a0ff",
| 477|    |-  "476": "a6383ed918d7851ed7503921a64201a032a33c9e1cbd4e08d1233f543bd21be9",
| 478|    |-  "477": "c871da03e684e099190c4ce787a9588ae85841246ad7bcc9cb4c302d617f881d",
| 479|    |-  "478": "96d8bec6b787a7aea2da8dfa8a1226e00881afc218c211fc59da830775d55acb",
| 480|    |-  "479": "b35720df96afbd98c6a4f081ae1173fdce21d63f75f7b455f4c2b9fc0aa672c2",
| 481|    |-  "480": "2db876e9625c8638c66103ad0206c9a51b68d4c6a3222f403b195a81837856e3",
| 482|    |-  "481": "bac35824e79af403a2058b08cbc84f8e4df93a21d1766e4ea1de6414e2a8a926",
| 483|    |-  "482": "0f9797e2f3691bc7291d81d1ddd5d88cb4e10b0be555e2ebfbd3c5b12b7cd2b2",
| 484|    |-  "483": "8f3348df383ec9ee00e18d41c419370d42ca6ebf71c510690aa5435a679b7e4f",
| 485|    |-  "484": "3b3bac32669c5b66faaa42b89a2dcb4de0bb9aa0bd279d60061dbe9e7039f5dc",
| 486|    |-  "485": "25d0335a0576f974617351ef5aec889f311fc8d7cddb997862b10b2496842d4d",
| 487|    |-  "486": "93b9a59a937594d2196271416ea3b2221d32b3b40a04bbebbdf97e8bdc557e0a",
| 488|    |-  "487": "a643c75a8d062b87a1c8635fdf439c04d949ce01f75dde10ab6edba90cbaee77",
| 489|    |-  "488": "984593c12abbff5d009091cd3c1883c87efc535f760727ed12f06df0902bfa75",
| 490|    |-  "489": "926ac61244f94e10270a2d40169de025be6db342b3de7f0db33a50b07176c143",
| 491|    |-  "490": "e2c8142e501b0b0b808d2d36f5f38266f99cd3aaca7d2f70f4bba386ae1d2025",
| 492|    |-  "491": "1a1c8b472424f8057c94a9f5e0c0b673551fbe9ea4cde5ca2d90df1de76a5c76",
| 493|    |-  "492": "345a83966ead821efa2a9de93aeb0fd5bd60a8f50e162caae2447f1f4d9462bd",
| 494|    |-  "493": "ee7018d63b08bc7226d6f77c2345a87e09fc7cc87b0a003aaf3a4a3f622edffd",
| 495|    |-  "494": "3d69e540997d79f21f249d4d8f73cd75119d81bcfb8bd80782863249f0d7c62c",
| 496|    |-  "495": "b717f1088b0ce24851c30d54bc8dad9f3ae93402b91c874e385e5c699323a5e2",
| 497|    |-  "496": "fbe77ec1978ad86e73e5a3f494fa7c198fe334b511298f5a0f2d04d6a7f51d01",
| 498|    |-  "497": "a4a66d6c7c555a2997ca59a8dbab512388adf20902293a5617132a16df76d954",
| 499|    |-  "498": "d71813b8175fa2d70181d87ae8f839e79792516a1cfa99a7e6b29500c057617f",
| 500|    |-  "499": "477d5b817df8c0b6f0928d02a58fc39fde2224493cec89393bd6dc349e5235bf",
| 501|    |-  "500": "3ac8e26d4864c538936efa7c5920435107a50c01306adaee5a4aeaa2ef378f7d",
| 502|    |-  "501": "766448b05b248ac3d6e991baa3e4b2d53b02aac426bda312c2299b2b983e145e",
| 503|    |-  "502": "50218b55f5b7207438137f2b0c71e3f6d37afd76aa5b1f2106111f3432b4cef8",
| 504|    |-  "503": "1d7c24799a287d42e97dd4ccc5bbd3713ce139e6294896cc5fe2efb80a1be7ad",
| 505|    |-  "504": "9878db5eb2218b18568dc8cfa13bc8363a1c93e6a59a05cc76da0588fd54af46",
| 506|    |-  "505": "872fc20275833f09c8aaef277abfe77f67be6bd443b489e0cb8bdf9d4ca9fac7",
| 507|    |-  "506": "d66834cc7ebe58cce2ee1c02bb11ae69672d711ead6a0a58ab592339cddbf02e",
| 508|    |-  "507": "ae955394665befbbc89e2ba85b5e520cb293b8d03209b1f71d78ce2cc807a437",
| 509|    |-  "508": "3917ce4173af47bfaf8525f0917736bde3f4bee0ed5fae721c3e2fa957ab1675",
| 510|    |-  "509": "2f64571cd71f0e59006da84808abf3d3ccff9a38884321533d448b3e8e3cae05",
| 511|    |-  "510": "41ce72f4701e786427413b68fb70bd77d921c06648ca15033ce1926a9f1224cb",
| 512|    |-  "511": "c9fc787389265492e60d5503f279714d5b19760ea7b2e1a720e6fc0251fe087c",
| 513|    |-  "512": "a8af6acf3744af13cde63540e37bb9bc722ea19a012656e3a3c5bfff8292c423",
| 514|    |-  "513": "506b90816555d1083be7d211f02a5db364e5c2337fc85b1ba845c1a806689373",
| 515|    |-  "514": "e4e9536766181eda627721723bfbdbca85859a3ba92d439f58ac0009c102430c",
| 516|    |-  "515": "16daaa62fa87776bc4843d226988cc83ee846ceef7b885ab63e10789b30071ae",
| 517|    |-  "516": "44b6de4eb51dd8f762142f284b154d3153592549cdea3b94467fa95484a4f172",
| 518|    |-  "517": "bb72c6d437197a8c1f1132626b3b47adb9827f4f9b912d1069cfcc75575371b5",
| 519|    |-  "518": "ff57c1f518651af805bb4b258130c7c5b0726422c3390327217562088785b4ba",
| 520|    |-  "519": "159b59f1261b7a31d7172cdc28d9515d0731e5117cb30f34a497bc3bd0496da2",
| 521|    |-  "520": "bdfb7f17c8c841c0b61ee7f00e51f09e4c78c90f7977548b72050a7aa12dfa3f",
| 522|    |-  "521": "bd27ca9292c19160cbb0568f750b247fbb805b85f4a2316fcf2c3a35d3ae031d",
| 523|    |-  "522": "98e0ef155297aac8a4060d204614753f26f6ba5357deb78c683783dc7ae30191",
| 524|    |-  "523": "9bfc344c80d1200fe12bea3ba4cacf8d5ac9693258962f2f15f42b30ce8ef3ef",
| 525|    |-  "524": "8df22d8716d7ca6354ea42b8e522d286ff9362cfa5881f527efcf1a953ed1151",
| 526|    |-  "525": "13dc6d869fbe2c3d95f715e55f02bc3d5787874b4c88d7da1d05360afd2025fa",
| 527|    |-  "526": "dfbe442040ce9afba654773fb14f307d67ab614267d3feb6b18df03182b5b60f",
| 528|    |-  "527": "ba634833af68fcf0ca7bcb08fa699b2c5fab934eb81ecd85e7464b01bca131ca",
| 529|    |-  "528": "016f7b569dc1c3466c97754c7dcc0f76c2a32a76c22357cc521bcc330d86daf5",
| 530|    |-  "529": "4960ff863e3d21a58f9e81c3d94075cb7a4daea5fcf396812382111e462fc57f",
| 531|    |-  "530": "6a2e45fdfcad65e0ee84d206d59cbac998026d7415d16a5c0b8c55e4a7d6bb3f",
| 532|    |-  "531": "95ec72fa8c409255d43e7c8d4e957bcb9239534973187b3b4cc2557b09bdba98",
| 533|    |-  "532": "fee6802490757983c499a08831d9bdc75a9eff08700bd29e8e5c134583ee07b3",
| 534|    |-  "533": "8a056666bd75d853a12d22b8317042a3f5500cfb21f6698d90ab41e01edcf81d",
| 535|    |-  "534": "8f65c9feb935e09a04c87143d1b2c63e38f08738199ebcc2758f67ee914d8a48",
| 536|    |-  "535": "ed8970f8ef1e2374289fc735aedff90b010c311a3b80d16df6bca2d3c250fdeb",
| 537|    |-  "536": "f82635851b442ec0ee95c5c2b7377ba382aa364cc49ff4e981d509ef324bb356",
| 538|    |-  "537": "54fc97bb6f3d7c724d4e245df37111c20334972300297fe38b590354fb9dfe92",
| 539|    |-  "538": "650c7f5f382c295cf6e7fb092db6fdfff164c861bcfcfe1fb38a50268f53f50a",
| 540|    |-  "539": "0bfb3df290912d8a70dc5e1e2761151cdf2c4b75d4b37c8fdcbed7483ada85fd",
| 541|    |-  "540": "08f1b2bffa88a9d01eecb8c9da6636b5e668a5478d8876a63ec3a74d7f932205",
| 542|    |-  "541": "5e59cf440336e86b67c17ed61f7bee7e548c434f475c415294b3b652d1aec606",
| 543|    |-  "542": "1257b6a3ad900df97f5aabc1e18b9f7ddae8c7d7ad60216ae21b5b7310cbda84",
| 544|    |-  "543": "8a783bfbe11c7f7b24431a15a0eb582f6fe5f75d1d21a3d55f8d8d81ba6b411c",
| 545|    |-  "544": "ce93bedef94ffbf62ad449cb0c68e8103a0bd005563ab854daa5e470664b4d7b",
| 546|    |-  "545": "40c253003d601fd2c90908bffcd8133e77489fe247e74ec03901895318fe69de",
| 547|    |-  "546": "d40739115f18fee96817266232ff1b8845e7966778fdcc644028fe5c759469be",
| 548|    |-  "547": "fa32a8de8fdcfc551d808c5dd0ff5545a199027acd32e380959b91f3b3d04643",
| 549|    |-  "548": "72e66168068b6ffcd2988e24124c8b1dba9a5b52a383a937397575e3c1e3f031",
| 550|    |-  "549": "a23baaa745a976b4f212836beb81a0a7b42d9f2e923c2412e2c07c63ff660ceb",
| 551|    |-  "550": "f58ff320639b2c47c76ed8aba487e31da0fd4656c3be6e33807cd00f77456e5d",
| 552|    |-  "551": "0449ec4d6d5b2e88603e62f3ec0287ed711cff682bbdfe298a197144ab24e80b",
| 553|    |-  "552": "f125761e8a0d02b17b1dc4be40216f2791727fd4e4bc56f60ebea1925c2fbf36",
| 554|    |-  "553": "dbb93b2a6cbf972bb1f94d1f8656cd113a09a02cbc44f25737e7d75c986646e1",
| 555|    |-  "554": "dcfd1e7a4a32ff0fae296b8211b5c9e91ab81844a0308933f598c712c1bc313d",
| 556|    |-  "555": "cebbca914f917f990202f110e77285132d2a5a3ba9a7475c93e3561d8ba88ea0",
| 557|    |-  "556": "0d5518ef165979b758fcc8df9c8cf536861f376f8640541ba6112ee7610ed82e",
| 558|    |-  "557": "0547c86b57c7c8c590f6d7a5131778f5b6ab2eeccc5e819e5fd095a6d4e68b08",
| 559|    |-  "558": "e763aa1dd494e097251484381ddb057c7d79b739c3f8644b1759e786e12f5b40",
| 560|    |-  "559": "e48eea4c3b4c9d58fe02739accf31bb64dd9c31623ad4cc06c740463d664c098",
| 561|    |-  "560": "77a09dc1ea6f1ae669004b8c9429dd83ead1148c62e0d945173edac45d9000a4",
| 562|    |-  "561": "756d226727e611d4bd22aa33747da2f635eeec070906dbc3262ef29e341e2a6d",
| 563|    |-  "562": "29de450d6e440c528287b98bcb4b76fb5155ab573df4721467446114661936ed",
| 564|    |-  "563": "7703d943dbbfdccb90acad65ed7c0eb13a10034ad01809472a55eb3162b7e53b",
| 565|    |-  "564": "65712c105411e6fc0ed35b9347de8cbaea33b0c5e57cf162f48dc257dd4f05b5",
| 566|    |-  "565": "2945ef4779089c9e49a9a9f5e2a67ba7e393aa20a955ed9302da6677cb03a9cd",
| 567|    |-  "566": "95d936e1d454df2e1e7d486c43af387b39a50cb57e57c7712d967bc9ec556f41",
| 568|    |-  "567": "2abe8af9ee20c6b8ad5034bc31fc1f4f16769595d5b4fc2837db3e76a90ac405",
| 569|    |-  "568": "fdc104338866e50ae2bffc1ea19719136f639df6c25f38a8680a70e9375a9378",
| 570|    |-  "569": "25677266de2b900788dfa047cb53f5585c37b564b3a711243fad52e186ec184a",
| 571|    |-  "570": "9101edb48d98c3742ceb713de591d261b79e90481d28f83f2d2c74d7034f4b46",
| 572|    |-  "571": "c364dde8cce2080d073eb1f9666cca97ccdeba61b2bf19ca0c84987e6f8d3576",
| 573|    |-  "572": "9cc3049e9464376b95fb88d6fff4331e0e40196f92a0a9aa1c5d10dfe33079f7",
| 574|    |-  "573": "2ade73491e183608b340f312d08cfd39c10ecb581c87b873443590452580a43e",
| 575|    |-  "574": "96325b210d18a7a1d6873e00a859648c4754bd4c91c324aa812ed78bd047118b",
| 576|    |-  "575": "33942a261a9150e2b5ce2ffe5b934a81f3972cf5aa5a9414a9d5f63f6b55324b",
| 577|    |-  "576": "7fca01a835681914b5fe5014d5649b5170faf459375ccc2bf9ad71ebaa73940c",
| 578|    |-  "577": "2bdc7a0e8adacf885c6ea0f6534b935b8a9dd338c5dcff05a74c162c3e9dd531",
| 579|    |-  "578": "ce6b6de1d907c8839b84f5f3967f6af7e9a3644a0bd7dffe80cfe531de08f8ca",
| 580|    |-  "579": "03dbff2575902a3c56a64483c8e8ca38d9888f72c6a71a6236eb07b808fb24ab",
| 581|    |-  "580": "96892003c30358ed55a39e13e6159fad09ebc3916e34492b91d63832fa86f731",
| 582|    |-  "581": "4fc5533c52133e54f8b54dcbfc4555638ae809676dbfec9d1400ab032f30648d",
| 583|    |-  "582": "7ba9b154acf699c8a123df5471fd40ad556cf6fc630136c686c87b09c88ff546",
| 584|    |-  "583": "ec10ea6801eadac9ae8ead5f222e0580f419b67d2ad5cd5c8ac914dcf5cfd69f",
| 585|    |-  "584": "510001c4104c80517a13f967df6ee071f15fb7b65e97229bc91b2925cbe4e93e",
| 586|    |-  "585": "ced737da53940337c5dff81720024fbaf4cee38aed1d3514d2a75c7b1271acf8",
| 587|    |-  "586": "9ab074d1d480d718930c9abac8b616a0bc5c30846381d6d9bce1741e9bca1991",
| 588|    |-  "587": "ec3fdcd8136188e3b476270894351cdc05dc44a4df50d1c4ed727294fb89430f",
| 589|    |-  "588": "31400607f95129fcc531604b7b0478a748d2495746280dc07ff30e39cd6f4a97",
| 590|    |-  "589": "3051de9b2a7ced941140aa1074952029f532e133beb41c18bfd990f43bfbd9ae",
| 591|    |-  "590": "4af295f83800334d77a04d56be7524ff6241e3d8b2f23820c9c54580b7996086",
| 592|    |-  "591": "2ecf2c1ab8d9e5cef5224842732af17bd2259598e4363e1d46cb172dccc39022",
| 593|    |-  "592": "2e71a26370d45781f31ede0c7810c2705706ce63291a52d5cd6f060ae16aeb01",
| 594|    |-  "593": "423867f77b64f725f823204796301ae09b427190cdbb62d472bc1395507da9a2",
| 595|    |-  "594": "6c28830e35913c59000dfce4432db255f7dd34809285881f05a9e9749f5d8452",
| 596|    |-  "595": "53fc00ae32e0b0d701175ac17ac0b91e05859ae6d7f3e5bf0548dad36e3d68f9",
| 597|    |-  "596": "9ccbee33387383d458e7ffa2c9c0cb9e4f5bbe3d1b949463a98232ae67d29956",
| 598|    |-  "597": "921102754e24e8ba99480e77652d88764020202e6dcd67adddbb1660204e8e78",
| 599|    |-  "598": "430f975f490ce37df74bc346556cb2186f7a47a58d3b282ab42f35b33a812f7c",
| 600|    |-  "599": "b603988248769444a1566b058ef3660cac528086b8193efd6d0be4080b834780",
| 601|    |-  "600": "dd539cd38fade63aa0d14899c7c75ff459ab839148b15b4efacd4bdfa0408dae",
| 602|    |-  "601": "571c5ade4cd89b460b7d2568a44d1efb05e2927ec840d8ecf149dc9e0ff09734",
| 603|    |-  "602": "edef32d6c2c7193b4b30a0e2c7d3ab37e0ec21db62543f4bf78169b683792e41",
| 604|    |-  "603": "cce7491b7ddf0e3ebde191e0e57614e61602cfaa2b52be5c2d657d9ae5e1f1b1",
| 605|    |-  "604": "d08fe0e5c0fc10640043f9d645446e23fa8efbfdf29c93c87794e5b6405ff51e",
| 606|    |-  "605": "1bdd74af73e2434db6149fd8089bd294defe3cedfaaf92f532568ddc6c48e2ea",
| 607|    |-  "606": "30e44b49f18048323d1c1bf4631587df8f0dbd477ebc79b7ef860a792953d932",
| 608|    |-  "607": "2d9b6a1b4810a39471e5dae85eadf595fc108097eeda746c8925a7be057464de",
| 609|    |-  "608": "cd3fdc5ee5b6e606349b9e5775d6e632e0424d6190f632632bd7435d5622b20d",
| 610|    |-  "609": "8b86933e27e64e6840bedc8087fa31326d9527a424c63ecc61823894c81f867d",
| 611|    |-  "610": "a781fd7cb6970e8f6f679296be5bb0fe7ea62207caa7ce86635257186a5a70d9",
| 612|    |-  "611": "4a3a0b9877d68deb8d7db624ec2d7f4b1c467fe337f803a220292ac6131acc05",
| 613|    |-  "612": "6e95bb170c3a521fc7befa446cad879a36b7b3d0e0e8eab1df6ddbd753156ab7",
| 614|    |-  "613": "afe8c7002c5e15859be829b4b69f0da00c1298971d5afa469b050016fc021978",
| 615|    |-  "614": "f85495a58ad9d5c4d16167084bbc3581ea22e6dfc39423b70d7fe486e316d951",
| 616|    |-  "615": "8da9fc3356df220081c71ccfc9c67251e6dd7058fb11258ecfc88ea9b8c00c92",
| 617|    |-  "616": "0fadf4975e2c27aae12447e080505d604258102f61c8667a5c2594ee033567e8",
| 618|    |-  "617": "06d9e8723de7ffd20129f1d8b5993926a97cad1261dc0cf01a37d8fa728ee996",
| 619|    |-  "618": "04d0dc62694f26c61871d8129259540884ad2296a3cf455f6b92fc911f98c336",
| 620|    |-  "619": "a93d0ec83cbbd4ec0866c97b372e4374a9d6724cc3767f5230e8316734cbb0eb",
| 621|    |-  "620": "071da5dc1dd87c2558b45247c29a92092bc5a00ef3cd46d70d08e18b791d2926",
| 622|    |-  "621": "458ca388a6b74c57ae13d1233984d5b66abb1f18dbfa12aa14ba868a9b5a708d",
| 623|    |-  "622": "1ad0227dc5f8c259ada5120d9db05ac7a013bd1bd84cbbca2f0ae6b174dac129",
| 624|    |-  "623": "d82d0401e10767b022417dbb64d348bc6c03ed4bb7e4553493e8d9e65525d229",
| 625|    |-  "624": "1d25005c86a9635d3483ea63ce95fa097f95792ebab86319c12bc66ea1d2ac83",
| 626|    |-  "625": "3fc397ed884cabc16bf30bb7487c8211424a08279a166d4fa4da6dc151a02cd1",
| 627|    |-  "626": "7c42e09e504cb269512dae989ee7fffe1f3bfea499c990e8edea796761331ccb",
| 628|    |-  "627": "5062b75aa39c974a579b0a3360c4da32e481d2242de72106f651c7d7de631cf1",
| 629|    |-  "628": "dc656eef13928f18d14a9265be6a923bc7d76048b861cdf1523e397801a8ef52",
| 630|    |-  "629": "9eefedc5b5995658be337f48146e37020db4ed3bb61e2af1fc57f698bd398b0d",
| 631|    |-  "630": "6e17ecc4a4d07ffbd67c49a59d31b7efeabd3bfead49fdf1ec005836e6030ebf",
| 632|    |-  "631": "781372694518c122f62566aec8867772e492fefef32c00e24b5604297dc1d44c",
| 633|    |-  "632": "c978055ae1d71dfdfd8bb4e845bb82fc4211b14560bf6001edefa4367e1d4403",
| 634|    |-  "633": "af4ff4b546369974642b3f68d4d3e90f0a0496b3b5d1572b638378fb49c7b4fa",
| 635|    |-  "634": "f6af89331ee087a2fc03e0bddd738e2716b49ed616ceb3b47743cf3806c6d8c2",
| 636|    |-  "635": "e4251ea6989571d8b83993560b537b7a9d0777ba54e6941757580cbfc14aab5f",
| 637|    |-  "636": "dc15b5ccabd8fd3141c244b7dbc6fe95078299ea3ce3016cbb483893fcdd4236",
| 638|    |-  "637": "053571be83ed06ab23a96d4e8fa129a4ce7e740de17dc35b000fb56c35a5ab80",
| 639|    |-  "638": "df57e1f418a24e38b39011048084c6b5cc91a56c1deb643ab605e0350f329b4b",
| 640|    |-  "639": "56930902baea90d1a8e505a227e5d7ac4da6b60f6c370ab75a0011cb3746818f",
| 641|    |-  "640": "c105d171242fa8e35f26491ba2f932d1577dfab2a4a6e75034ae69f062e8aa71",
| 642|    |-  "641": "0f6c3873a87ce630accf7f3b19feb764aac3fa0c3933042a817a82e6a9963aea",
| 643|    |-  "642": "c20081830b70a00d1bcc6f4b6572d511d534986c10ea3c057db304a1f26df2da",
| 644|    |-  "643": "143de023a92c7c8ce5fc0b839644e897267c44c8ba4e715743dc99686415a8b5",
| 645|    |-  "644": "7a8c9f1db1b1bce9a3b8d91e5b1a39a92a478029d975f5e45d593b7ca81a7134",
| 646|    |-  "645": "932a51e4c0cc5e30041ca5db1fd0674820638563a9df1300bece7df12c23017e",
| 647|    |-  "646": "a49cbd2966ea8248816b0a53b6eedea4aef2525aac45272b862d7d52e604625a",
| 648|    |-  "647": "40ad98735f3b5417ea1916f6146b69b7659963263caed186abf0790de0d9dae9",
| 649|    |-  "648": "53b288529a83c376f2399e986e5ca25c5993a6640063386fdb2de491afba2e81",
| 650|    |-  "649": "c0bebda0473186148087feb9828a418ab8d50726a1ff5c39ec69c4a6232c6b67",
| 651|    |-  "650": "98ac68d2bc42f89dbe97b3392ac691ed6c2c4f36a44665555bf7f816ca97cd27",
| 652|    |-  "651": "81f8287532f504b4f4a21e6d6ed573845bff197c479fb52e4c5b6f2fc1cfc40f",
| 653|    |-  "652": "fa32d8e7c1c766a6126b0f1cdd9d752cad55f54d0c05839e89d4da238615d9ed",
| 654|    |-  "653": "311cec39a42837f803ce8cfa5e6df32cc27fe541de108e3e7cf7ba3242e414ee",
| 655|    |-  "654": "f2b3d205c2da66cdf9a596e2caa1098132b832758eea2b14da071b8dd9584ec9",
| 656|    |-  "655": "39517ea688972769cccd46ad15b4f06ac2a6175d053dc97f849fa11a63a163e8",
| 657|    |-  "656": "2a21e5e89d9b019c1195c50af7c6e1864cbab05068d10e11519fb6d4766ceae5",
| 658|    |-  "657": "bbf54db41dc18753a3caa5001aae99c0c998e8a07b6e7390932054d7882498e3",
| 659|    |-  "658": "ca8e7b53b095939e5fafefa56e9b45b40c396145acf2a767f9f2430fbba75a79",
| 660|    |-  "659": "3d6c8492fbfe1c76e3f9d66485a7447489b89763623127deb6ed327a0c2a011b",
| 661|    |-  "660": "23d754ebe35981ad5de850f66bb2294a22280a8ad0b4160b1c29dfb5487505d9",
| 662|    |-  "661": "fd7eaca9690ee0384770e855ed600c96080c5c23565bfdae01c6045a87d9550a",
| 663|    |-  "662": "b93bc0a52860ee0a1fdc28adeca7b39288b1119e0f318467f0a193236e00f99c",
| 664|    |-  "663": "f73e3335b21c11b78987deb5a6eace1cef327981322f53a070adfbe31b56e7d0",
| 665|    |-  "664": "f3f0de955603850bd411690d11a5391e63f515a29e31e9241c66c62d688bcf72",
| 666|    |-  "665": "f2650e75f39098e5a114077b6e07bc15325adce22e1ab4b20569a4eeda5c6ca6",
| 667|    |-  "666": "a01a34d1c29aff5618a96046605adb74fa49b834975051d4ac82672567727a21",
| 668|    |-  "667": "2db51646a4038b38c88512738f79bb21776d39c7bfa3086538cccba0b63024db",
| 669|    |-  "668": "2f3336b7f1211fcc180cd76dc6442fecb412771aa45ef1a7675aa437d04e582b",
| 670|    |-  "669": "28bf022d827392eff1ec8ec121767ec24778f1b69da8605b4ab059023b8ad28a",
| 671|    |-  "670": "38db5dbb2a3ce2d31d1958f5b3ca4c3555eb0ac4193ebffa3f42ffd6bb4806e3",
| 672|    |-  "671": "0580cf2ef8abd3afbf91fba2032c2d51e43306bebb7f979bb750c3d7bd14c961",
| 673|    |-  "672": "394f1b74ccfac5a4fa958d813b5932371c5f8c2f3dbd1eb7202af2223aa08afb",
| 674|    |-  "673": "61c90400cd197b8ea6d7de90fcd1af0959fc37625fe163363fdae0ac4a724bfd",
| 675|    |-  "674": "6037c38f696b10fb531c26396890cd3b48d5408c5b37e61d03a72ae2f7b64ed6",
| 676|    |-  "675": "39c8b1bd1d534381b811bd8050e54b753106c1bfaf5d3cc63d8fe92a94471915",
| 677|    |-  "676": "346d1e2de9915fa2f4ce3675ccebadccb8e9d14239f1e53b6d08d09f5c26297d",
| 678|    |-  "677": "36841bba8f77d669e9d8f4e09ec580ce2c7a36c37da719815e65cc641eb1fdeb",
| 679|    |-  "678": "09532ddbaffb710f02964e270f8658bd8a09149744726a82f618708b35a5fa26",
| 680|    |-  "679": "774f8d6f89a5875342b21e8337aa5e3ab0539960a5b42554bc8d8a0fffce7d65",
| 681|    |-  "680": "48d62baa62c2a9c561612192ec39a7dbcecc8badadc0ddc755191648597a42f9",
| 682|    |-  "681": "7adc09dd86f3e73979d9f8a4b3232102ca52bc41d043614fe989cd908ed88c76",
| 683|    |-  "682": "522f0ff3ae2f1761dca78207dec1c9b52556eba2db7503ca03441abf62f65c76",
| 684|    |-  "683": "376e3c3e4b88ee76cb0f02390751a7248fcf1562013b1390b1e276a3f3d7da63",
| 685|    |-  "684": "6363f306f081683781908acd4bedd92b3a75c796243cdacadc4b9896d8cfaaaa",
| 686|    |-  "685": "29f2c4c5325cf626b392a910e6e22b6d2a989bfbb38439c20162b7b786b5e2f8",
| 687|    |-  "686": "990ae3583a1f7a32b7581a8ace626511c812e0bd910b8064fefb31e625b9c22d",
| 688|    |-  "687": "7e78b4b91851b976f5cc2a1341b9389ae7bdd0248ae7f7c53e7ebb2d86bbc73c",
| 689|    |-  "688": "1ada92e769892b4bb540d75cbf40017a24b5b309b28a097ed62eb7f2727518e7",
| 690|    |-  "689": "17a0ba5b100d0a92f3f82e2e6f31c71a6ca53a0f043094a6419331e22036150b",
| 691|    |-  "690": "f9658a8f0687d69f420f655c500304c3c0888f298a68075ab6a2165a3bc47c53",
| 692|    |-  "691": "3ff8aa53eb2f7e700fdc7cb838ca7f7b495948bb997ef70d196c10592fa64680",
| 693|    |-  "692": "c01c3e579b2743866cd3d0c1d9039871356143a99c572593d2702f387e9f629f",
| 694|    |-  "693": "c08e2dd3686459c2989cd6a367d2cc64b2bc2af460417102e9856e91b5f78fa4",
| 695|    |-  "694": "063e59bfd9cbed08afa508954ac9c1c313b80331d6a917fd2202e15e1eeb00e9",
| 696|    |-  "695": "c3259eeed96a5837a6630fd9d1245de7c77e10d0733b6129a3dc99548bd92800",
| 697|    |-  "696": "9ab20a4d8c3c0de897a1c8afa95733d0f7f79870c6379064ef4cf1f5baae67e6",
| 698|    |-  "697": "62c07adf4da24a20a723f6c32e35a51f2b942e363dc9fa35070e34991a5a9c1d",
| 699|    |-  "698": "632f1a4eba12f5c80401d82c4bad7c5679f55ccc89bf2da3e3930ff3d6671ba1",
| 700|    |-  "699": "8c40c5c92fad7ed2774080ddd39f62cdc94ca05dde4273344497ab4206499484",
| 701|    |-  "700": "3dccee8e873d2c9c2f8359417e666b702f97b60b90b229e3c41190909ff9388b",
| 702|    |-  "701": "65a57fc7ebcdab77821276a1eba1c1a625bf2bae575b025359de492592ded205",
| 703|    |-  "702": "c1b0ade78aadbf0d5576489c2200439ef825fe74452115edbc908e9ff955efc0",
| 704|    |-  "703": "1e5ea7fffdcdbca5fc91694b200db8e2e3737e829b7694e4dcf3b937b41be330",
| 705|    |-  "704": "9ddf38880f294ac1a759c764c394cacd4635735880f326a0b5e4a896e4fdce8c",
| 706|    |-  "705": "2bb033d9eeb9157fc6ae835e99b9523bfb1d61173cfb34941cbfdc4c0d3ea67e",
| 707|    |-  "706": "51a0e8daacbd6537efd583c48c5815a9bd22fef0eb9b8e15dbe2ee87c76e2a6b",
| 708|    |-  "707": "9f50d3b52dc4ebae279c6f6021258ca8cd60b8cd13e358f29a2879caa390a774",
| 709|    |-  "708": "42e0a9be7737aaab1fd27543c0273f4c97dd3bd6471e6ec04b1fc7b79542db71",
| 710|    |-  "709": "ac2605c16873ea2b5f0ce5008089a55e37588f45313ad06ccc7dfd96f407eb8a",
| 711|    |-  "710": "09214942caed4184e7155b4016b1e0de37c0a142deaebee3879c770438a28276",
| 712|    |-  "711": "8d8ea19a78bcb10e502f91a057bac1b200ab17db66e11cdf42b63ec65a8e6c18",
| 713|    |-  "712": "001493340cc232a48125f958308be6d0567ff2684e0625e55af8b0a024c4ccca",
| 714|    |-  "713": "98a124df4ffa11cca86fbd959f4d091665fc871a4a86cc1024429d1c116b556e",
| 715|    |-  "714": "cd175b00873a9a3369c628861c1f20df57a4ca75074530ebf5b974d04b8b93c4",
| 716|    |-  "715": "cdb954d8620ad2d95915f94243cdcf71170cfc363334b2f831544f55f0d15746",
| 717|    |-  "716": "abb62293fb9df9bc7a6e80ea24f0da1049f894ade937367e24563a3277f953ef",
| 718|    |-  "717": "319369720bf1831be4c73600c26f5d08dcf6cf85fd32340c28263e39c1dda5e6",
| 719|    |-  "718": "412ce061b1ae228d2226fdb3bf2cb68421870465d6a8cf7ae58515c02fe54684",
| 720|    |-  "719": "c461587d4f3a41c375628e94fb9f971cc2829b8608d3c7aca840e62a6c8f1929",
| 721|    |-  "720": "3651d0d1f023c90e42be5c6ccf28ca71203d1c67d85249323d35db28f146786f",
| 722|    |-  "721": "8430fc43038ba44efb6e9ecbd5aa3dfeaeaf73f2d04a2d5596855c7de5de9c20",
| 723|    |-  "722": "9687101dfe209fd65f57a10603baa38ba83c9152e43a8b802b96f1e07f568e0e",
| 724|    |-  "723": "74832787e7d4e0cb7991256c8f6d02775dffec0684de234786f25f898003f2de",
| 725|    |-  "724": "fa05e2b497e7eafa64574017a4c45aadef6b163d907b03d63ba3f4021096d329",
| 726|    |-  "725": "005c873563f51bbebfdb1f8dbc383259e9a98e506bc87ae8d8c9044b81fc6418"
|    |   2|+    "001": "c0b20f4665d0388d564f0b6ecf3edc9f9480cb15fff87198b95701d9f5fe1f7b",
|    |   3|+    "002": "1f5882e19314ac13acca52ad5503184b3cb1fd8dbeea82e0979d799af2361704",
|    |   4|+    "003": "5c09f0554518a413e58e6bc5964ba90655713483d0b2bbc94572ad6b0b4dda28",
|    |   5|+    "004": "aa74f52b4c428d89606b411bc165eb81a6266821ecc9b4f30cdb70c5c930f4d9",
|    |   6|+    "005": "1ba90ab11bfb2d2400545337212b0de2a5c7f399215175ade6396e91388912b1",
|    |   7|+    "006": "537942be3eb323c507623a6a73fa87bf5aeb97b7c7422993a82aa7c15f6d9cd6",
|    |   8|+    "007": "ecbe74e25cfa4763dbc304ccac2ffb9912e9625cd9993a84bd0dd6d7dc0ca021",
|    |   9|+    "008": "b9fb30b6553415e9150051ce5710a93d0f55b22557c0068d8e16619a388f145a",
|    |  10|+    "009": "d912d9d473ef86f12da1fb2011c5c0c155bd3a0ebdb4bbd7ea275cecdcb63731",
|    |  11|+    "010": "bed2d160e02f0540f19a64ca738aacb79cfcd08ba7e2421567b16cb6e7e3e90e",
|    |  12|+    "011": "9ded5bc849d33e477aa9c944138d34f0aacc485a372e84464e8a572712a5b7da",
|    |  13|+    "012": "3e7be445b6c19e6db58c2482005c1f78cb74011a4279249ca632011a9f1b61a2",
|    |  14|+    "013": "3cb265a96c5645a9ad11d47551f015c25f3f99792c951617656d84626fbc4868",
|    |  15|+    "014": "78a262dd40eba0f7195686ec7f3891a39437523456f8d16fa9065a34409eeac6",
|    |  16|+    "015": "7b8f812ca89e311e1b16b903de76fa7b0800a939b3028d9dc4d35f6fa4050281",
|    |  17|+    "016": "a6f988d30328bd706c66f8ac0d92aac21dd732149cdd69cb31f459dca20c5abe",
|    |  18|+    "017": "1a455b216c6e916943acf3fa4c7e57a7a5cac66d97cc51befca810c223ef9c23",
|    |  19|+    "018": "fde3f2e7127f6810eb4160bf7bb0563240d78c9d75a9a590b6d6244748a7f4ff",
|    |  20|+    "019": "284de502c9847342318c17d474733ef468fbdbe252cddf6e4b4be0676706d9d0",
|    |  21|+    "020": "c86a2932e1c79343a3c16fb218b9944791aaeedd3e30c87d1c7f505c0e588f7c",
|    |  22|+    "021": "e8c6ef4a1736a245b5682e0262c5c43862cfb233ca5e286be2f5bb4d8a974ecf",
|    |  23|+    "022": "85148c096c25e3ed3da55c7e9c89448018b0f5f53ad8d042129c33d9beac6736",
|    |  24|+    "023": "42e2552a2f589e021824339e2508629ffa00b3489ea467f47e77a1ea97e735c9",
|    |  25|+    "024": "4677b3d9daa3b30a9665e4558f826e04f7833dda886b8ef24f7176519a0db537",
|    |  26|+    "025": "7d398da8791745001b3d1c41030676d1c036687eb1ab32e0b5a1832e7579c073",
|    |  27|+    "026": "fbe10beedf9d29cf53137ba38859ffd1dbe7642cedb7ef0a102a3ab109b47842",
|    |  28|+    "027": "e4110e0852a2f70703f0081fc91c4a20f595919a038729cb37c564d68b875c6f",
|    |  29|+    "028": "261171a770d594f6a7fc76c1a839eda7f6dd4e9495e00e75048578fc86d8adf0",
|    |  30|+    "029": "a207c35d8417aeed4c9e78bcf83f936cd8191c702893be62aa690ce16bc909ca",
|    |  31|+    "030": "46e68e4199ab0a663ab306651528b06756556c9f0d8b819095af45e036dfbe6b",
|    |  32|+    "031": "8de34b4ba97b184c7a2096b9266776175242b87d67bc8d77d7289be6f70cd105",
|    |  33|+    "032": "0d246750daa7f1b367a21f55da454ddc8f62e0a95d163062e9b9273320d5130f",
|    |  34|+    "033": "ad57366865126e55649ecb23ae1d48887544976efea46a48eb5d85a6eeb4d306",
|    |  35|+    "034": "728b8d7d6d5d34cad9cbb7c3ea15f807ae57144594b1740b3c73b82314ccd1ed",
|    |  36|+    "035": "02d20bbd7e394ad5999a4cebabac9619732c343a4cac99470c03e23ba2bdc2bc",
|    |  37|+    "036": "9480c0160719234b57defc0681c0949a175ffb3ff4a3bf5e8163ac843f383f35",
|    |  38|+    "037": "e9800abda89919edac504e90dac91f95e0778e3ba0f21a0bac4e77a84766eaaf",
|    |  39|+    "038": "b2004522103364a6e842b9d042c0707d79af68dec7810078729d061fb7948912",
|    |  40|+    "039": "fd0f7e53c5b02b688a57ee37f3d52065cb168a7b9fd5a3abd93d37e1559fbd30",
|    |  41|+    "040": "d29d53701d3c859e29e1b90028eec1ca8e2f29439198b6e036c60951fb458aa1",
|    |  42|+    "041": "bf05020e70de94e26dba112bb6fb7b0755db5ca88c7225e99187c5a08c8a0428",
|    |  43|+    "042": "79d6eaa2676189eb927f2e16a70091474078e2117c3fc607d35cdc6b591ef355",
|    |  44|+    "043": "6512f20c244844b6130204379601855098826afa1b55ff91c293c853ddf67db5",
|    |  45|+    "044": "97e2524fd3796e83b06c0f89fdcb16e4c544e76e9c0496f57ac84834869f4cc3",
|    |  46|+    "045": "8b0300d71656b9cf0716318be9453c99a13bb8644d227fd683d06124e6a28b35",
|    |  47|+    "046": "8485ee802cc628b8cbd82476133d11b57af87e00711516a703525a9af0193b12",
|    |  48|+    "047": "c7274da71333bd93201fa1e05b1ed54e0074d83f259bd7148c70ddc43082bde1",
|    |  49|+    "048": "743d17cbff06ab458b99ecbb32e1d6bb9a7ff2ac804118f7743177dd969cfc61",
|    |  50|+    "049": "47c6094ff1ff6e37788def89190c8256619ef1511681c503fea02c171569d16e",
|    |  51|+    "050": "6ee74ef623df9fb69facd30b91ed78fe70370462bb267097f0dfeef9d9b057bb",
|    |  52|+    "051": "d17cec28356b4f9a7f1ec0f20cca4c89e270aeb0e75d70d485b05bb1f28e9f6d",
|    |  53|+    "052": "ebd72b510911af3e254a030cd891cb804e1902189eee7a0f6199472eb5e4dba2",
|    |  54|+    "053": "9705cc6128a60cc22581217b715750a6053b2ddda67cc3af7e14803b27cf0c1f",
|    |  55|+    "054": "12e2c8df501501b2bb531e941a737ffa7a2a491e849c5c5841e3b6132291bc35",
|    |  56|+    "055": "9f484139a27415ae2e8612bf6c65a8101a18eb5e9b7809e74ca63a45a65f17f4",
|    |  57|+    "056": "3658d7fa3c43456f3c9c87db0490e872039516e6375336254560167cc3db2ea2",
|    |  58|+    "057": "620c9c332101a5bae955c66ae72268fbcd3972766179522c8deede6a249addb7",
|    |  59|+    "058": "196f327021627b6a48db9c6e0a3388d110909d4bb957eb3fbc90ff1ecbda42cb",
|    |  60|+    "059": "0295239a9d71f7452b93e920b7e0e462f712af5444579d25e06b9614ed77de74",
|    |  61|+    "060": "ad7c26db722221bfb1bf7e3c36b501bedf8be857b1cfa8664fccb074b54354f9",
|    |  62|+    "061": "94e4fb283c1abcccae4b8b28e39a294a323cdc9732c3d3ce1133c518d0a286f6",
|    |  63|+    "062": "d25a595036aa8722157aca38f90084acb369b00df1070f49e203d5a3b7a0736d",
|    |  64|+    "063": "0e17daca5f3e175f448bacace3bc0da47d0655a74c8dd0dc497a3afbdad95f1f",
|    |  65|+    "064": "6d62aa4b52071e39f064a930d190b85ab327eb1a5045a8050ac538666ee765ca",
|    |  66|+    "065": "1c6c0bb2c7ecdc3be8e134f79b9de45155258c1f554ae7542dce48f5cc8d63f0",
|    |  67|+    "066": "316c0f93c7fe125865d85d6e7e7a31b79e9a46c414c45078b732080fa22ef2a3",
|    |  68|+    "067": "53f66b6783cb7552d83015df01b0d5229569fce1dd7d1856335c7244b9a3ded6",
|    |  69|+    "068": "4bf689d09a156621220881a2264dc031b2bfb181213b26d6ff2c338408cf94c3",
|    |  70|+    "069": "79555e4b891e2885525c136f8b834cc0b1e9416960b12e371111a5cb2da0479f",
|    |  71|+    "070": "08c6a7c8c06a01d2b17993ada398084b0707652bcfbd580f9173bcddf120ac2c",
|    |  72|+    "071": "63f032489227c969135c6a6571fe9b33d6970dc6eca32c2086c61a4a099c98fa",
|    |  73|+    "072": "9ef8a4249d4b8f24147ab6e9ad2536eb04f10fb886a8099e88e0e7c41cf7c616",
|    |  74|+    "073": "ae9f9c786cd0f24fe03196d5061545862d87a208580570d46e2cfb371319aa68",
|    |  75|+    "074": "b7c7470e59e2a2df1bfd0a4705488ee6fe0c5c125de15cccdfab0e00d6c03dc0",
|    |  76|+    "075": "8a426e100572b8e2ea7c1b404a1ee694699346632cf4942705c54f05162bc07a",
|    |  77|+    "076": "81c54809c3bdfc23f844fde21ae645525817b6e1bee1525270f49282888a5546",
|    |  78|+    "077": "7f2253d7e228b22a08bda1f09c516f6fead81df6536eb02fa991a34bb38d9be8",
|    |  79|+    "078": "71374036b661ac8ffe4b78c191050c3ccd1c956ca8a5f465ea1956f7ce571f63",
|    |  80|+    "079": "2df095aea1862ebfed8df7fb26e8c4a518ca1a8f604a31cfba9da991fc1d6422",
|    |  81|+    "080": "58bfe3a44f8ae452aaa6ef6267bafc3e841cfe7f9672bdfeb841d2e3a62c1587",
|    |  82|+    "081": "04bad90d08bdf11010267ec9d1c9bbb49a813194dace245868ea8140aec9a1f7",
|    |  83|+    "082": "52c42c55daea3131d5357498b8a0ddcf99d1babd16f6ccaee67cb3d0a665b772",
|    |  84|+    "083": "a825281bc5ce8fe70d66a04e96314e7de070f11fed0f78bc81e007ca7c92e8b0",
|    |  85|+    "084": "692a776beae0e92d1121fed36427c10d0860344614ead6b4760d1b7091a6ab1f",
|    |  86|+    "085": "7b2e7211fb4f4d8352c9215c591252344775c56d58b9a5ff88bda8358628ec4e",
|    |  87|+    "086": "8ffe8459134b46975acd31df13a50c51dbeacf1c19a764bf1602ba7c73ffc8fb",
|    |  88|+    "087": "cec1917df3b3ee1f43b3468596ed3042df700dc7a752fefc06c4142a2832995d",
|    |  89|+    "088": "c06356fdcaff01810e1f794263f3e44a75f28e8902a145a0d01a1fff77614722",
|    |  90|+    "089": "0df5486b7bca884d5f00c502e216f734b2865b202397f24bca25ac9b8a95ab4a",
|    |  91|+    "090": "cb69775effd93fc34ef38dfbfcdc4c593b1a3d8e7ab70c0f05d627dbc5cbd298",
|    |  92|+    "091": "327f057e054d1e6a9a1be4ac6acc4b1dedc63d8a88222396ffe98b3194067347",
|    |  93|+    "092": "538cd20a275b610698691d714b2adf4e4c321915def05667f4d25d97413ec076",
|    |  94|+    "093": "d8ed8ca27d83a63df6982905ea53b4613b9d7974edcee06f301cf43d63177f47",
|    |  95|+    "094": "d1b79281d95ce5bfa848060de4e0c80af2c3cae1ff7453cca31ff31e2d67ac14",
|    |  96|+    "095": "0a3ddcd71cf30a567070630f947ab79fc168865ba0bf112aed9b71fb4e76c32f",
|    |  97|+    "096": "9c527d233befbf357335e18e6dd5b14ef3a62e19ef34f90bd3fb9e5a2a0a0111",
|    |  98|+    "097": "f0e2911e303617c9648692ee8056beeb045d89e469315716abed47cd94a3cd56",
|    |  99|+    "098": "ededac5db280586f534cde4f69ce2c134d2360d6b5da3c3ebc400494cc016e78",
|    | 100|+    "099": "92c5fd0421c1d619cbf1bdba83a207261f2c5f764aed46db9b4d2de03b72b654",
|    | 101|+    "100": "993189cbf49fef4c913aa081f2ef44d360b84bf33d19df93fce4663ac34e9927",
|    | 102|+    "101": "e8539f8b271851cad65d551354874d3086fa9ff7b6f6a2ab9890d63f5ba16c68",
|    | 103|+    "102": "9d693eeee1d1899cbc50b6d45df953d3835acf28ee869879b45565fccc814765",
|    | 104|+    "103": "1f17277005b8d58ad32f2cbee4c482cb8c0f3687c3cfe764ec30ee99827c3b1d",
|    | 105|+    "104": "87dfcf5471e77980d098ff445701dbada0f6f7bac2fa5e43fa7685ec435040e1",
|    | 106|+    "105": "a76f4e7fa1357a955743d5c0acb2e641c50bcaf0eec27eb4aaffebb45fe12994",
|    | 107|+    "106": "197f5e68d1e83af7e40a7c7717acc6a99767bf8c53eece9253131a3790a02063",
|    | 108|+    "107": "bf13bc90121776d7de3c4c3ca4c400a4c12284c3da684b3d530113236813ce81",
|    | 109|+    "108": "3dea386e2c4a8a0633b667fdd4beacd8bb3fe27c282f886c828ad7d6b42c2d73",
|    | 110|+    "109": "735cc3e619b9a1e3ac503ba5195c43c02d968113fd3795373ca085ed7777b54d",
|    | 111|+    "110": "01b4e8163485356b46f612c9d40ed4b8602621d4d02289623e7dbb3dcbe03395",
|    | 112|+    "111": "97c1b054c094337ec1397cd5ccdf6c9efe1067ad16f531824a94eaadb3c0953b",
|    | 113|+    "112": "c99c843e0f6d6566132d97c829780332218e005efc14b633e25a5badb912d63a",
|    | 114|+    "113": "8dbc8319e5d8923ef7ab42108341ee2c32a34ffc0d19d5ae5677f1564813314a",
|    | 115|+    "114": "b3b9ebc9f9ddadb6b630eeef5d7ba724b3bb4d071b249318093eb7547949bbb9",
|    | 116|+    "115": "80c3cd40fa35f9088b8741bd8be6153de05f661cfeeb4625ffbf5f4a6c3c02c4",
|    | 117|+    "116": "a39208d7130682b772d6206acd746bc3779cc1bc0033f0a472e97993d0a32d5b",
|    | 118|+    "117": "54201fbc7a70d21c1b0acede7708f1658d8e87032ab666001e888e7887c67d50",
|    | 119|+    "118": "834e6235764ae632737ebf7cd0be66634c4fb70fe1e55e858efd260a66a0e3a9",
|    | 120|+    "119": "bcabd9609d7293a3a3f1640c2937e302fa52ff03a95c117f87f2c465817eba5e",
|    | 121|+    "120": "2bd8cabf5aecfcadde03beda142ac26c00b6ccfc59fdcb685672cd79a92f63a6",
|    | 122|+    "121": "5292478e83f6b244c7c7c5c1fe272121abdc2982f66ed11fcbc6ea7e73af124d",
|    | 123|+    "122": "6d78b19a042a64f08cc4df0d42fb91cd757829718e60e82a54e3498f03f3ef32",
|    | 124|+    "123": "057b9b6e49d03958b3f38e812d2cfdd0f500e35e537b4fa9afedd2f3444db8a2",
|    | 125|+    "124": "d251170c5287da10bffc1ac8af344e0c434ef5f649fd430fcf1049f90d45cf45",
|    | 126|+    "125": "e9b7a676dc359ffce7075886373af79e3348ddbf344502614d9940eecd0532c1",
|    | 127|+    "126": "38752ed2e711a3c001d5139cb3c945c0f780939db4ea80d68f31e6763b11cfba",
|    | 128|+    "127": "e707d9f315269a34d94d9d9fa4f8b29328e66b53447ef38419c6033e57d5d123",
|    | 129|+    "128": "5e15922fba7f61ddccb2ee579b5ec35034cc32def25ff156ae2b0a3e98c4414e",
|    | 130|+    "129": "3cc4ad1254491787f52a66e595dbb573e13ceb554c51d81e42d5490a575da070",
|    | 131|+    "130": "7a6e9899cccb6a01e05013c622422717f54853f7f2581bc3b88a78b25981da08",
|    | 132|+    "131": "4a8596a7790b5ca9e067da401c018b3206befbcf95c38121854d1a0158e7678a",
|    | 133|+    "132": "ed77e05f47f7f19f09cae9b272bfd6daa1682b426d39dcb7f473234c0c9381c5",
|    | 134|+    "133": "e456d3fec55d88653dd88c3f8bbde1f8240c8ceb7882016d19e6f329e412a4ae",
|    | 135|+    "134": "b144116982f4f0930038299efbdd56afc1528ef59047fb75bade8777309fde4b",
|    | 136|+    "135": "0709e1008834c2ca8648376ac62d74ac8df5457069cbfedf2b0776dab07a3c5b",
|    | 137|+    "136": "84692ebaa4fc17e9cfce27126b3fc5a92c1e33e1d94658de0544f8b35a597592",
|    | 138|+    "137": "6eca481578c967fb9373fe4ce7930b39d8eefe1c0c9c7cb5af241a766bd4dfbc",
|    | 139|+    "138": "1b5f0f504917592dea2e878497b0e12655366f2a7a163e0a081d785124982d2c",
|    | 140|+    "139": "0d2f26ec4004c99171fc415282ec714afa617208480b45aeb104c039dc653f5d",
|    | 141|+    "140": "78ceab5e434a86a6a6bb4f486707bffaf536ef6cb2cc5b45a90b3edd89a03283",
|    | 142|+    "141": "d74ae4b07f05779065fb038b35d85a21444ed3bed2373f51d9e22d85a16a704c",
|    | 143|+    "142": "f59af8b0b63a3d0eb580405092c1539261aec18890ea5b6d6e2d93697d67cd38",
|    | 144|+    "143": "66e9d1093f00eef9a32e704232219f462138f13c493cc0775c507cf51cb231ed",
|    | 145|+    "144": "09a1b036b82baba3177d83c27c1f7d0beacaac6de1c5fdcc9680c49f638c5fb9",
|    | 146|+    "145": "b910b9b7bf3c3f071e410e0474958931a022d20c717a298a568308250ed2b0da",
|    | 147|+    "146": "5292f0166523ea1a89c9f7f2d69064dee481a7d3c119841442cd36f03c42b657",
|    | 148|+    "147": "cdb162a8a376b1df385dac44ce7b10777c9fea049961cb303078ebbd08d70de8",
|    | 149|+    "148": "54f631973f7bc002a958b818a1e99e2fc1a91c41eafe19b9136fac9a4eb8d7b8",
|    | 150|+    "149": "c49382eb9fc41e750239ac7b209513a266e80a268c83cf4d0c79f571629bac48",
|    | 151|+    "150": "c89b0574a2e2f4a63845fe0fd9d51122d9d4149d887995051c3e53d2244bba41",
|    | 152|+    "151": "5d09e3b57ced9fd215acc96186743e422ce48900b8992c9b6c74d3e4117e4140",
|    | 153|+    "152": "c3ea99f86b2f8a74ef4145bb245155ff5f91cd856f287523481c15a1959d5fd1",
|    | 154|+    "153": "fb57f89f289ee59c36cede64d2d13828b8997766b49aa4530aabfc18ff4a4f17",
|    | 155|+    "154": "c877d90a178511a52ae2b2119e99e0b8b643cec44d5fd864bd3ef3e0d7f1f4bb",
|    | 156|+    "155": "58801bebc14c905b79c209affab74e176e2e971c1d9799a1a342ae6a3c2afbc1",
|    | 157|+    "156": "983d2222220ab7ffa243f48274f6eb82f92258445b93b23724770995575d77fe",
|    | 158|+    "157": "023344e94ad747fbc529e3e68b95e596badcc445c85c1c7c8fa590e3d492779a",
|    | 159|+    "158": "d1b58f4c07d1db5eb97785807b6d97a0d1ee1340e7dbcc7bb289f3547559f2fc",
|    | 160|+    "159": "cd3a3d2cf8973c5f2c97ebed2460784818513e7d0fee8f98f4fdcf510295e159",
|    | 161|+    "160": "3a926519b024ea9df5e7ad79d0b1c4400f78f58d07834f5ecd7be522112b676d",
|    | 162|+    "161": "2b3d09a4c76b282db1428342c82c5a55c0ab57c7a7640e0850d82021164477e9",
|    | 163|+    "162": "d50ce1ab3a25a5c5e020517092128ab3ec4a3bd5b58673b2e6cda86bcc0c48a0",
|    | 164|+    "163": "7e17ce0fca5d559f76015765c652d76b8468f9ddc91c2069d7799867b9d52769",
|    | 165|+    "164": "5c680d0b2c4dfac8aade87be60cb4d04a4c3d4db398f51e2cbf131d699b630a8",
|    | 166|+    "165": "304de2e63f91f8f74faaebae7a7ec2e0c6e0d8d322d8a747e4e3be88de2d3505",
|    | 167|+    "166": "14212843872dab188a86eb1f0f7012e1b72ea1097545f29377b3b9b52822af76",
|    | 168|+    "167": "18c18f8710f831a82eb74ae979bd36d609bee818c972ff88f8d8fa065270f951",
|    | 169|+    "168": "66640021d592f79b510f9d6101bd8eca89893187d23919c8edff4075e73ae390",
|    | 170|+    "169": "819b01e0394727fd089f84b9351243176920f03d0c6e33e5ff136016da5d8d4e",
|    | 171|+    "170": "e68fadd33a8c41d9a259577a278d8518aeb8b81c67b8cf03ccf43fc451ec8bd8",
|    | 172|+    "171": "33bf9ed4714b0e5da8828f8b3d9d3e9d0cf55c1d496324acb04a3f195252749c",
|    | 173|+    "172": "b9a27b513dc15448772cac5e914de61f02efe323f528892c0bff86d19913a6bd",
|    | 174|+    "173": "1b2a5e44fda5dfee3ce230f44fe73c672249f6620cdbaa343ba0ba808034958c",
|    | 175|+    "174": "98aabf085c6c8647f5e8a4775dc1d036513742d8e03b8c5c51e41bdfc9c3e7ae",
|    | 176|+    "175": "c03dcb22b7faf121d99542018dd10a07a778abee2678d35c03394a8d207b826b",
|    | 177|+    "176": "4fff1a7beda4291446d76e5ed5177c3f36e52a10481009fdaf2976da39e802ae",
|    | 178|+    "177": "614d3df0ba5fdffab2328eff8e9ca2d76b09bbc447c06bf1fab0419ae278fae9",
|    | 179|+    "178": "094a2ba3011118efdd9d4c1f839e6747dee8ba953b52e9012fe2977e32599375",
|    | 180|+    "179": "9f5563a5ea90ca7023f0304acba78005ee6b7351245a8a668a94dfef160f8d29",
|    | 181|+    "180": "dbef09115a57784ea4ea14c1fe35571301b0d6139bea29d1b9e0babf2c2aae05",
|    | 182|+    "181": "3920627e86db42beb1cdf61d026f9f7798082f1221db25a17fb7feb6c1d49027",
|    | 183|+    "182": "58096166bb8199abf4e07a9ef0f960065e5a635443c1937a1a3c527ade51d594",
|    | 184|+    "183": "bdf84a73b16a5dd5ece189dc970ab2c8f0cb5334c96bdd1d6ba2bad6e7f8a213",
|    | 185|+    "184": "c1e8c0f1b1eb3c258923e9daa46ef055bd79512b485c7dc73a9c5e395d5e6911",
|    | 186|+    "185": "0ea72907eb6c1120740cd80ee6b9a935cd754edcf69379328f24dfc3f09b9986",
|    | 187|+    "186": "3c0078aeae0362b6b7561518d3eb28400193fec73aab35980f138c28b6579433",
|    | 188|+    "187": "f2bc655b33e35669ee9adc841cbda98e0834083eb0657d10f7170e70081db7e0",
|    | 189|+    "188": "38e0291a3f5438779b157e5efcae6cef9db21cbac5607cd08882844cf981febd",
|    | 190|+    "189": "9b2a65ac4c35f6b392501dee2a28221a3975aac5f0866b476f5e6a5a59f3fcc2",
|    | 191|+    "190": "606fe2cb6525dabfcdab93afb594dbc8399cb967fc05f0ca93f6084d3f8fb591",
|    | 192|+    "191": "ea1977e7b22df383de61bded2a4bb3064cf17fcc0170be452330256f938b8d55",
|    | 193|+    "192": "91d614f139082168d730003f04b87135c64e13709ced2a96001ed60796867825",
|    | 194|+    "193": "65648f18a50a7f9195fe56bb8cb9e25421c6d777ad2447a3b566dc8c54f3399a",
|    | 195|+    "194": "cdd31847c6138853597261756d5e795884566220a9361217daa5ba7f87560404",
|    | 196|+    "195": "d12224510de6c98076f6289cbe342a7ec7ea3c5453f6e3cf8d37d9eea74bd07e",
|    | 197|+    "196": "1349b472d2821dff215e54d683dbfca49f0b490ade6a30b1db9667bc94e5312d",
|    | 198|+    "197": "e2aa8f7cb3ba893af8bddbffa6240e7eb71a4f4c4498f2a360f3db7b513094df",
|    | 199|+    "198": "a29d9edd0dceca9a72d2238a50dbb728846cd06594baec35a1b2c053faeab93d",
|    | 200|+    "199": "50a6b9725ef854537a554584ca74612a4d37d0ec35d85d04812c3ae730a4c8cc",
|    | 201|+    "200": "5b439098a3081d99496a7b1b2df6500ca5f66c2f170c709a57b27c6be717538a",
|    | 202|+    "201": "b4e86186652a11df0b9ec8f601c68b4823ae0bafd96357051371fde5d11a25ed",
|    | 203|+    "202": "057243f52fd25fa90a16219d945950ed5523ddb7eb6f2f361b33f8b85af25930",
|    | 204|+    "203": "2742f7af8ce9e20185e940bb4e27afc5fefe8cd7d01d7d8e16c7a5aaf3ad47aa",
|    | 205|+    "204": "15f5e9ae4636a6bf8bdd52f582774b9696b485671f4a64ab8c717166dc085205",
|    | 206|+    "205": "e03c2f4ceabf677ec502d235064a62271ce2ee91132b33f57382c4150c295784",
|    | 207|+    "206": "16bb96da8f20d738bbd735404ea148818ef5942d4d1bc4c707171f9e5e476b1e",
|    | 208|+    "207": "133fea765d0b055894d8aba573f47891c1f7f715f53edeefb200fbda758a1884",
|    | 209|+    "208": "90831cd89b4cceacaf099c9bae2452132cfa2f2b5553c651ef4948460e53d1f3",
|    | 210|+    "209": "570fab1574a3fd9aca6404083dec1c150e858e137692ee0c8011e702ec3e902f",
|    | 211|+    "210": "ae9a76ce3418c06d0eac3375a82744fb4250a2f380e723c404334d8572faead0",
|    | 212|+    "211": "aa4b2bc3a136b27bf10a858ac6a8d48f41e40f769182c444df89c5b9f0ed84e5",
|    | 213|+    "212": "81489bf56605b69cc48f0bce22615d4415b2eea882a11a33e1b317c4facba6eb",
|    | 214|+    "213": "a497e789f49b77d647de0e80cd2699acd3d384cc29c534d6609c700968124d14",
|    | 215|+    "214": "409520c6a94de382003db04a3dfee85a6dbb71324f8bd033e566e510ad47e747",
|    | 216|+    "215": "0eccb27846f417380a12dfd588a353e151b328425ecf3794c9cf7b7eec1a1110",
|    | 217|+    "216": "f735b4b441635ecded989bdc2862e35c75f5179d118d0533ae827a84ed29e81b",
|    | 218|+    "217": "9aa88ac109aefaa7ce79c7b085495863a70679058b106a5deb76b2772a531faa",
|    | 219|+    "218": "5feceb66ffc86f38d952786c6d696c79c2dbc239dd4e91b46729d73a27fb57e9",
|    | 220|+    "219": "9da1307fd12f4c9a21a34e612920cec286d937418a2d5040676408ba0c47f3d8",
|    | 221|+    "220": "a262318d02a14747ed2137c701f94248bf8651a23d1f82826952e66c25029588",
|    | 222|+    "221": "bfb4e53578fa42f83eda027da0467a351298dd65e3e8e84a987d69fc275e9f2d",
|    | 223|+    "222": "4308f4374b84e657aa7a21e5f5fe42ed16386b6dc7a74bff0d24d08ad62acd26",
|    | 224|+    "223": "3790f82f65ce7bc071b4096ca22544548b3413a755f58bfc401eff3ddf487a86",
|    | 225|+    "224": "96356c050fa66d919c75212d789544db81b012bbaf1f7915b053cb9ba2d67de7",
|    | 226|+    "225": "f37f3f2b0dc57a86dee4ba6ff855283bb4d2f0dea1c5bd1b708853444c2ffcec",
|    | 227|+    "226": "49bd28d97a79875007a6713aa9700df14464217c28a6e76bc93ded57b75a33f5",
|    | 228|+    "227": "b1f73471a3e6ea1dfb04610bd89ccb110994780084280fae872d42a2786f9131",
|    | 229|+    "228": "e38da154f6cccd06cd0001924ec2dad8de5bdcd0b78b68e8d8347768d99ac0bd",
|    | 230|+    "229": "098ffc6baaa32734053275ce38f4bbe58efe0ff946bf31e0e2df4c6a169e23d8",
|    | 231|+    "230": "2c72b887a8638941b85765645b45c5cdb73255427e14d5114f6830f847a6b861",
|    | 232|+    "231": "4aa0c92e77eeed08994650ac6129d77db9f026ae2aee78ad5c9fde132fac0505",
|    | 233|+    "232": "5f7905b71cb897bc7cc6db7e29cc38ee459e2fd8f5d58ba4746d3acd4e46d444",
|    | 234|+    "233": "8d986e287ad21475728b0dbd9e935623d69db4e5fdca0d42bc32d70eda48985b",
|    | 235|+    "234": "2d9d03b778af897e305caa8a1a14a117737bbdd549003c6d7477dd3be8331694",
|    | 236|+    "235": "7168cff545d365b09e8997bb9450343c7090913876c8f7eb9f0e9849c6fc7dd5",
|    | 237|+    "236": "ceb3002bad36c22c5da82fd422b36bad91b97a7d3f5409ed5d16aa9b42dc137a",
|    | 238|+    "237": "c857d8fa78c8fde91f29b3fbe332c2e781f7e8b54532f4c352693d6676fda2a8",
|    | 239|+    "238": "3e2edae8b8ddbcfaecd5aa6c69cb5960b84cc16f7b3232f3386aae9ecbd23f20",
|    | 240|+    "239": "49df3a63ca6509687cabb3d208e92b057630231e66b87fe8c781baabb12a55f8",
|    | 241|+    "240": "5034a21557b2de1c5c2d2aadfe8ffe62162c23f42d1aaabc705ed8519e91a3c1",
|    | 242|+    "241": "85abbe1913df41c57d1e6f00cecea416edb19c64681d1bb43fb5024e2f48d409",
|    | 243|+    "242": "4da30e6198a3d9ae6a538c2366e08ee218de6efe2c5b8f231493e21489c21a7e",
|    | 244|+    "243": "7404bb7881a010271831847e71162ee7a393843922ee93cf7cf3455a0074279c",
|    | 245|+    "244": "21aa3213adeb0a562ec7161e1cfcb5f1701303f1c9f03ed726c536283e080db6",
|    | 246|+    "245": "22b9cfa9ab97c84eb64e3478a43acd4d95b90cae8c3453c968457a89c6387a81",
|    | 247|+    "246": "729e3de7687fc597be2eb4c592d697ff29c78cff6945c9690cfb1ee67550eeed",
|    | 248|+    "247": "f49b98df95a1f826c24cf622ba4d80427a0e0767dffcc28a9206c58508863cca",
|    | 249|+    "248": "44b8116c29dafbdfa984b3751c1dfd057b3e93fc57c8cd18495f1c0f605496bc",
|    | 250|+    "249": "49e96b6ba41e88901dbd118139ef6f013b4fc59e2347058a7e726cf6a2f14067",
|    | 251|+    "250": "f0e0dc05fb555ae5ba9820586bef3bb8a3a82905ece3d8a998a3015fc91c1c3e",
|    | 252|+    "251": "8c1ece1b350c210380456da2bab70054f717731b0dfb34bc3cf4abfacf696f15",
|    | 253|+    "252": "ad20a49374f9176bd26460d35f96f30d734df3cf6fc63b4642380b4e866848de",
|    | 254|+    "253": "ba1a2bbccabbcddbf29ee0b56d0d56b4f026e8a7b97e97de2d48c133ccbdf2a1",
|    | 255|+    "254": "381a2eac64a984a81671722bd95ca5b8b6508a6f490af46780e9f393c6797223",
|    | 256|+    "255": "5e6ece13372bad4a6ea011c933389dfaefedad5860aefba2ab97fe5f59156c42",
|    | 257|+    "256": "068d4a3c845803bf66a9e5320261a0fd7b6292a8230b271a6a83f0dc8c73e907",
|    | 258|+    "257": "d80ac9215ffa7adacb22711cc88f5b580272d0d65c49e1ea48e69d17e264d91a",
|    | 259|+    "258": "256c4d399703b7f16dadef9201efc0ef9f6aa6ee05ddfa2d3e26ff6efe09704d",
|    | 260|+    "259": "275a4e84039a1596ac7e8bbe186163dcfb02bfa99c209653ff5d505a29b4cb10",
|    | 261|+    "260": "f461ff2df66653be1a2e579b1aea515d4a84f2ae5ebea3aa21fb2477a53699f4",
|    | 262|+    "261": "178ecd56cd79c7aaec1353093571ce89845130991d64c5a715a02da83a2705ab",
|    | 263|+    "262": "2e0cb5e8fc8ef04c50a5b9ab9a9eecad446598ebc2527b19c447143e5ae09736",
|    | 264|+    "263": "c870fd75ed0d5ed92ec35789c522d029f364328a16282a1c5eb9b3b7e121eff3",
|    | 265|+    "264": "da5d6bdd89eacf70a88810935f80e4725da4feaf2aa86adb13985d7d9e1c247f",
|    | 266|+    "265": "13f16351c3971c286fae5e9cfbaf6f0a128a6507804fd280971a600019e352e8",
|    | 267|+    "266": "4f39cdd293598de9259231592e99bfc5fde82a0bc1820a4c5faeb54f96037f00",
|    | 268|+    "267": "3e054d92034d3d32c3d4e7acadf1c09232e468fc2520d23d2c7d183ec0735aa3",
|    | 269|+    "268": "2d47c47a2b19178cef9e4eba1a53dd39b5f8657bbe011a71c8d402d294d50132",
|    | 270|+    "269": "4448f310ab9bff796ca70c7b7d0cd3b9c517f72744a8615112f65ba30a6d61f7",
|    | 271|+    "270": "ce71f5bd1db540762e4bc6c4798d8b7f3d2b7068e91c300fd271a46298aea2aa",
|    | 272|+    "271": "5a05e212b9b6ccf6092081f567aa73d27da399d45418f674628a8154f9182b6b",
|    | 273|+    "272": "a326c2d7121d80861aaf110826615e560aa4efdec0cc9fdfce051c6b9038e781",
|    | 274|+    "273": "d32b75411f407c5da6a9a6b4a3907b9a9ebbca6b651324c03432d549671bb837",
|    | 275|+    "274": "b5740ac928d58f53537b05ecc80b7463dc1fd5a53400f57aa55573ecbd5faa56",
|    | 276|+    "275": "e1c843ff0e97692a180e384c1a9c03c7de06ef92ccad5aa6157fabf0dbe5b804",
|    | 277|+    "276": "2edf523574e0a062cacf21f51ed6f81128537f27a3cd27b84a8b5d2478d0092d",
|    | 278|+    "277": "130c990ad499345b7638e57dce365442e2ab2d2571546aae60a9fa6ed3834b8d",
|    | 279|+    "278": "2204d89df74e664621dfe8892277d50e7774f60613561d70ae06ee0eb4c483d4",
|    | 280|+    "279": "4618456c7239784964b8fcd27155e01cf5417a16cdca7b163cc885d598ba93f4",
|    | 281|+    "280": "4b2d9501483d450371ec4413519b0b3461502aabb970fb2b07766d0a3d3a3f85",
|    | 282|+    "281": "b04a4a02fa0ae20b657dcfe3f80ef84fd446daa1521aabae006b61bb8fa5a7da",
|    | 283|+    "282": "6dab2ee10b0dc8db525aeaa2f000f3bd35580ba91e71fe92bcd120ad83cf82c5",
|    | 284|+    "283": "c964c01082a258f4c6bb66a983615686cb4ae363f4d25bd0bdad14cd628cfce8",
|    | 285|+    "284": "df960dabff27b2404555d6b83aed7a58ef9a887104d85b6d5296f1c379b28494",
|    | 286|+    "285": "087de77e5f379e7733505f196e483390596050c75dad56a999b1079ea89246ed",
|    | 287|+    "286": "8f3e5fda508a37403238471d09494dde8c206beadfa0a71381bd8c6ac93abaf4",
|    | 288|+    "287": "5d834d4c0ca68d0dca107ffe9dbaddac7fc038b0ad6ccc7ba3cfb53920236103",
|    | 289|+    "288": "20a3ef9e411065c7265deff5e9b4d398cab6f71faa134353ccea35d2b279af04",
|    | 290|+    "289": "9dda7eb623939f599551ad1d39dbf405211352ae4e65ddd87fe3e31899ca571b",
|    | 291|+    "290": "a629c35ad526f4a6c0bb42f35f3e3fa1077c34e1898eac658775072730c40d6b",
|    | 292|+    "291": "81b1e5196bec98afe72f4412cf907a2816515bad0680bd4062f2b2c715643088",
|    | 293|+    "292": "614950a1cff05f4cf403f55393ed9d7807febbae49522ef83b97e0390038ae03",
|    | 294|+    "293": "9e4067ac93c6febda554d724d453d78bf3e28a7742cdec57ee47c5c706fbe940",
|    | 295|+    "294": "9ac900bf0fbb4c3c7e26986ac33698c46c6c3e8102ab75b40b8df94fc3a0c7a1",
|    | 296|+    "295": "2fdcd631f3c68bef3c90f8679b7aef685fa33f20c2d6eb5965cd2a62267c2ffa",
|    | 297|+    "296": "dfc947e61ea2138ebe47234ba503cf5246ecec530b12e363acb240822ddf0b34",
|    | 298|+    "297": "4d5af88ba8a28b49a79773d3e6521e8731ff07d49765203b157481469e6ae6d0",
|    | 299|+    "298": "94aa77eadafaad7327acb8e653888f00e114cca2fbe04691dabdafa2a0c8cd64",
|    | 300|+    "299": "0f221ba58a8ea417e13847ef91af9ff029561ac18c74bbeeb3f5509af81a3b03",
|    | 301|+    "300": "50a79fb6e417fb4a34e155a9af683aa9a74ee922a6c156a58bfedd22cf3185c4",
|    | 302|+    "301": "eb09a0097a47e7a95b892ad7230475a1a28343b47db4faeb3e47f227aeb04738",
|    | 303|+    "302": "fcf9736fe8c20a6d02f00e9b1e719de06aff4afa99d2eba166592aeff1b8f3b7",
|    | 304|+    "303": "e6266f575c94d805a67fcd3f2391d0961b4b121b8a66afbfbae76dfc34e5c06b",
|    | 305|+    "304": "189bd2a8daf5b638ede7c50035fcf426d125de87a401382f66ab75f35b2ac1f7",
|    | 306|+    "305": "0ac58c6eb8513f4ffe911bf0f044e0153862ee89c04939fd9b294860a37ec9ce",
|    | 307|+    "306": "335998d7e2a3fae2da75a5192d62c37dd006be96831fd37e7438ec6d84451c44",
|    | 308|+    "307": "4f1f2695b1b6b1660f3ef6ac31a81630ca74da9368eafbfb214ec1980705c13c",
|    | 309|+    "308": "bc5ae127f8690ba7f6e9ddad98a49137acb45abf4e187eaf3648f197c72fbe90",
|    | 310|+    "309": "6b78ed4c4bfc942b9b5dc340961f19c690d56f9d721b6b764d1db31da53139db",
|    | 311|+    "310": "0d183ec2ff1cbc768a9eb7eb06c2a354f6c8bab00e64ca2aed2da00825f33c05",
|    | 312|+    "311": "3ae7fdad095eed78e0c63cfe4e28ab7ba2b977259590ed38722e9c44727e598b",
|    | 313|+    "312": "329d107b5743a96e3551084832587a6346e410aa89641d83f03f1242a7244473",
|    | 314|+    "313": "ecc63ee12cbe487e5390007271890b8aa5df2cf48b8e692404895d3c2af20758",
|    | 315|+    "314": "5fa65495795c52818aea910c24e4d3176c71817f5268c34e1cb259b256737352",
|    | 316|+    "315": "95bd03b9913be37d24809d30e7bfd31a1b7a127d03d65e52086857bb3a364b5d",
|    | 317|+    "316": "ca6ec6c9159e10719cd8d2cfcfaf2fe2d3637fb3d497e2c80866de6b593632e6",
|    | 318|+    "317": "5b0d72d34b406ce20714a59f1c4d5340c5559285e340497dbcad68729a9db786",
|    | 319|+    "318": "3e2b479fafb86b8ab097588b8fa12ae8a078f8b5801e15c7faa1ef23d87a631b",
|    | 320|+    "319": "e04b18947b36771937dea491f47b75fedf42a6db684035f5690e6c2bd7e6031e",
|    | 321|+    "320": "e546e4a4c9020669c78a095aa5c5038242dd78e0f98517c0e23c43aefeb58138",
|    | 322|+    "321": "3da0198df2f98a7306ee6d2e12b96ba9a6ad837a6c2d4f316d3cd8589b6af308",
|    | 323|+    "322": "07e511e9002147c33739c924c17a61126d12823d143069535a615a97f86d936f",
|    | 324|+    "323": "be514911dd6258f860c2773253f6df6c22ca975a10c4e34db5903269f2975faf",
|    | 325|+    "324": "53ed94369b59a84d003ff3155edbf481a0eef362325539d6ab1a7f370ce919c8",
|    | 326|+    "325": "43c8dc1907d3e1eb30deb565475ec1ad4f807baf6ef34178508ec85071722f0a",
|    | 327|+    "326": "b08d72606988ea5a82e0caf15e68d81b4f2e8dbb4af6a22437916f3fc53e3dea",
|    | 328|+    "327": "f70bb9cb351daf610a91a3c769d84bbb3f3b8f1169b10839196b65b8585e7c38",
|    | 329|+    "328": "6e26ed661a0add2e583229066d304f7e765a0ea337b6a93bf979e4027b70b94e",
|    | 330|+    "329": "89d8b56a1e05d90ccde0df482ff2fec3d44270739810f3c5d06856c38d801380",
|    | 331|+    "330": "2dfac8e04d08dc5eefcbba4e475164103d339f844896a75ef3af2229185118f9",
|    | 332|+    "331": "a20f9b06c126f4ee65e3f3a0bf345007b35ecb69d035dd0ad848e09300130fcb",
|    | 333|+    "332": "6593d40f4e3f53a73191c704d388c7cd1639403da6e679c8e4169b26ade19f3f",
|    | 334|+    "333": "7499bc84f6bd2211365fec34943d64f6be80a53ee2efb21c099c1c910ca29967",
|    | 335|+    "334": "f24dd99fe5b46bb7a7a30c5eff61e71cab21e05f1b03132d7da9c943f65713f6",
|    | 336|+    "335": "8e2111c24160d92b1b29dd010b8b3a0a4f9af55f1d30bd5892756c58ffaec201",
|    | 337|+    "336": "eed2e8d970c1c5031220476e6b700d16e5065d7893a2766a53600825b4ad3ae5",
|    | 338|+    "337": "44e298d1b55c51c9f127989da1149ccf6bda24c40041f777d35d5b8f192753d2",
|    | 339|+    "338": "b3a60e80296f79cfdfc02354acc674162faefcb3fb78b9672254c9cfc6eb113f",
|    | 340|+    "339": "2b55688ba27d72202632783186211ee24ea39c53915066578291fffd9db73128",
|    | 341|+    "340": "15765221271275022a6ef57634d836b052ffbab6d7d5a6899992972143841e3c",
|    | 342|+    "341": "f7340563f85e057709a2fcc71bd448fed8d6de6907d8ba5f91fefa2abffda6cf",
|    | 343|+    "342": "f252eec230c2e92ed1fa04834bc0738b79597c3b0d2a66c787fdd520e63cb3d3",
|    | 344|+    "343": "1d65c53a04f7eea94ebf76d797c0f79fe3d251bd33e5edc16c780715531b4345",
|    | 345|+    "344": "86d3fb095439bddbc0d6e6e8e433d54aff04350e2da2ad05f53d607113075c8b",
|    | 346|+    "345": "21db551743591f9cd20fffcedf3bda17f9f178bc9fbca528a56c2c61b9e7c731",
|    | 347|+    "346": "f326e2241b7e57320914aa279f9ba2e155ea77f809a188958e0b590bea9c3ada",
|    | 348|+    "347": "0fb6749b98280cc8c26950a2cb9c9dbecac18f8760e161e9bab887dcb0077653",
|    | 349|+    "348": "0cdb77330ae73fbbd0f287240f82b7547a0ef42d37004003a9c759f86b686d61",
|    | 350|+    "349": "690ad38e4357b34368966b9de08d89e0c095246bf55969842f373f1976f86062",
|    | 351|+    "350": "5b427d47f98e296cb78875619fe67d42f41868b78886d560d8fcac89043fe945",
|    | 352|+    "351": "93dcda27a0c12f0c32cc35f0de161e7f7792d11abe5d4c50d7fd5192ab8b11c0",
|    | 353|+    "352": "d01c0cd49e7649289a1f13162757de494bb9104b20ac8bdb30a4180df5225889",
|    | 354|+    "353": "3d856f38821d7b221aaaa9baa3d7927f6e360919e8f8505d7499f9bbd85c44b8",
|    | 355|+    "354": "36dd3030dec4a8050d2079678250c9c6c86c66c64fdbe7f5b82e79024bb8d5a7",
|    | 356|+    "355": "b0a915b700e415ba3acc3ef261128680b921b5df9bd6fb1d35c2d1180e7f61d7",
|    | 357|+    "356": "a309814f13708f2eb5ee8dd1a3114e8f8b15646b8c797bc7119ceaa3f6911f0e",
|    | 358|+    "357": "61c9c81a41fd294a8f07033c8373706694faab4df3652d310e84904356cf5e6c",
|    | 359|+    "358": "7d59500b8883d81040173b88462a73849e0d386a53830d599e6a042f4c1c165f",
|    | 360|+    "359": "0793805920db4896155cbce40fb58570a3cc952d0c15ee57393fa3c6ca7a8222",
|    | 361|+    "360": "ee8cacd40fb7515e510cbbe7deb6005369ce7d9800ecff897f3fd8721fd6ef71",
|    | 362|+    "361": "e96f225fa470174b4ac787b21579ad1556804de85c0c83da99a92ddc2c56c7ac",
|    | 363|+    "362": "9a4ce079c1a882a306e21e0c145dab75a2698cba3860152f03dafc802ad9006e",
|    | 364|+    "363": "258a6e6ea10385ca3c0cf08377d13ef31135bd9479d5a4983beadf158e19ccc6",
|    | 365|+    "364": "13aefde214541fab44d2a3013c532637a3da82199fb6c0a1a941c3108f76b9cf",
|    | 366|+    "365": "0cd978902035027c6898d6b5fc11fb5931f06f8e8ec9c24b4706143c91de9450",
|    | 367|+    "366": "47495a92574a6d7b150eb3f4338748ba03672ff93162139f98e03847f96551cb",
|    | 368|+    "367": "fad9203cd26fccb99f0f89fdc569c230eda46cd72ed3fb7e5f6fbcce78ced1a9",
|    | 369|+    "368": "a237e13fa6c32b66695b8c8de6472d5c93c7650989f047f62a17438c07036845",
|    | 370|+    "369": "da4c450ba0c4f76556fce54bc3f6b2a754a626cf1f87ba3280f545e023942640",
|    | 371|+    "370": "5000899cd3070e1937d42a68766c840bdb9629a49c6112bea5cff52fdb4e9f7a",
|    | 372|+    "371": "7afb55ee21c0447f7b961265abe7ccf87f59af6206949bb1da19fd36334b09df",
|    | 373|+    "372": "fcf734716ed1fa724e7228a489304e3c55e813734fb5792a83f806ab04e40485",
|    | 374|+    "373": "83c98f0431cf944440dfe0a9831275ed451b0d16856aba4100f53170c55c2e6c",
|    | 375|+    "374": "d998ea6616a5a7a9f7beb3ec02f8cbed4a9c5f17be978c31f32ac0f9f4e4460d",
|    | 376|+    "375": "6a72aba5c61e27e281235b1f001ab68b840f6e8bef0e6bbd7bfd8eec1abf844e",
|    | 377|+    "376": "980dce9435a9fc03250df4e809c2f68c48601b64c30d32c6e67bf1faa35fe274",
|    | 378|+    "377": "7b4a0b6958cf23951636b5e27af8041dd9901256c53de44c9be313ffd0a01ea0",
|    | 379|+    "378": "a1b13bda78da3ccab1af6c330d3e768fce62841f924933285e7b1f7a8b7dcd5f",
|    | 380|+    "379": "c957fcbb90e1afe9a342e95608ca035596a7dfd4cef398ada55e05a2462aba14",
|    | 381|+    "380": "b794fae83475a77832f46e69799419f9881bd774e1bfda56773b587c42591039",
|    | 382|+    "381": "e7208f3630a20b01a5e1bf5d0537be9dae9fd7529773cac12b96c4ac2b0f8dbf",
|    | 383|+    "382": "70480c0d26a6d76eba0faf3ee047d6214b2ca4d1442070ae5e79893192ffa699",
|    | 384|+    "383": "3c814d251089cb2a92a78ec3424b2a729cfbbfc6a996fd48148261312364a9a8",
|    | 385|+    "384": "f709015ae0f8ad20bd2efd94d01af3858234e381942b5b15391ff7f77211b116",
|    | 386|+    "385": "0bca6cad1f4ff336b93c9f86c4ac872bda67ee0cd41b1862a7a663852717535d",
|    | 387|+    "386": "3e1748647b60bbf292aacae65b3608ccce8e55e203a36ff062ee787cd8c14480",
|    | 388|+    "387": "cf592fa81780e727a56553df32410beba6de9c33543dd1ef1155b368ba9a9b9f",
|    | 389|+    "388": "911326fcfb0638154f69eabb87e4c0c141df09e56274c8522e9c13b7b577f00f",
|    | 390|+    "389": "cdd56fb06838a10149f2c7229bbc76f78b4a5a58945fb70a47261f1bf635c404",
|    | 391|+    "390": "07dde4848eb878808635fb7b366261b1e9cb158635e76577eecc48ccf941323f",
|    | 392|+    "391": "76cd3def1eea8e2631d333798f4d282bf40f6254b2d18c02c78cb56b33462093",
|    | 393|+    "392": "c4f7ecf21a8738c3ad0114a1ee6a2d16668e71b499741381f30827ed451dc817",
|    | 394|+    "393": "7bbc419f89fde57d2862bfb3678ddab96614693dfca109d0f444e4762a2b7a8f",
|    | 395|+    "394": "7781ca3332d6da18b1b9be5e2eff634b526ae9e8088f6e479b49d657f4f41525",
|    | 396|+    "395": "5b5de0def2c4a989a54ae3e748362c78cd018778d5adc4dec13c1bde6ffdc139",
|    | 397|+    "396": "d42c389d6abc7d8102b8cd1b906e4600da08394388d4dcd432ec955e6d8b311d",
|    | 398|+    "397": "629e23dc358ed2a8c202e1b870e270e401aecc5d726a679b542df8e6becb4200",
|    | 399|+    "398": "c30114e73097c3fa4efb203915f3b828b1b8c432ddeab2b7e1ba3fe63c50e190",
|    | 400|+    "399": "a681ef7bdb22145a3e051ecf7bfb694c18b255c80dae6fb8d49f187d28f3c58f",
|    | 401|+    "400": "c993a792804e09c9f60313f4144953eec072ca6a8a27f44d8718ce53d9429585",
|    | 402|+    "401": "074b576ae2054cd030ffcfa132b1465f8f49b836f505cd4bb01af4a98f4f5337",
|    | 403|+    "402": "d45f88fc3c00673ef7e628d867a54a4ea281b3b2620735cea85a8da3b06321df",
|    | 404|+    "403": "a09086d3cdab7d6ff8a9fba1746c5d236e0ad0abe088be99bb172e80c6f0f8f3",
|    | 405|+    "404": "55a774ac3423440dda50d73e472887195940d5e9df605b30deeb0f2528b001a4",
|    | 406|+    "405": "ee9fa61ae8153df7979be3afe6377e584fbdad624833424a5cff64f6ea94c9da",
|    | 407|+    "406": "584cba4abd5711b8f558fde97620b8ff0fe91586bad052ccff87c49c13f72555",
|    | 408|+    "407": "ac50b37409f7ea91f90856bbfa716731013deffb5f5b51540a99736e08e5378e",
|    | 409|+    "408": "2c12c3cf062c3d9cf2c53e6e4dafce70ca5c7a38c97479c3b013cd91076ecf4a",
|    | 410|+    "409": "5a55b5fb584c359f4b6ee2d21deb62923b0b25e1b4c3da0a6f351079ce657173",
|    | 411|+    "410": "9e224b6ab0b7f20759b63d1799b426a8652c9e637b1f38d3eaf8beff73c80c67",
|    | 412|+    "411": "66c0c1ab79e9887b5daf2c510f2c2c4097044b69fee6bd4ffcff73ad4816b8c7",
|    | 413|+    "412": "27f1768d99e22f8b55d010b8b7acd904e8b66751d5310d32c4d017a0ad34d650",
|    | 414|+    "413": "7c99634a1161e424a14d60b516291655096eb90ed055326325d7f5de7a44a3e7",
|    | 415|+    "414": "4e03e038e99870b1faf45a0a29d6124379d05a0a3553a11aaaa91b8ba56eac5f",
|    | 416|+    "415": "955e433ea745016af2a5df015f1cc223ddd84ddccaee60d5302b7ad61542d9e1",
|    | 417|+    "416": "8d07a87b9012a166f5bec4dcd646d5957c9b3633a1a37c40c584ede75cb7ad22",
|    | 418|+    "417": "3f738338cef45597e3b839536953104186f11d94d16877c77abd8a067c152dc3",
|    | 419|+    "418": "0c813356b30108f89fb37e8774a98af4f9eca3df49e963f985ecea82a88b1437",
|    | 420|+    "419": "8ea8d93a9e874f8c8ceeb240f1f1245a077a7c0a62287d3044feaf855b5dae78",
|    | 421|+    "420": "af7ac1e90e07f189afbb284ae24614d9e713e32098bc39bb81d6484d47351444",
|    | 422|+    "421": "f45e155846624f37cf2ee08be2a63cb1ca35bf795fb0f770b4c91ab549f22b25",
|    | 423|+    "422": "69d728f7e25055dbebd41684bc6de61be6b4db4119d7ecdcef5b5d8ead976537",
|    | 424|+    "423": "3e78c62395be704a59a3a6a65e457725105619e0a6f9f3aa6b311c4f7762b0a0",
|    | 425|+    "424": "fbd6edb36c3754a35e7de936839c4fd0564db873924ba97b35cd43e065835582",
|    | 426|+    "425": "ee5bb631b2a9edf8ed05781b192f42e24ae748f3aa4ba5e635374c094d28ddac",
|    | 427|+    "426": "3e913e088a689d2d33bc797040cea94512bf54a61f96501f60576ab22ed0304b",
|    | 428|+    "427": "415e6da4c7f92da36e2d8c43fa8056d0050ae127e648451e2fada49bf2c936d1",
|    | 429|+    "428": "389bded7b0c14212fb69b559fd1ade4f5b235b976c9655365c45481c3afda486",
|    | 430|+    "429": "3007beefa50c509b89b86c54f53757ff701f795dc5f7ed47a1520c2b092455f7",
|    | 431|+    "430": "59ec8ec2866ca502ad558ade9f8a06a9ff815a1ed649bd1cb513f417f1d4727c",
|    | 432|+    "431": "d3f28dffa4e22b3bed74c3c2c9ded1e4a8be49d3757368e4e3efaf7f79affb15",
|    | 433|+    "432": "59fd80dbc8eb4af9596e4ce8a87313d363da41313351a69ab3525faeb905c27e",
|    | 434|+    "433": "471a7ddde597fbaaaed1941f42ca1fc0f4f047e17f2197f8999dea98b38213f3",
|    | 435|+    "434": "319cb430c66d9f418aa90a3d6f9c2dfc8171383d6f4af5803a73684afcf18e15",
|    | 436|+    "435": "aa29c0119ca84133617c8bc7455afdfcf5b05a569393ff21ebcb10d32ffde2c8",
|    | 437|+    "436": "928f772ad7a9fc501f71cdef6dfe60e2d8cb5d5c5800b519d01afeae0681dd08",
|    | 438|+    "437": "ea70162a014b8294ede65af6fcdc11fb365ab2b126aef8d47983d58816fd6a54",
|    | 439|+    "438": "43633662392854b5d9f9f0fa564605212d016c9ea9377d2a6ab52137238d4191",
|    | 440|+    "439": "42f7e88fab5c9cb31d4bb34403d7958abd5023e9cf9ac05cd29626c5df763584",
|    | 441|+    "440": "cd08ef4f14b804e3106ee88f9d2b24864d5e2fec6c7cd7dddfa2713e1431375a",
|    | 442|+    "441": "daa69bac44ce5f57b4b43ab6ece3b2b3561292c0f4c6e82a506ce2973713f749",
|    | 443|+    "442": "910d2abf184cfd7b1964cec906a79f3e45f59e3d42ec20b22f56de59c9018927",
|    | 444|+    "443": "7a14ac86724d318e6d40464e710c17625d441d1e7adf83d3062305de2f85d445",
|    | 445|+    "444": "390877dded07897360921e8d0d126bf45d6a379d47292c90826d775bd1897f2f",
|    | 446|+    "445": "5ee5723341b0b81c9e0172fcb654f8b24322244bc2d1b55afcb78b180ada180b",
|    | 447|+    "446": "8b2dcb0168e8701dc9da286489a1e68e43e1b17638e5990edd882196d7fd5a29",
|    | 448|+    "447": "179af1c75faa5f42e89ce3b41496a64b2d2846361f76dd5d87f4ce97ec2bec07",
|    | 449|+    "448": "18173b14e0c0bf403b5f0d4aa23515ecf44622b3a860d80e866cd498f107123c",
|    | 450|+    "449": "22d7739bccf54ea1159ce6aca3e215482deba85a4db0676cf86d82a760c44a6c",
|    | 451|+    "450": "938bf7cdedab94bd7208b69047014e3d9ab7b54d1223bd649eb3de0bd61ab47e",
|    | 452|+    "451": "abd88e378f54b649e818d6e1d8e06c9f8cf225ac96b4085523acbb1f0c1df24b",
|    | 453|+    "452": "4119701c51dd8c457b74a19ed7ae3bdf069f5fd915c8085e9a15d909a39db036",
|    | 454|+    "453": "381ba093e8ece9e14efc965ee94bb8adbd1c0bf140875ef95f8f11050d5ed489",
|    | 455|+    "454": "b7613128b0401fdbc07a4015eb3935f6677b84dff936fc5e7e9f424d0ba1006e",
|    | 456|+    "455": "35ee11c9763f48a68f2b60b4b9c3919d3a895afc7071e8dcac5abd5845dfe79f",
|    | 457|+    "456": "8b129a3c7163dae86f1f43c18557296240a02bdac70ad29538eb5dce00e51f4d",
|    | 458|+    "457": "629c99f9af0e962f00b812057c0967861a9b6db9dd652233ac4b37f368d09206",
|    | 459|+    "458": "02df8a1d11130bde8af932dfc5cafe7d8e6c2fc12b82df5d222a91e4eed8e2f8",
|    | 460|+    "459": "062b225facc7a897e0e42e6b0f95deeb8b02de64267bf5cea4cb5280ccec1562",
|    | 461|+    "460": "a05f9a7cb049c40760ea2196eb41df1826ad492e6e5fc4696ce7bfcf7a842811",
|    | 462|+    "461": "95e5e99da04c0cd73e1818a62be3fc0de98c76d5cbdc81261672824ed5b8c1a7",
|    | 463|+    "462": "69eafed1b3d4022fc245a8416c1120bdcd039716db8cd43351a96e6c7d10691d",
|    | 464|+    "463": "018efbd353bb456112cf2c760b4d96aef02aa899ef74d4aadfb3dcf374a22987",
|    | 465|+    "464": "cd4447e836cdbed7f6a3998b50c4ab467aedaeb8e54c377da34245e90fddbe12",
|    | 466|+    "465": "da0612471988c89ea2fb190838f9f5e9029fd106330a801e66280c967ff1c52b",
|    | 467|+    "466": "8d16100c0148ed7bd41003b4a0612cbc5fa150ddabe5f9916ed6eac3fcfdefa4",
|    | 468|+    "467": "d6ea164cb91d14d6aba2d482926cb6cbd1a3644737a0530abac635083a97b8a4",
|    | 469|+    "468": "8d0e3f6bff322ff11d1267f1f8303a8ce1e2d796b7dc2d9eb3e3da939dd850b5",
|    | 470|+    "469": "35e2072f22c7cb980fbe797e30c25e9224328813eb81d07d3c88820492ce9a1f",
|    | 471|+    "470": "4993f275946ae0d444410821faa3ef4a448f10888c50ff59f7ae01d0b50328d9",
|    | 472|+    "471": "b9af9323a0237fbf88fdb14b8bce95c084351325249629ffd4fbb32fe9d6da5d",
|    | 473|+    "472": "5b278c08ab97d82c1779411fb1018b07feac7ddf38a69e4d398240a495c54271",
|    | 474|+    "473": "4448b03417a784f554c44eb15ad2d4cc022bd9cb5abe2547811eb8085355aaaa",
|    | 475|+    "474": "1c64fc4076d6b00aff86a180fd9af927b7c1c9ba87a2ca3c83dd80ba5e5ea973",
|    | 476|+    "475": "e571b4b8218a2961ed2b04f62f816eb18686d82b7f2693694b9c774acef4a0ff",
|    | 477|+    "476": "a6383ed918d7851ed7503921a64201a032a33c9e1cbd4e08d1233f543bd21be9",
|    | 478|+    "477": "c871da03e684e099190c4ce787a9588ae85841246ad7bcc9cb4c302d617f881d",
|    | 479|+    "478": "96d8bec6b787a7aea2da8dfa8a1226e00881afc218c211fc59da830775d55acb",
|    | 480|+    "479": "b35720df96afbd98c6a4f081ae1173fdce21d63f75f7b455f4c2b9fc0aa672c2",
|    | 481|+    "480": "2db876e9625c8638c66103ad0206c9a51b68d4c6a3222f403b195a81837856e3",
|    | 482|+    "481": "bac35824e79af403a2058b08cbc84f8e4df93a21d1766e4ea1de6414e2a8a926",
|    | 483|+    "482": "0f9797e2f3691bc7291d81d1ddd5d88cb4e10b0be555e2ebfbd3c5b12b7cd2b2",
|    | 484|+    "483": "8f3348df383ec9ee00e18d41c419370d42ca6ebf71c510690aa5435a679b7e4f",
|    | 485|+    "484": "3b3bac32669c5b66faaa42b89a2dcb4de0bb9aa0bd279d60061dbe9e7039f5dc",
|    | 486|+    "485": "25d0335a0576f974617351ef5aec889f311fc8d7cddb997862b10b2496842d4d",
|    | 487|+    "486": "93b9a59a937594d2196271416ea3b2221d32b3b40a04bbebbdf97e8bdc557e0a",
|    | 488|+    "487": "a643c75a8d062b87a1c8635fdf439c04d949ce01f75dde10ab6edba90cbaee77",
|    | 489|+    "488": "984593c12abbff5d009091cd3c1883c87efc535f760727ed12f06df0902bfa75",
|    | 490|+    "489": "926ac61244f94e10270a2d40169de025be6db342b3de7f0db33a50b07176c143",
|    | 491|+    "490": "e2c8142e501b0b0b808d2d36f5f38266f99cd3aaca7d2f70f4bba386ae1d2025",
|    | 492|+    "491": "1a1c8b472424f8057c94a9f5e0c0b673551fbe9ea4cde5ca2d90df1de76a5c76",
|    | 493|+    "492": "345a83966ead821efa2a9de93aeb0fd5bd60a8f50e162caae2447f1f4d9462bd",
|    | 494|+    "493": "ee7018d63b08bc7226d6f77c2345a87e09fc7cc87b0a003aaf3a4a3f622edffd",
|    | 495|+    "494": "3d69e540997d79f21f249d4d8f73cd75119d81bcfb8bd80782863249f0d7c62c",
|    | 496|+    "495": "b717f1088b0ce24851c30d54bc8dad9f3ae93402b91c874e385e5c699323a5e2",
|    | 497|+    "496": "fbe77ec1978ad86e73e5a3f494fa7c198fe334b511298f5a0f2d04d6a7f51d01",
|    | 498|+    "497": "a4a66d6c7c555a2997ca59a8dbab512388adf20902293a5617132a16df76d954",
|    | 499|+    "498": "d71813b8175fa2d70181d87ae8f839e79792516a1cfa99a7e6b29500c057617f",
|    | 500|+    "499": "477d5b817df8c0b6f0928d02a58fc39fde2224493cec89393bd6dc349e5235bf",
|    | 501|+    "500": "3ac8e26d4864c538936efa7c5920435107a50c01306adaee5a4aeaa2ef378f7d",
|    | 502|+    "501": "766448b05b248ac3d6e991baa3e4b2d53b02aac426bda312c2299b2b983e145e",
|    | 503|+    "502": "50218b55f5b7207438137f2b0c71e3f6d37afd76aa5b1f2106111f3432b4cef8",
|    | 504|+    "503": "1d7c24799a287d42e97dd4ccc5bbd3713ce139e6294896cc5fe2efb80a1be7ad",
|    | 505|+    "504": "9878db5eb2218b18568dc8cfa13bc8363a1c93e6a59a05cc76da0588fd54af46",
|    | 506|+    "505": "872fc20275833f09c8aaef277abfe77f67be6bd443b489e0cb8bdf9d4ca9fac7",
|    | 507|+    "506": "d66834cc7ebe58cce2ee1c02bb11ae69672d711ead6a0a58ab592339cddbf02e",
|    | 508|+    "507": "ae955394665befbbc89e2ba85b5e520cb293b8d03209b1f71d78ce2cc807a437",
|    | 509|+    "508": "3917ce4173af47bfaf8525f0917736bde3f4bee0ed5fae721c3e2fa957ab1675",
|    | 510|+    "509": "2f64571cd71f0e59006da84808abf3d3ccff9a38884321533d448b3e8e3cae05",
|    | 511|+    "510": "41ce72f4701e786427413b68fb70bd77d921c06648ca15033ce1926a9f1224cb",
|    | 512|+    "511": "c9fc787389265492e60d5503f279714d5b19760ea7b2e1a720e6fc0251fe087c",
|    | 513|+    "512": "a8af6acf3744af13cde63540e37bb9bc722ea19a012656e3a3c5bfff8292c423",
|    | 514|+    "513": "506b90816555d1083be7d211f02a5db364e5c2337fc85b1ba845c1a806689373",
|    | 515|+    "514": "e4e9536766181eda627721723bfbdbca85859a3ba92d439f58ac0009c102430c",
|    | 516|+    "515": "16daaa62fa87776bc4843d226988cc83ee846ceef7b885ab63e10789b30071ae",
|    | 517|+    "516": "44b6de4eb51dd8f762142f284b154d3153592549cdea3b94467fa95484a4f172",
|    | 518|+    "517": "bb72c6d437197a8c1f1132626b3b47adb9827f4f9b912d1069cfcc75575371b5",
|    | 519|+    "518": "ff57c1f518651af805bb4b258130c7c5b0726422c3390327217562088785b4ba",
|    | 520|+    "519": "159b59f1261b7a31d7172cdc28d9515d0731e5117cb30f34a497bc3bd0496da2",
|    | 521|+    "520": "bdfb7f17c8c841c0b61ee7f00e51f09e4c78c90f7977548b72050a7aa12dfa3f",
|    | 522|+    "521": "bd27ca9292c19160cbb0568f750b247fbb805b85f4a2316fcf2c3a35d3ae031d",
|    | 523|+    "522": "98e0ef155297aac8a4060d204614753f26f6ba5357deb78c683783dc7ae30191",
|    | 524|+    "523": "9bfc344c80d1200fe12bea3ba4cacf8d5ac9693258962f2f15f42b30ce8ef3ef",
|    | 525|+    "524": "8df22d8716d7ca6354ea42b8e522d286ff9362cfa5881f527efcf1a953ed1151",
|    | 526|+    "525": "13dc6d869fbe2c3d95f715e55f02bc3d5787874b4c88d7da1d05360afd2025fa",
|    | 527|+    "526": "dfbe442040ce9afba654773fb14f307d67ab614267d3feb6b18df03182b5b60f",
|    | 528|+    "527": "ba634833af68fcf0ca7bcb08fa699b2c5fab934eb81ecd85e7464b01bca131ca",
|    | 529|+    "528": "016f7b569dc1c3466c97754c7dcc0f76c2a32a76c22357cc521bcc330d86daf5",
|    | 530|+    "529": "4960ff863e3d21a58f9e81c3d94075cb7a4daea5fcf396812382111e462fc57f",
|    | 531|+    "530": "6a2e45fdfcad65e0ee84d206d59cbac998026d7415d16a5c0b8c55e4a7d6bb3f",
|    | 532|+    "531": "95ec72fa8c409255d43e7c8d4e957bcb9239534973187b3b4cc2557b09bdba98",
|    | 533|+    "532": "fee6802490757983c499a08831d9bdc75a9eff08700bd29e8e5c134583ee07b3",
|    | 534|+    "533": "8a056666bd75d853a12d22b8317042a3f5500cfb21f6698d90ab41e01edcf81d",
|    | 535|+    "534": "8f65c9feb935e09a04c87143d1b2c63e38f08738199ebcc2758f67ee914d8a48",
|    | 536|+    "535": "ed8970f8ef1e2374289fc735aedff90b010c311a3b80d16df6bca2d3c250fdeb",
|    | 537|+    "536": "f82635851b442ec0ee95c5c2b7377ba382aa364cc49ff4e981d509ef324bb356",
|    | 538|+    "537": "54fc97bb6f3d7c724d4e245df37111c20334972300297fe38b590354fb9dfe92",
|    | 539|+    "538": "650c7f5f382c295cf6e7fb092db6fdfff164c861bcfcfe1fb38a50268f53f50a",
|    | 540|+    "539": "0bfb3df290912d8a70dc5e1e2761151cdf2c4b75d4b37c8fdcbed7483ada85fd",
|    | 541|+    "540": "08f1b2bffa88a9d01eecb8c9da6636b5e668a5478d8876a63ec3a74d7f932205",
|    | 542|+    "541": "5e59cf440336e86b67c17ed61f7bee7e548c434f475c415294b3b652d1aec606",
|    | 543|+    "542": "1257b6a3ad900df97f5aabc1e18b9f7ddae8c7d7ad60216ae21b5b7310cbda84",
|    | 544|+    "543": "8a783bfbe11c7f7b24431a15a0eb582f6fe5f75d1d21a3d55f8d8d81ba6b411c",
|    | 545|+    "544": "ce93bedef94ffbf62ad449cb0c68e8103a0bd005563ab854daa5e470664b4d7b",
|    | 546|+    "545": "40c253003d601fd2c90908bffcd8133e77489fe247e74ec03901895318fe69de",
|    | 547|+    "546": "d40739115f18fee96817266232ff1b8845e7966778fdcc644028fe5c759469be",
|    | 548|+    "547": "fa32a8de8fdcfc551d808c5dd0ff5545a199027acd32e380959b91f3b3d04643",
|    | 549|+    "548": "72e66168068b6ffcd2988e24124c8b1dba9a5b52a383a937397575e3c1e3f031",
|    | 550|+    "549": "a23baaa745a976b4f212836beb81a0a7b42d9f2e923c2412e2c07c63ff660ceb",
|    | 551|+    "550": "f58ff320639b2c47c76ed8aba487e31da0fd4656c3be6e33807cd00f77456e5d",
|    | 552|+    "551": "0449ec4d6d5b2e88603e62f3ec0287ed711cff682bbdfe298a197144ab24e80b",
|    | 553|+    "552": "f125761e8a0d02b17b1dc4be40216f2791727fd4e4bc56f60ebea1925c2fbf36",
|    | 554|+    "553": "dbb93b2a6cbf972bb1f94d1f8656cd113a09a02cbc44f25737e7d75c986646e1",
|    | 555|+    "554": "dcfd1e7a4a32ff0fae296b8211b5c9e91ab81844a0308933f598c712c1bc313d",
|    | 556|+    "555": "cebbca914f917f990202f110e77285132d2a5a3ba9a7475c93e3561d8ba88ea0",
|    | 557|+    "556": "0d5518ef165979b758fcc8df9c8cf536861f376f8640541ba6112ee7610ed82e",
|    | 558|+    "557": "0547c86b57c7c8c590f6d7a5131778f5b6ab2eeccc5e819e5fd095a6d4e68b08",
|    | 559|+    "558": "e763aa1dd494e097251484381ddb057c7d79b739c3f8644b1759e786e12f5b40",
|    | 560|+    "559": "e48eea4c3b4c9d58fe02739accf31bb64dd9c31623ad4cc06c740463d664c098",
|    | 561|+    "560": "77a09dc1ea6f1ae669004b8c9429dd83ead1148c62e0d945173edac45d9000a4",
|    | 562|+    "561": "756d226727e611d4bd22aa33747da2f635eeec070906dbc3262ef29e341e2a6d",
|    | 563|+    "562": "29de450d6e440c528287b98bcb4b76fb5155ab573df4721467446114661936ed",
|    | 564|+    "563": "7703d943dbbfdccb90acad65ed7c0eb13a10034ad01809472a55eb3162b7e53b",
|    | 565|+    "564": "65712c105411e6fc0ed35b9347de8cbaea33b0c5e57cf162f48dc257dd4f05b5",
|    | 566|+    "565": "2945ef4779089c9e49a9a9f5e2a67ba7e393aa20a955ed9302da6677cb03a9cd",
|    | 567|+    "566": "95d936e1d454df2e1e7d486c43af387b39a50cb57e57c7712d967bc9ec556f41",
|    | 568|+    "567": "2abe8af9ee20c6b8ad5034bc31fc1f4f16769595d5b4fc2837db3e76a90ac405",
|    | 569|+    "568": "fdc104338866e50ae2bffc1ea19719136f639df6c25f38a8680a70e9375a9378",
|    | 570|+    "569": "25677266de2b900788dfa047cb53f5585c37b564b3a711243fad52e186ec184a",
|    | 571|+    "570": "9101edb48d98c3742ceb713de591d261b79e90481d28f83f2d2c74d7034f4b46",
|    | 572|+    "571": "c364dde8cce2080d073eb1f9666cca97ccdeba61b2bf19ca0c84987e6f8d3576",
|    | 573|+    "572": "9cc3049e9464376b95fb88d6fff4331e0e40196f92a0a9aa1c5d10dfe33079f7",
|    | 574|+    "573": "2ade73491e183608b340f312d08cfd39c10ecb581c87b873443590452580a43e",
|    | 575|+    "574": "96325b210d18a7a1d6873e00a859648c4754bd4c91c324aa812ed78bd047118b",
|    | 576|+    "575": "33942a261a9150e2b5ce2ffe5b934a81f3972cf5aa5a9414a9d5f63f6b55324b",
|    | 577|+    "576": "7fca01a835681914b5fe5014d5649b5170faf459375ccc2bf9ad71ebaa73940c",
|    | 578|+    "577": "2bdc7a0e8adacf885c6ea0f6534b935b8a9dd338c5dcff05a74c162c3e9dd531",
|    | 579|+    "578": "ce6b6de1d907c8839b84f5f3967f6af7e9a3644a0bd7dffe80cfe531de08f8ca",
|    | 580|+    "579": "03dbff2575902a3c56a64483c8e8ca38d9888f72c6a71a6236eb07b808fb24ab",
|    | 581|+    "580": "96892003c30358ed55a39e13e6159fad09ebc3916e34492b91d63832fa86f731",
|    | 582|+    "581": "4fc5533c52133e54f8b54dcbfc4555638ae809676dbfec9d1400ab032f30648d",
|    | 583|+    "582": "7ba9b154acf699c8a123df5471fd40ad556cf6fc630136c686c87b09c88ff546",
|    | 584|+    "583": "ec10ea6801eadac9ae8ead5f222e0580f419b67d2ad5cd5c8ac914dcf5cfd69f",
|    | 585|+    "584": "510001c4104c80517a13f967df6ee071f15fb7b65e97229bc91b2925cbe4e93e",
|    | 586|+    "585": "ced737da53940337c5dff81720024fbaf4cee38aed1d3514d2a75c7b1271acf8",
|    | 587|+    "586": "9ab074d1d480d718930c9abac8b616a0bc5c30846381d6d9bce1741e9bca1991",
|    | 588|+    "587": "ec3fdcd8136188e3b476270894351cdc05dc44a4df50d1c4ed727294fb89430f",
|    | 589|+    "588": "31400607f95129fcc531604b7b0478a748d2495746280dc07ff30e39cd6f4a97",
|    | 590|+    "589": "3051de9b2a7ced941140aa1074952029f532e133beb41c18bfd990f43bfbd9ae",
|    | 591|+    "590": "4af295f83800334d77a04d56be7524ff6241e3d8b2f23820c9c54580b7996086",
|    | 592|+    "591": "2ecf2c1ab8d9e5cef5224842732af17bd2259598e4363e1d46cb172dccc39022",
|    | 593|+    "592": "2e71a26370d45781f31ede0c7810c2705706ce63291a52d5cd6f060ae16aeb01",
|    | 594|+    "593": "423867f77b64f725f823204796301ae09b427190cdbb62d472bc1395507da9a2",
|    | 595|+    "594": "6c28830e35913c59000dfce4432db255f7dd34809285881f05a9e9749f5d8452",
|    | 596|+    "595": "53fc00ae32e0b0d701175ac17ac0b91e05859ae6d7f3e5bf0548dad36e3d68f9",
|    | 597|+    "596": "9ccbee33387383d458e7ffa2c9c0cb9e4f5bbe3d1b949463a98232ae67d29956",
|    | 598|+    "597": "921102754e24e8ba99480e77652d88764020202e6dcd67adddbb1660204e8e78",
|    | 599|+    "598": "430f975f490ce37df74bc346556cb2186f7a47a58d3b282ab42f35b33a812f7c",
|    | 600|+    "599": "b603988248769444a1566b058ef3660cac528086b8193efd6d0be4080b834780",
|    | 601|+    "600": "dd539cd38fade63aa0d14899c7c75ff459ab839148b15b4efacd4bdfa0408dae",
|    | 602|+    "601": "571c5ade4cd89b460b7d2568a44d1efb05e2927ec840d8ecf149dc9e0ff09734",
|    | 603|+    "602": "edef32d6c2c7193b4b30a0e2c7d3ab37e0ec21db62543f4bf78169b683792e41",
|    | 604|+    "603": "cce7491b7ddf0e3ebde191e0e57614e61602cfaa2b52be5c2d657d9ae5e1f1b1",
|    | 605|+    "604": "d08fe0e5c0fc10640043f9d645446e23fa8efbfdf29c93c87794e5b6405ff51e",
|    | 606|+    "605": "1bdd74af73e2434db6149fd8089bd294defe3cedfaaf92f532568ddc6c48e2ea",
|    | 607|+    "606": "30e44b49f18048323d1c1bf4631587df8f0dbd477ebc79b7ef860a792953d932",
|    | 608|+    "607": "2d9b6a1b4810a39471e5dae85eadf595fc108097eeda746c8925a7be057464de",
|    | 609|+    "608": "cd3fdc5ee5b6e606349b9e5775d6e632e0424d6190f632632bd7435d5622b20d",
|    | 610|+    "609": "8b86933e27e64e6840bedc8087fa31326d9527a424c63ecc61823894c81f867d",
|    | 611|+    "610": "a781fd7cb6970e8f6f679296be5bb0fe7ea62207caa7ce86635257186a5a70d9",
|    | 612|+    "611": "4a3a0b9877d68deb8d7db624ec2d7f4b1c467fe337f803a220292ac6131acc05",
|    | 613|+    "612": "6e95bb170c3a521fc7befa446cad879a36b7b3d0e0e8eab1df6ddbd753156ab7",
|    | 614|+    "613": "afe8c7002c5e15859be829b4b69f0da00c1298971d5afa469b050016fc021978",
|    | 615|+    "614": "f85495a58ad9d5c4d16167084bbc3581ea22e6dfc39423b70d7fe486e316d951",
|    | 616|+    "615": "8da9fc3356df220081c71ccfc9c67251e6dd7058fb11258ecfc88ea9b8c00c92",
|    | 617|+    "616": "0fadf4975e2c27aae12447e080505d604258102f61c8667a5c2594ee033567e8",
|    | 618|+    "617": "06d9e8723de7ffd20129f1d8b5993926a97cad1261dc0cf01a37d8fa728ee996",
|    | 619|+    "618": "04d0dc62694f26c61871d8129259540884ad2296a3cf455f6b92fc911f98c336",
|    | 620|+    "619": "a93d0ec83cbbd4ec0866c97b372e4374a9d6724cc3767f5230e8316734cbb0eb",
|    | 621|+    "620": "071da5dc1dd87c2558b45247c29a92092bc5a00ef3cd46d70d08e18b791d2926",
|    | 622|+    "621": "458ca388a6b74c57ae13d1233984d5b66abb1f18dbfa12aa14ba868a9b5a708d",
|    | 623|+    "622": "1ad0227dc5f8c259ada5120d9db05ac7a013bd1bd84cbbca2f0ae6b174dac129",
|    | 624|+    "623": "d82d0401e10767b022417dbb64d348bc6c03ed4bb7e4553493e8d9e65525d229",
|    | 625|+    "624": "1d25005c86a9635d3483ea63ce95fa097f95792ebab86319c12bc66ea1d2ac83",
|    | 626|+    "625": "3fc397ed884cabc16bf30bb7487c8211424a08279a166d4fa4da6dc151a02cd1",
|    | 627|+    "626": "7c42e09e504cb269512dae989ee7fffe1f3bfea499c990e8edea796761331ccb",
|    | 628|+    "627": "5062b75aa39c974a579b0a3360c4da32e481d2242de72106f651c7d7de631cf1",
|    | 629|+    "628": "dc656eef13928f18d14a9265be6a923bc7d76048b861cdf1523e397801a8ef52",
|    | 630|+    "629": "9eefedc5b5995658be337f48146e37020db4ed3bb61e2af1fc57f698bd398b0d",
|    | 631|+    "630": "6e17ecc4a4d07ffbd67c49a59d31b7efeabd3bfead49fdf1ec005836e6030ebf",
|    | 632|+    "631": "781372694518c122f62566aec8867772e492fefef32c00e24b5604297dc1d44c",
|    | 633|+    "632": "c978055ae1d71dfdfd8bb4e845bb82fc4211b14560bf6001edefa4367e1d4403",
|    | 634|+    "633": "af4ff4b546369974642b3f68d4d3e90f0a0496b3b5d1572b638378fb49c7b4fa",
|    | 635|+    "634": "f6af89331ee087a2fc03e0bddd738e2716b49ed616ceb3b47743cf3806c6d8c2",
|    | 636|+    "635": "e4251ea6989571d8b83993560b537b7a9d0777ba54e6941757580cbfc14aab5f",
|    | 637|+    "636": "dc15b5ccabd8fd3141c244b7dbc6fe95078299ea3ce3016cbb483893fcdd4236",
|    | 638|+    "637": "053571be83ed06ab23a96d4e8fa129a4ce7e740de17dc35b000fb56c35a5ab80",
|    | 639|+    "638": "df57e1f418a24e38b39011048084c6b5cc91a56c1deb643ab605e0350f329b4b",
|    | 640|+    "639": "56930902baea90d1a8e505a227e5d7ac4da6b60f6c370ab75a0011cb3746818f",
|    | 641|+    "640": "c105d171242fa8e35f26491ba2f932d1577dfab2a4a6e75034ae69f062e8aa71",
|    | 642|+    "641": "0f6c3873a87ce630accf7f3b19feb764aac3fa0c3933042a817a82e6a9963aea",
|    | 643|+    "642": "c20081830b70a00d1bcc6f4b6572d511d534986c10ea3c057db304a1f26df2da",
|    | 644|+    "643": "143de023a92c7c8ce5fc0b839644e897267c44c8ba4e715743dc99686415a8b5",
|    | 645|+    "644": "7a8c9f1db1b1bce9a3b8d91e5b1a39a92a478029d975f5e45d593b7ca81a7134",
|    | 646|+    "645": "932a51e4c0cc5e30041ca5db1fd0674820638563a9df1300bece7df12c23017e",
|    | 647|+    "646": "a49cbd2966ea8248816b0a53b6eedea4aef2525aac45272b862d7d52e604625a",
|    | 648|+    "647": "40ad98735f3b5417ea1916f6146b69b7659963263caed186abf0790de0d9dae9",
|    | 649|+    "648": "53b288529a83c376f2399e986e5ca25c5993a6640063386fdb2de491afba2e81",
|    | 650|+    "649": "c0bebda0473186148087feb9828a418ab8d50726a1ff5c39ec69c4a6232c6b67",
|    | 651|+    "650": "98ac68d2bc42f89dbe97b3392ac691ed6c2c4f36a44665555bf7f816ca97cd27",
|    | 652|+    "651": "81f8287532f504b4f4a21e6d6ed573845bff197c479fb52e4c5b6f2fc1cfc40f",
|    | 653|+    "652": "fa32d8e7c1c766a6126b0f1cdd9d752cad55f54d0c05839e89d4da238615d9ed",
|    | 654|+    "653": "311cec39a42837f803ce8cfa5e6df32cc27fe541de108e3e7cf7ba3242e414ee",
|    | 655|+    "654": "f2b3d205c2da66cdf9a596e2caa1098132b832758eea2b14da071b8dd9584ec9",
|    | 656|+    "655": "39517ea688972769cccd46ad15b4f06ac2a6175d053dc97f849fa11a63a163e8",
|    | 657|+    "656": "2a21e5e89d9b019c1195c50af7c6e1864cbab05068d10e11519fb6d4766ceae5",
|    | 658|+    "657": "bbf54db41dc18753a3caa5001aae99c0c998e8a07b6e7390932054d7882498e3",
|    | 659|+    "658": "ca8e7b53b095939e5fafefa56e9b45b40c396145acf2a767f9f2430fbba75a79",
|    | 660|+    "659": "3d6c8492fbfe1c76e3f9d66485a7447489b89763623127deb6ed327a0c2a011b",
|    | 661|+    "660": "23d754ebe35981ad5de850f66bb2294a22280a8ad0b4160b1c29dfb5487505d9",
|    | 662|+    "661": "fd7eaca9690ee0384770e855ed600c96080c5c23565bfdae01c6045a87d9550a",
|    | 663|+    "662": "b93bc0a52860ee0a1fdc28adeca7b39288b1119e0f318467f0a193236e00f99c",
|    | 664|+    "663": "f73e3335b21c11b78987deb5a6eace1cef327981322f53a070adfbe31b56e7d0",
|    | 665|+    "664": "f3f0de955603850bd411690d11a5391e63f515a29e31e9241c66c62d688bcf72",
|    | 666|+    "665": "f2650e75f39098e5a114077b6e07bc15325adce22e1ab4b20569a4eeda5c6ca6",
|    | 667|+    "666": "a01a34d1c29aff5618a96046605adb74fa49b834975051d4ac82672567727a21",
|    | 668|+    "667": "2db51646a4038b38c88512738f79bb21776d39c7bfa3086538cccba0b63024db",
|    | 669|+    "668": "2f3336b7f1211fcc180cd76dc6442fecb412771aa45ef1a7675aa437d04e582b",
|    | 670|+    "669": "28bf022d827392eff1ec8ec121767ec24778f1b69da8605b4ab059023b8ad28a",
|    | 671|+    "670": "38db5dbb2a3ce2d31d1958f5b3ca4c3555eb0ac4193ebffa3f42ffd6bb4806e3",
|    | 672|+    "671": "0580cf2ef8abd3afbf91fba2032c2d51e43306bebb7f979bb750c3d7bd14c961",
|    | 673|+    "672": "394f1b74ccfac5a4fa958d813b5932371c5f8c2f3dbd1eb7202af2223aa08afb",
|    | 674|+    "673": "61c90400cd197b8ea6d7de90fcd1af0959fc37625fe163363fdae0ac4a724bfd",
|    | 675|+    "674": "6037c38f696b10fb531c26396890cd3b48d5408c5b37e61d03a72ae2f7b64ed6",
|    | 676|+    "675": "39c8b1bd1d534381b811bd8050e54b753106c1bfaf5d3cc63d8fe92a94471915",
|    | 677|+    "676": "346d1e2de9915fa2f4ce3675ccebadccb8e9d14239f1e53b6d08d09f5c26297d",
|    | 678|+    "677": "36841bba8f77d669e9d8f4e09ec580ce2c7a36c37da719815e65cc641eb1fdeb",
|    | 679|+    "678": "09532ddbaffb710f02964e270f8658bd8a09149744726a82f618708b35a5fa26",
|    | 680|+    "679": "774f8d6f89a5875342b21e8337aa5e3ab0539960a5b42554bc8d8a0fffce7d65",
|    | 681|+    "680": "48d62baa62c2a9c561612192ec39a7dbcecc8badadc0ddc755191648597a42f9",
|    | 682|+    "681": "7adc09dd86f3e73979d9f8a4b3232102ca52bc41d043614fe989cd908ed88c76",
|    | 683|+    "682": "522f0ff3ae2f1761dca78207dec1c9b52556eba2db7503ca03441abf62f65c76",
|    | 684|+    "683": "376e3c3e4b88ee76cb0f02390751a7248fcf1562013b1390b1e276a3f3d7da63",
|    | 685|+    "684": "6363f306f081683781908acd4bedd92b3a75c796243cdacadc4b9896d8cfaaaa",
|    | 686|+    "685": "29f2c4c5325cf626b392a910e6e22b6d2a989bfbb38439c20162b7b786b5e2f8",
|    | 687|+    "686": "990ae3583a1f7a32b7581a8ace626511c812e0bd910b8064fefb31e625b9c22d",
|    | 688|+    "687": "7e78b4b91851b976f5cc2a1341b9389ae7bdd0248ae7f7c53e7ebb2d86bbc73c",
|    | 689|+    "688": "1ada92e769892b4bb540d75cbf40017a24b5b309b28a097ed62eb7f2727518e7",
|    | 690|+    "689": "17a0ba5b100d0a92f3f82e2e6f31c71a6ca53a0f043094a6419331e22036150b",
|    | 691|+    "690": "f9658a8f0687d69f420f655c500304c3c0888f298a68075ab6a2165a3bc47c53",
|    | 692|+    "691": "3ff8aa53eb2f7e700fdc7cb838ca7f7b495948bb997ef70d196c10592fa64680",
|    | 693|+    "692": "c01c3e579b2743866cd3d0c1d9039871356143a99c572593d2702f387e9f629f",
|    | 694|+    "693": "c08e2dd3686459c2989cd6a367d2cc64b2bc2af460417102e9856e91b5f78fa4",
|    | 695|+    "694": "063e59bfd9cbed08afa508954ac9c1c313b80331d6a917fd2202e15e1eeb00e9",
|    | 696|+    "695": "c3259eeed96a5837a6630fd9d1245de7c77e10d0733b6129a3dc99548bd92800",
|    | 697|+    "696": "9ab20a4d8c3c0de897a1c8afa95733d0f7f79870c6379064ef4cf1f5baae67e6",
|    | 698|+    "697": "62c07adf4da24a20a723f6c32e35a51f2b942e363dc9fa35070e34991a5a9c1d",
|    | 699|+    "698": "632f1a4eba12f5c80401d82c4bad7c5679f55ccc89bf2da3e3930ff3d6671ba1",
|    | 700|+    "699": "8c40c5c92fad7ed2774080ddd39f62cdc94ca05dde4273344497ab4206499484",
|    | 701|+    "700": "3dccee8e873d2c9c2f8359417e666b702f97b60b90b229e3c41190909ff9388b",
|    | 702|+    "701": "65a57fc7ebcdab77821276a1eba1c1a625bf2bae575b025359de492592ded205",
|    | 703|+    "702": "c1b0ade78aadbf0d5576489c2200439ef825fe74452115edbc908e9ff955efc0",
|    | 704|+    "703": "1e5ea7fffdcdbca5fc91694b200db8e2e3737e829b7694e4dcf3b937b41be330",
|    | 705|+    "704": "9ddf38880f294ac1a759c764c394cacd4635735880f326a0b5e4a896e4fdce8c",
|    | 706|+    "705": "2bb033d9eeb9157fc6ae835e99b9523bfb1d61173cfb34941cbfdc4c0d3ea67e",
|    | 707|+    "706": "51a0e8daacbd6537efd583c48c5815a9bd22fef0eb9b8e15dbe2ee87c76e2a6b",
|    | 708|+    "707": "9f50d3b52dc4ebae279c6f6021258ca8cd60b8cd13e358f29a2879caa390a774",
|    | 709|+    "708": "42e0a9be7737aaab1fd27543c0273f4c97dd3bd6471e6ec04b1fc7b79542db71",
|    | 710|+    "709": "ac2605c16873ea2b5f0ce5008089a55e37588f45313ad06ccc7dfd96f407eb8a",
|    | 711|+    "710": "09214942caed4184e7155b4016b1e0de37c0a142deaebee3879c770438a28276",
|    | 712|+    "711": "8d8ea19a78bcb10e502f91a057bac1b200ab17db66e11cdf42b63ec65a8e6c18",
|    | 713|+    "712": "001493340cc232a48125f958308be6d0567ff2684e0625e55af8b0a024c4ccca",
|    | 714|+    "713": "98a124df4ffa11cca86fbd959f4d091665fc871a4a86cc1024429d1c116b556e",
|    | 715|+    "714": "cd175b00873a9a3369c628861c1f20df57a4ca75074530ebf5b974d04b8b93c4",
|    | 716|+    "715": "cdb954d8620ad2d95915f94243cdcf71170cfc363334b2f831544f55f0d15746",
|    | 717|+    "716": "abb62293fb9df9bc7a6e80ea24f0da1049f894ade937367e24563a3277f953ef",
|    | 718|+    "717": "319369720bf1831be4c73600c26f5d08dcf6cf85fd32340c28263e39c1dda5e6",
|    | 719|+    "718": "412ce061b1ae228d2226fdb3bf2cb68421870465d6a8cf7ae58515c02fe54684",
|    | 720|+    "719": "c461587d4f3a41c375628e94fb9f971cc2829b8608d3c7aca840e62a6c8f1929",
|    | 721|+    "720": "3651d0d1f023c90e42be5c6ccf28ca71203d1c67d85249323d35db28f146786f",
|    | 722|+    "721": "8430fc43038ba44efb6e9ecbd5aa3dfeaeaf73f2d04a2d5596855c7de5de9c20",
|    | 723|+    "722": "9687101dfe209fd65f57a10603baa38ba83c9152e43a8b802b96f1e07f568e0e",
|    | 724|+    "723": "74832787e7d4e0cb7991256c8f6d02775dffec0684de234786f25f898003f2de",
|    | 725|+    "724": "fa05e2b497e7eafa64574017a4c45aadef6b163d907b03d63ba3f4021096d329",
|    | 726|+    "725": "005c873563f51bbebfdb1f8dbc383259e9a98e506bc87ae8d8c9044b81fc6418"
| 727| 727| }
